{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Daily/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/arrow-left.svg","path":"images/arrow-left.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/arrow-right.svg","path":"images/arrow-right.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/github.svg","path":"images/github.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/mail.svg","path":"images/mail.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/menu.svg","path":"images/menu.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/twitter.svg","path":"images/twitter.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/images/weibo.svg","path":"images/weibo.svg","modified":0,"renderable":1},{"_id":"themes/Daily/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"source/about/index.md","path":"about/index.md","modified":0,"renderable":0},{"_id":"source/friends/index.md","path":"friends/index.md","modified":0,"renderable":0}],"Cache":[{"_id":"themes/Daily/README.md","hash":"91f3b2a4eb7a734cd98a9358923a243f4f096f6b","modified":1509717157000},{"_id":"themes/Daily/_config.yml","hash":"a9e87e5479e080c9efee6f715a34d88b1e3c28a3","modified":1509717557000},{"_id":"source/_posts/2016.md","hash":"620ef906388c02e3c8e790cdc70e4a1b6ce40fab","modified":1509717888000},{"_id":"source/_posts/Alfred-Workflow-推荐.md","hash":"4812567f3dda2aa10521e4277b38292f3287f0bf","modified":1553686372015},{"_id":"source/_posts/CentOS-6-启用-HTTPS.md","hash":"916ef2ed6b4df6624750d20c5edc5e6cdd29b011","modified":1564717330794},{"_id":"source/_posts/Golang-reflect-使用.md","hash":"c5fada928ed3ea044ee5d88358e4cbbdfa7e5499","modified":1509717888000},{"_id":"source/_posts/I-DO.md","hash":"81442f44a17dcb621130ff4fd814786451887482","modified":1509717888000},{"_id":"source/_posts/Pale-Blue-Dot.md","hash":"684d0eff9ac1bd9dae79a9f16cce9e4aa80f19a4","modified":1509717888000},{"_id":"source/_posts/The-Laws-of-Reflection.md","hash":"1dc2c539d6a46832aaf65496991aa11c5810d731","modified":1509717888000},{"_id":"source/_posts/Understand-Go-pointers.md","hash":"3eba400472b7bb7a3092c581b1149fbbc11eeefe","modified":1514192494639},{"_id":"source/_posts/Vim-配置-Golang-开发.md","hash":"b75235ab0c89abf9c570c49f054fe4be994b96d8","modified":1586853845236},{"_id":"source/_posts/final-eva.md","hash":"ec003217f37a619a08af42471785728fb7045235","modified":1509717888000},{"_id":"source/_posts/golang1-9-https-bug.md","hash":"0bcf2c4003f93b48366c10df69500b07273c5e80","modified":1584974904054},{"_id":"source/_posts/how-to-deploy-hexo-with-travis.md","hash":"dddbcd308d2b58c39af5e40c549bc9a021fb7380","modified":1509717888000},{"_id":"source/_posts/从开发到部署上线一个-Golang-项目.md","hash":"fe68dbb386eb8ebdb7cd5bc2572b69c405cadd4d","modified":1553687789823},{"_id":"source/_posts/在-Centos7-使用-SQLite3.md","hash":"6add7d962df04fbdd1d505f97e928a3c799c550e","modified":1590828041573},{"_id":"source/_posts/如何用GitHub-Actions编译Golang项目.md","hash":"7599dd1b572311e9254c9ef4dd2e7d1265697464","modified":1552113136603},{"_id":"source/_posts/应试教育.md","hash":"9c1a7d18da459913afcf3a992c67efd71b710687","modified":1509717888000},{"_id":"source/_posts/未来边缘.md","hash":"57c7fbb17583873724d975c6e7c0c3bedd2919f0","modified":1509717888000},{"_id":"source/about/index.md","hash":"ef86f975f86e39c319e8617ad2e3712c4783c4f9","modified":1536292120530},{"_id":"source/friends/index.md","hash":"de7172c77747efa547bf1d8bf24d46a298e0e064","modified":1509717888000},{"_id":"themes/Daily/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1509717157000},{"_id":"themes/Daily/.git/config","hash":"467640de6727b8ed5b5df138bc007186dc6dfda0","modified":1509717157000},{"_id":"themes/Daily/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1509717151000},{"_id":"themes/Daily/.git/index","hash":"16bec793c47cb4952438d1cca79f483037e2c0e4","modified":1544530568639},{"_id":"themes/Daily/.git/packed-refs","hash":"8be9e24240e9e5e546fab745be3afc5881c0a0b3","modified":1509717157000},{"_id":"themes/Daily/languages/default.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1509717157000},{"_id":"themes/Daily/languages/en.yml","hash":"2df42359e6646c0c2903ada8411100a8f1d15134","modified":1509717157000},{"_id":"themes/Daily/languages/zh-CN.yml","hash":"3e28e97eaf0e172ddee96b2d6f8ba604d90ff24d","modified":1509717157000},{"_id":"themes/Daily/languages/zh-TW.yml","hash":"c727b3550a12ad6f99b13e1b320466f8238f4b54","modified":1509717157000},{"_id":"themes/Daily/layout/archive.ejs","hash":"5afa6387ae87e15a4562822850806c51f471cbe8","modified":1509717157000},{"_id":"themes/Daily/layout/index.ejs","hash":"3317310e01719dd58878fb4b7bd1b41d495800af","modified":1509717157000},{"_id":"themes/Daily/layout/layout.ejs","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1509717157000},{"_id":"themes/Daily/layout/post.ejs","hash":"d1d048e00ae60ab8219c56a9bae7e84bfbee1103","modified":1509717157000},{"_id":"themes/Daily/layout/tag.ejs","hash":"f13f991cdd2d462cfaff2ead0a110504e10d1d2f","modified":1509717157000},{"_id":"themes/Daily/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1509717151000},{"_id":"themes/Daily/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1509717151000},{"_id":"themes/Daily/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1509717151000},{"_id":"themes/Daily/.git/logs/HEAD","hash":"38e04f71b506e0d1c3cbac8f25e61a048b7a59e1","modified":1509717157000},{"_id":"themes/Daily/layout/_partial/after-footer.ejs","hash":"00588b4db6aeec2d1f7951ee96980764a15e7f4f","modified":1544530554148},{"_id":"themes/Daily/layout/_partial/article-archive.ejs","hash":"32e6d38ac9074922f958126da4eb5cde0ae98da4","modified":1509717157000},{"_id":"themes/Daily/layout/_partial/article-index.ejs","hash":"e93ceb6e15352967381da651f73dab0c702a4f64","modified":1509717157000},{"_id":"themes/Daily/layout/_partial/comment.ejs","hash":"9c8975d87fe1a1aad63cd74affa68f42ec3334e1","modified":1509717157000},{"_id":"themes/Daily/layout/_partial/footer.ejs","hash":"046545655515a7da21d0fc82de79df9b451e77a2","modified":1544530945353},{"_id":"themes/Daily/layout/_partial/head.ejs","hash":"71da9f44f24fef5b042eba5733fd393b24790d9e","modified":1554290811173},{"_id":"themes/Daily/layout/_partial/nav.ejs","hash":"cb5cb6371ad98a3fafb9d138a4f05b0b13a83edc","modified":1509717157000},{"_id":"themes/Daily/layout/_partial/pagination.ejs","hash":"98af75b95859dc6aae946497f27d7e51f753e5f6","modified":1509717157000},{"_id":"themes/Daily/source/css/_archive.scss","hash":"698f914f037079d1a25b9d86923eac4775b2ec7a","modified":1509717157000},{"_id":"themes/Daily/source/css/_comment.scss","hash":"8f92712c08489332c824d13e9e3d11bd2a0f1fd0","modified":1509717157000},{"_id":"themes/Daily/source/css/_daily.scss","hash":"6d64a44de1916130d3c1dcb857a752965a760da6","modified":1544531129588},{"_id":"themes/Daily/source/css/_highlight.scss","hash":"e991c7ebb595557d35c45e3fa4c557882942905c","modified":1509717157000},{"_id":"themes/Daily/source/css/_mobile.scss","hash":"2b7297a4539e6ae803fe459ef411aa4149b24fcf","modified":1509717157000},{"_id":"themes/Daily/source/css/_nav.scss","hash":"410e959a334b38957060f73d40910aa5ce9cb513","modified":1509717157000},{"_id":"themes/Daily/source/css/_normalize.scss","hash":"59fff706bed3120e3d9d6d0092a0372c172ee537","modified":1509717157000},{"_id":"themes/Daily/source/css/_post.scss","hash":"64d31b9a7a16e9fd1b2604053ff7ff9b2bd8279c","modified":1509717157000},{"_id":"themes/Daily/source/css/_variables.scss","hash":"86258411229a80919ca91789cce8909aacc58bf9","modified":1552113295053},{"_id":"themes/Daily/source/css/style.scss","hash":"163cde007c7fb3debf9f53594c72d6536242f688","modified":1509717157000},{"_id":"themes/Daily/source/images/arrow-left.svg","hash":"4230dcb796a40d7a0f54c68e1ffb1f325ad962a5","modified":1509717157000},{"_id":"themes/Daily/source/images/arrow-right.svg","hash":"98c04bf1be3ca657f1e9697dc63219ade0a5616c","modified":1509717157000},{"_id":"themes/Daily/source/images/github.svg","hash":"bc2e3f2e54c354acfe64899482f6379d25f04792","modified":1509717157000},{"_id":"themes/Daily/source/images/mail.svg","hash":"18b3549b0447d605ca252fefcaa4d8e11179ce21","modified":1509717157000},{"_id":"themes/Daily/source/images/menu.svg","hash":"a1837ac76bc3e2aaf30450941bfefcb29ba16411","modified":1509717157000},{"_id":"themes/Daily/source/images/twitter.svg","hash":"2bef6c843de0113721c6c5d1676385897a22a446","modified":1509717157000},{"_id":"themes/Daily/source/images/weibo.svg","hash":"ffd43d8ae9f9ec4f5ae8b97cafa9023ac2a4e59b","modified":1509717157000},{"_id":"themes/Daily/source/js/app.js","hash":"b74710d1dd7b7d1407b4fcfc9499bc37de69b21e","modified":1509717157000},{"_id":"themes/Daily/.git/objects/pack/pack-b37eaafe2a81c5b68be9f92db2faee9ce540c640.idx","hash":"124b0bb5ac388b9b06135c2bd5868bdcaab4cdf0","modified":1509717157000},{"_id":"themes/Daily/.git/refs/heads/master","hash":"cb4aac74b14d4a0407b1461469b320ce23d2bc0d","modified":1509717157000},{"_id":"themes/Daily/.git/logs/refs/heads/master","hash":"38e04f71b506e0d1c3cbac8f25e61a048b7a59e1","modified":1509717157000},{"_id":"themes/Daily/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1509717157000},{"_id":"themes/Daily/.git/objects/pack/pack-b37eaafe2a81c5b68be9f92db2faee9ce540c640.pack","hash":"34d03e85327062e9e938e66705955cecf985fcf2","modified":1509717157000},{"_id":"themes/Daily/.git/logs/refs/remotes/origin/HEAD","hash":"38e04f71b506e0d1c3cbac8f25e61a048b7a59e1","modified":1509717157000},{"_id":"public/about/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/friends/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/2020/05/30/在-Centos7-使用-SQLite3/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/2019/03/23/Alfred-Workflow-推荐/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/2017/12/25/Understand-Go-pointers/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220252},{"_id":"public/2020/03/22/golang1-9-https-bug/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/2019/03/08/如何用GitHub-Actions编译Golang项目/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220252},{"_id":"public/2019/03/30/从开发到部署上线一个-Golang-项目/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220251},{"_id":"public/2017/11/03/Vim-配置-Golang-开发/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220252},{"_id":"public/2017/05/16/CentOS-6-启用-HTTPS/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220252},{"_id":"public/2017/03/23/The-Laws-of-Reflection/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220252},{"_id":"public/2017/02/08/Golang-reflect-使用/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/12/29/2016/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/11/27/应试教育/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/11/05/未来边缘/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/10/26/Pale-Blue-Dot/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/10/18/how-to-deploy-hexo-with-travis/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/10/20/I-DO/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/2016/10/17/final-eva/index.html","hash":"c673e9ca69477f985a421682722fc91c5c72c986","modified":1594039220253},{"_id":"public/index.html","hash":"bafbd113ca2013f322ec1d6b9013cedbd4b480d4","modified":1590996290532},{"_id":"public/archives/index.html","hash":"75a3c062e2ac2124c5ab064b72f3360552d4e07e","modified":1590996290532},{"_id":"public/page/2/index.html","hash":"6351172d42f49f297e8bb8c80a1b3f5c59b41526","modified":1590996290532},{"_id":"public/archives/page/2/index.html","hash":"75a3c062e2ac2124c5ab064b72f3360552d4e07e","modified":1590996290532},{"_id":"public/archives/2016/index.html","hash":"1c33e537d7e7bb0387b052bd0c638eb46fa6ab28","modified":1590996290532},{"_id":"public/archives/2016/10/index.html","hash":"8f33a53f9fc9cead1b4ebe718e5d898c69681872","modified":1590996290532},{"_id":"public/archives/2016/11/index.html","hash":"179c47fbfcad984009b76b103f041d7b94bc8fd6","modified":1590996290532},{"_id":"public/archives/2016/12/index.html","hash":"dee3eaa30c5e8da4aa805f23371285606735cd13","modified":1590996290532},{"_id":"public/archives/2017/index.html","hash":"7d99bd03e60fa01127f6b9cb2d048c1b86b2cac7","modified":1590996290532},{"_id":"public/archives/2017/02/index.html","hash":"55028e857963defc91b097c6a8ec1a6e60bf484f","modified":1590996290532},{"_id":"public/archives/2017/03/index.html","hash":"64a215fdad9b3fa9fb73f4c9355667fe9b746454","modified":1590996290533},{"_id":"public/archives/2017/05/index.html","hash":"0dc700488f2b653a95d683232acff5f34e1af3f6","modified":1590996290533},{"_id":"public/archives/2017/11/index.html","hash":"02b82c465baf8d0b4e55825c631f41e5a424add3","modified":1590996290533},{"_id":"public/archives/2019/index.html","hash":"f4445bd3c8fe62d597133a2e145516888bbdcd44","modified":1590996290533},{"_id":"public/archives/2017/12/index.html","hash":"aede759ebb6dcd2535580af60bd6436017671ef7","modified":1590996290533},{"_id":"public/archives/2019/03/index.html","hash":"7584f1853fe1ff1f5cc5381cb6a2d7f96a2c4e85","modified":1590996290533},{"_id":"public/archives/2020/index.html","hash":"cf0c7712b1d06c0501a87d2fa705ab6d59392a8b","modified":1590996290533},{"_id":"public/archives/2020/03/index.html","hash":"bdc592b842e6f6c874ff9eaf2fb2ac8fa107aab6","modified":1590996290533},{"_id":"public/archives/2020/05/index.html","hash":"0f3f1c2dbb61aebf0bb9a4cb3d8f76eaec29787d","modified":1590996290533},{"_id":"public/tags/2016/index.html","hash":"627ff57735837221ed27325b50297e89cb539f8a","modified":1590996290533},{"_id":"public/tags/Alfred-Workflow/index.html","hash":"fc210aabbdfb7053109809cb5a94fb0c339f1543","modified":1590996290533},{"_id":"public/tags/HTTPS/index.html","hash":"4bb7c604195c19a8fda1e1cd37fb51377413b3b0","modified":1590996290533},{"_id":"public/tags/Letsencrypt/index.html","hash":"2e69936c647ada7e5cc1fcf55466fcdef2c3f390","modified":1590996290533},{"_id":"public/tags/Golang/index.html","hash":"1d4fc2c52bb341dd8659b85e9aa64e4d1d43393f","modified":1590996290533},{"_id":"public/tags/诗/index.html","hash":"dd9bc1b31ba37f3b24b98459e7ac5ac3e5c1e24b","modified":1590996290533},{"_id":"public/tags/词/index.html","hash":"fb2f6738d47160eaa1aba39bc4afff57c21d35d8","modified":1590996290533},{"_id":"public/tags/歌/index.html","hash":"669b6497947756ea0cd56415a6a99227ee1dfce3","modified":1590996290534},{"_id":"public/tags/赋/index.html","hash":"b794ac55709562acf9f0f66c5694066b56ed8367","modified":1590996290534},{"_id":"public/tags/Space/index.html","hash":"b1bc7f686909db0d199eac36379a2a68b6bad53d","modified":1590996290534},{"_id":"public/tags/vim/index.html","hash":"faaf3878f42fa5b55681964f85cb3ff6abf2880f","modified":1590996290534},{"_id":"public/tags/Hexo/index.html","hash":"8c73d00130c42f2b83b56d2352f86d619b7adcb9","modified":1590996290534},{"_id":"public/tags/SQLite3/index.html","hash":"21b5fd0cddf715f67da48f7b222b4d1f91875d68","modified":1590996290534},{"_id":"public/tags/Github-Actions/index.html","hash":"e2ee1257af12d10bbf1f5f1b2dce617956abd2ef","modified":1590996290534},{"_id":"public/tags/教育/index.html","hash":"1ab59f7807638972ab28315604da06ac21031fa1","modified":1590996290534},{"_id":"public/css/style.scss","hash":"163cde007c7fb3debf9f53594c72d6536242f688","modified":1594039220255},{"_id":"public/about/index.md","hash":"ef86f975f86e39c319e8617ad2e3712c4783c4f9","modified":1594039220255},{"_id":"public/friends/index.md","hash":"de7172c77747efa547bf1d8bf24d46a298e0e064","modified":1594039220256}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2017-02-05T16:00:00.000Z","layout":"page","comments":0,"_content":"\n### Skills\n\n* Golang\t\t==============================> 90%\n* Javascript\t==============> 40%\n* Css\t\t\t==================> 50%\n* Html \t\t\t==================> 50%\n* 算法 \t\t\t======================> 60%\n* 系统 \t\t\t======================> 60%\n* 数据库: mysql,mongo =======================> 60%\n* 网络\t\t\t=========================> 70%\n\n### Experience\n\n请联系我：momaek17#gmail.com\n","source":"about/index.md","raw":"title: About Me  \ndate: 2017-02-06\nlayout: page  \ncomments: false  \n---\n\n### Skills\n\n* Golang\t\t==============================> 90%\n* Javascript\t==============> 40%\n* Css\t\t\t==================> 50%\n* Html \t\t\t==================> 50%\n* 算法 \t\t\t======================> 60%\n* 系统 \t\t\t======================> 60%\n* 数据库: mysql,mongo =======================> 60%\n* 网络\t\t\t=========================> 70%\n\n### Experience\n\n请联系我：momaek17#gmail.com\n","updated":"2018-09-07T03:48:40.530Z","path":"about/index.html","_id":"ckatepn710000q0txu9aabf5c","content":"<h3 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills\"></a>Skills</h3><ul>\n<li>Golang        ==============================&gt; 90%</li>\n<li>Javascript    ==============&gt; 40%</li>\n<li>Css            ==================&gt; 50%</li>\n<li>Html             ==================&gt; 50%</li>\n<li>算法             ======================&gt; 60%</li>\n<li>系统             ======================&gt; 60%</li>\n<li>数据库: mysql,mongo =======================&gt; 60%</li>\n<li>网络            =========================&gt; 70%</li>\n</ul>\n<h3 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h3><p>请联系我：momaek17#gmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills\"></a>Skills</h3><ul>\n<li>Golang        ==============================&gt; 90%</li>\n<li>Javascript    ==============&gt; 40%</li>\n<li>Css            ==================&gt; 50%</li>\n<li>Html             ==================&gt; 50%</li>\n<li>算法             ======================&gt; 60%</li>\n<li>系统             ======================&gt; 60%</li>\n<li>数据库: mysql,mongo =======================&gt; 60%</li>\n<li>网络            =========================&gt; 70%</li>\n</ul>\n<h3 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h3><p>请联系我：momaek17#gmail.com</p>\n"},{"title":"朋友们","date":"2016-10-15T16:00:00.000Z","layout":"page","comments":0,"_content":"\n- [nighca's log](https://nighca.me/) 七牛的前端大神\n- [sitin's blog](http://ipengtao.com/) 随便啦，无所谓\n- [七牛小司机](http://littledriver.net/) 人称七牛小司机你们懂的\n","source":"friends/index.md","raw":"title: 朋友们\ndate: 2016-10-16\nlayout: page\ncomments: false\n---\n\n- [nighca's log](https://nighca.me/) 七牛的前端大神\n- [sitin's blog](http://ipengtao.com/) 随便啦，无所谓\n- [七牛小司机](http://littledriver.net/) 人称七牛小司机你们懂的\n","updated":"2017-11-03T14:04:48.000Z","path":"friends/index.html","_id":"ckatepn780002q0tx3ug4og2a","content":"<ul>\n<li><a href=\"https://nighca.me/\" target=\"_blank\" rel=\"noopener\">nighca’s log</a> 七牛的前端大神</li>\n<li><a href=\"http://ipengtao.com/\" target=\"_blank\" rel=\"noopener\">sitin’s blog</a> 随便啦，无所谓</li>\n<li><a href=\"http://littledriver.net/\" target=\"_blank\" rel=\"noopener\">七牛小司机</a> 人称七牛小司机你们懂的</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://nighca.me/\" target=\"_blank\" rel=\"noopener\">nighca’s log</a> 七牛的前端大神</li>\n<li><a href=\"http://ipengtao.com/\" target=\"_blank\" rel=\"noopener\">sitin’s blog</a> 随便啦，无所谓</li>\n<li><a href=\"http://littledriver.net/\" target=\"_blank\" rel=\"noopener\">七牛小司机</a> 人称七牛小司机你们懂的</li>\n</ul>\n"}],"Post":[{"title":"2016","date":"2016-12-29T09:23:15.000Z","photos":["https://oa7ktymto.qnssl.com/2016.png"],"_content":"\ntime up\n图片来自 [G+](https://plus.google.com/photos/photo/115855732814015840371/6349117716956975586?icm=false)\n\n<!--more-->\n\n### 0x0001 第一段\n\n公元2016年为闰年，共366天。第一天是星期五。\n2016年是农历丙申年(猴年)。\n不过，已经结束了。各位开心就好\n既然过了一年，还是得留下些思考和展望，否则就有些太无趣了。\n\n### 0x0010 第二段\n\n2016 发生了哪些事情呢？我自己关注的\n\n+ 引力波的发现。具体有什么用呢，首先我们要知道引力波是怎么产生的，**黑洞合并**，**超新星爆炸**，**中子星—中子星/黑洞碰撞**，**宇宙大爆炸早期，暴涨过程** 等。然而我还是不知道可以用来干嘛，我想说的是：真的想再活500年，看看引力波到底能干嘛\n\n+ ALPHA狗完胜李世石。 AplhaGo 是什么呢？ Google DeepMind开发的人工智能围棋程序。这个标志着什么呢？愚蠢的人类\n\n+ 科比退役了，然后TM来给饿了么代言了。FO\n\n+ 英国脱欧，首相表示不玩儿了！上不了诺亚方舟的人，正试图摧毁整条船\n\n+ 里约奥运，奥运村会时不时遇到各种奇怪的人，拿着奇怪的东西指着你，然后让你给钱。住的地方貌似还漏水，还各种诋毁我大天朝。干的漂亮\n\n+ 宝强离婚。 宝宝不哭，站起来LU。\n\n+ 美国大选。 川普大叔绝对的一个性别+人种歧视主义者，因为他跟一个女人抢一个职位，而且在不久的将来要把一个黑人敢下台。不过 加州人民想要独立了\n\n+ 小李子终于拿小金人了。 可怜了小李子，被熊虐哭了\n\n+ 卡斯特罗去世。 这个世界上唯一一个还相信共产主义的人类已经不存在了\n\n+ 朴大妈被“邪教”控制，她的“好基友”干涉政务，然后下台了。棒子国的总统都没有一个好下场啊，可怕了\n\n+ 沙佩科恩斯空难，亚历山罗夫红旗歌舞团空难。 唉，看来以后坐飞机的时候需要多买几份保险了\n\n### 0x0011 第三段 \n\n还是造轮子好玩。\n\n##### Work\n\n来我牛也两年，从当年的一个愣头小子变成了现在的团队主力，现在对后端的东西和保证代码的质量有一定的感觉了，不再是那个只考虑当前如何实现，只会堆代码的copy小子了。现在知道了如何去封装，如何优雅的命名，如何保证自己写的代码质量，如何写单元测试...\n跳出了一个温床，然后入了另外一个坑...\n上图：\n![](https://oa7ktymto.qnssl.com/work_2016.png)\n如果想看的话在这里：[Github](https://github.com/momaek)。这个里面有这个网站的所有数据。如果你也想拥有的话，知会我一下，你就可以拿走了。\n\n今年读的书着实少的可怜。<基督山伯爵>，<裸猿三部曲>，<解忧杂货店>，<人类动物园>...\n要不在这招个人？ 有兴趣来我牛的(前端，后端)，简历给我 momaek17#gmail.com or wenxiangyuan#qiniu.com\n\n##### Life\n\n年初的时候跟着团队去了三亚玩了一圈，然后后面就哪儿都木有去了。国庆节回家了，本来打算过年去日本玩，但是过年我哥结婚，所以就不去啦。不过明年是准备去很多地方玩了。\n\n吃了一年的全家、罗森，现在整个人看到全家、罗森的便当就一点不开心。想自己做饭的，但是想到我这种懒人起床就9点的了还要做饭，上午还用不用干活了。不过现在貌似上午也没干啥活哦，到公司就10点半了(千万不能被老板看到)。明年还是想自己做饭，我要买5个饭盒，为什么是5个呢？你作为人类都知道每天换衣服，我给我做饭换每天换衣服我怎么了。其实是一周可以不用洗饭盒（逃）\n\n家里父母身体都还不错，今年没有什么大的毛病，很 lucky\n\n##### L\n\n最最最重要的事情来了。\n![](https://oa7ktymto.qnssl.com/l_2016.png)\n\n很幸运遇到这个可爱的妹子。\n在有生的瞬间能遇到你\n竟花光所有运气\n\n### 0x0100 第四段\n\n明年的打算：\n\n+ 继续来一点 sexy \n+ 读书\n+ 走路\n+ 跑+游+卷+深+俯\n+ E文？\n+ 出去玩喽\n+ 培养___自信\n+ 写一点技术类的文章吧\n+ 努力赚钱，去海边开家旅店，然后每天就坐沙滩上看大长腿\n\n### 0x0101 第五段\n\n这篇是扯蛋，后面写一篇与工作相关的\n\n写在最后的话：\nDon't give up on your dreams, keep sleeping","source":"_posts/2016.md","raw":"---\ntitle: 2016\ndate: 2016-12-29 17:23:15\ntags: \n\t- 2016\nphotos: \n\t- https://oa7ktymto.qnssl.com/2016.png\n---\n\ntime up\n图片来自 [G+](https://plus.google.com/photos/photo/115855732814015840371/6349117716956975586?icm=false)\n\n<!--more-->\n\n### 0x0001 第一段\n\n公元2016年为闰年，共366天。第一天是星期五。\n2016年是农历丙申年(猴年)。\n不过，已经结束了。各位开心就好\n既然过了一年，还是得留下些思考和展望，否则就有些太无趣了。\n\n### 0x0010 第二段\n\n2016 发生了哪些事情呢？我自己关注的\n\n+ 引力波的发现。具体有什么用呢，首先我们要知道引力波是怎么产生的，**黑洞合并**，**超新星爆炸**，**中子星—中子星/黑洞碰撞**，**宇宙大爆炸早期，暴涨过程** 等。然而我还是不知道可以用来干嘛，我想说的是：真的想再活500年，看看引力波到底能干嘛\n\n+ ALPHA狗完胜李世石。 AplhaGo 是什么呢？ Google DeepMind开发的人工智能围棋程序。这个标志着什么呢？愚蠢的人类\n\n+ 科比退役了，然后TM来给饿了么代言了。FO\n\n+ 英国脱欧，首相表示不玩儿了！上不了诺亚方舟的人，正试图摧毁整条船\n\n+ 里约奥运，奥运村会时不时遇到各种奇怪的人，拿着奇怪的东西指着你，然后让你给钱。住的地方貌似还漏水，还各种诋毁我大天朝。干的漂亮\n\n+ 宝强离婚。 宝宝不哭，站起来LU。\n\n+ 美国大选。 川普大叔绝对的一个性别+人种歧视主义者，因为他跟一个女人抢一个职位，而且在不久的将来要把一个黑人敢下台。不过 加州人民想要独立了\n\n+ 小李子终于拿小金人了。 可怜了小李子，被熊虐哭了\n\n+ 卡斯特罗去世。 这个世界上唯一一个还相信共产主义的人类已经不存在了\n\n+ 朴大妈被“邪教”控制，她的“好基友”干涉政务，然后下台了。棒子国的总统都没有一个好下场啊，可怕了\n\n+ 沙佩科恩斯空难，亚历山罗夫红旗歌舞团空难。 唉，看来以后坐飞机的时候需要多买几份保险了\n\n### 0x0011 第三段 \n\n还是造轮子好玩。\n\n##### Work\n\n来我牛也两年，从当年的一个愣头小子变成了现在的团队主力，现在对后端的东西和保证代码的质量有一定的感觉了，不再是那个只考虑当前如何实现，只会堆代码的copy小子了。现在知道了如何去封装，如何优雅的命名，如何保证自己写的代码质量，如何写单元测试...\n跳出了一个温床，然后入了另外一个坑...\n上图：\n![](https://oa7ktymto.qnssl.com/work_2016.png)\n如果想看的话在这里：[Github](https://github.com/momaek)。这个里面有这个网站的所有数据。如果你也想拥有的话，知会我一下，你就可以拿走了。\n\n今年读的书着实少的可怜。<基督山伯爵>，<裸猿三部曲>，<解忧杂货店>，<人类动物园>...\n要不在这招个人？ 有兴趣来我牛的(前端，后端)，简历给我 momaek17#gmail.com or wenxiangyuan#qiniu.com\n\n##### Life\n\n年初的时候跟着团队去了三亚玩了一圈，然后后面就哪儿都木有去了。国庆节回家了，本来打算过年去日本玩，但是过年我哥结婚，所以就不去啦。不过明年是准备去很多地方玩了。\n\n吃了一年的全家、罗森，现在整个人看到全家、罗森的便当就一点不开心。想自己做饭的，但是想到我这种懒人起床就9点的了还要做饭，上午还用不用干活了。不过现在貌似上午也没干啥活哦，到公司就10点半了(千万不能被老板看到)。明年还是想自己做饭，我要买5个饭盒，为什么是5个呢？你作为人类都知道每天换衣服，我给我做饭换每天换衣服我怎么了。其实是一周可以不用洗饭盒（逃）\n\n家里父母身体都还不错，今年没有什么大的毛病，很 lucky\n\n##### L\n\n最最最重要的事情来了。\n![](https://oa7ktymto.qnssl.com/l_2016.png)\n\n很幸运遇到这个可爱的妹子。\n在有生的瞬间能遇到你\n竟花光所有运气\n\n### 0x0100 第四段\n\n明年的打算：\n\n+ 继续来一点 sexy \n+ 读书\n+ 走路\n+ 跑+游+卷+深+俯\n+ E文？\n+ 出去玩喽\n+ 培养___自信\n+ 写一点技术类的文章吧\n+ 努力赚钱，去海边开家旅店，然后每天就坐沙滩上看大长腿\n\n### 0x0101 第五段\n\n这篇是扯蛋，后面写一篇与工作相关的\n\n写在最后的话：\nDon't give up on your dreams, keep sleeping","slug":"2016","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn730001q0txy358sdid","content":"<p>time up<br>图片来自 <a href=\"https://plus.google.com/photos/photo/115855732814015840371/6349117716956975586?icm=false\" target=\"_blank\" rel=\"noopener\">G+</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"0x0001-第一段\"><a href=\"#0x0001-第一段\" class=\"headerlink\" title=\"0x0001 第一段\"></a>0x0001 第一段</h3><p>公元2016年为闰年，共366天。第一天是星期五。<br>2016年是农历丙申年(猴年)。<br>不过，已经结束了。各位开心就好<br>既然过了一年，还是得留下些思考和展望，否则就有些太无趣了。</p>\n<h3 id=\"0x0010-第二段\"><a href=\"#0x0010-第二段\" class=\"headerlink\" title=\"0x0010 第二段\"></a>0x0010 第二段</h3><p>2016 发生了哪些事情呢？我自己关注的</p>\n<ul>\n<li><p>引力波的发现。具体有什么用呢，首先我们要知道引力波是怎么产生的，<strong>黑洞合并</strong>，<strong>超新星爆炸</strong>，<strong>中子星—中子星/黑洞碰撞</strong>，<strong>宇宙大爆炸早期，暴涨过程</strong> 等。然而我还是不知道可以用来干嘛，我想说的是：真的想再活500年，看看引力波到底能干嘛</p>\n</li>\n<li><p>ALPHA狗完胜李世石。 AplhaGo 是什么呢？ Google DeepMind开发的人工智能围棋程序。这个标志着什么呢？愚蠢的人类</p>\n</li>\n<li><p>科比退役了，然后TM来给饿了么代言了。FO</p>\n</li>\n<li><p>英国脱欧，首相表示不玩儿了！上不了诺亚方舟的人，正试图摧毁整条船</p>\n</li>\n<li><p>里约奥运，奥运村会时不时遇到各种奇怪的人，拿着奇怪的东西指着你，然后让你给钱。住的地方貌似还漏水，还各种诋毁我大天朝。干的漂亮</p>\n</li>\n<li><p>宝强离婚。 宝宝不哭，站起来LU。</p>\n</li>\n<li><p>美国大选。 川普大叔绝对的一个性别+人种歧视主义者，因为他跟一个女人抢一个职位，而且在不久的将来要把一个黑人敢下台。不过 加州人民想要独立了</p>\n</li>\n<li><p>小李子终于拿小金人了。 可怜了小李子，被熊虐哭了</p>\n</li>\n<li><p>卡斯特罗去世。 这个世界上唯一一个还相信共产主义的人类已经不存在了</p>\n</li>\n<li><p>朴大妈被“邪教”控制，她的“好基友”干涉政务，然后下台了。棒子国的总统都没有一个好下场啊，可怕了</p>\n</li>\n<li><p>沙佩科恩斯空难，亚历山罗夫红旗歌舞团空难。 唉，看来以后坐飞机的时候需要多买几份保险了</p>\n</li>\n</ul>\n<h3 id=\"0x0011-第三段\"><a href=\"#0x0011-第三段\" class=\"headerlink\" title=\"0x0011 第三段\"></a>0x0011 第三段</h3><p>还是造轮子好玩。</p>\n<h5 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h5><p>来我牛也两年，从当年的一个愣头小子变成了现在的团队主力，现在对后端的东西和保证代码的质量有一定的感觉了，不再是那个只考虑当前如何实现，只会堆代码的copy小子了。现在知道了如何去封装，如何优雅的命名，如何保证自己写的代码质量，如何写单元测试…<br>跳出了一个温床，然后入了另外一个坑…<br>上图：<br><img src=\"https://oa7ktymto.qnssl.com/work_2016.png\" alt=\"\"><br>如果想看的话在这里：<a href=\"https://github.com/momaek\" target=\"_blank\" rel=\"noopener\">Github</a>。这个里面有这个网站的所有数据。如果你也想拥有的话，知会我一下，你就可以拿走了。</p>\n<p>今年读的书着实少的可怜。&lt;基督山伯爵&gt;，&lt;裸猿三部曲&gt;，&lt;解忧杂货店&gt;，&lt;人类动物园&gt;…<br>要不在这招个人？ 有兴趣来我牛的(前端，后端)，简历给我 momaek17#gmail.com or wenxiangyuan#qiniu.com</p>\n<h5 id=\"Life\"><a href=\"#Life\" class=\"headerlink\" title=\"Life\"></a>Life</h5><p>年初的时候跟着团队去了三亚玩了一圈，然后后面就哪儿都木有去了。国庆节回家了，本来打算过年去日本玩，但是过年我哥结婚，所以就不去啦。不过明年是准备去很多地方玩了。</p>\n<p>吃了一年的全家、罗森，现在整个人看到全家、罗森的便当就一点不开心。想自己做饭的，但是想到我这种懒人起床就9点的了还要做饭，上午还用不用干活了。不过现在貌似上午也没干啥活哦，到公司就10点半了(千万不能被老板看到)。明年还是想自己做饭，我要买5个饭盒，为什么是5个呢？你作为人类都知道每天换衣服，我给我做饭换每天换衣服我怎么了。其实是一周可以不用洗饭盒（逃）</p>\n<p>家里父母身体都还不错，今年没有什么大的毛病，很 lucky</p>\n<h5 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h5><p>最最最重要的事情来了。<br><img src=\"https://oa7ktymto.qnssl.com/l_2016.png\" alt=\"\"></p>\n<p>很幸运遇到这个可爱的妹子。<br>在有生的瞬间能遇到你<br>竟花光所有运气</p>\n<h3 id=\"0x0100-第四段\"><a href=\"#0x0100-第四段\" class=\"headerlink\" title=\"0x0100 第四段\"></a>0x0100 第四段</h3><p>明年的打算：</p>\n<ul>\n<li>继续来一点 sexy </li>\n<li>读书</li>\n<li>走路</li>\n<li>跑+游+卷+深+俯</li>\n<li>E文？</li>\n<li>出去玩喽</li>\n<li>培养___自信</li>\n<li>写一点技术类的文章吧</li>\n<li>努力赚钱，去海边开家旅店，然后每天就坐沙滩上看大长腿</li>\n</ul>\n<h3 id=\"0x0101-第五段\"><a href=\"#0x0101-第五段\" class=\"headerlink\" title=\"0x0101 第五段\"></a>0x0101 第五段</h3><p>这篇是扯蛋，后面写一篇与工作相关的</p>\n<p>写在最后的话：<br>Don’t give up on your dreams, keep sleeping</p>\n","site":{"data":{}},"excerpt":"<p>time up<br>图片来自 <a href=\"https://plus.google.com/photos/photo/115855732814015840371/6349117716956975586?icm=false\" target=\"_blank\" rel=\"noopener\">G+</a></p>","more":"<h3 id=\"0x0001-第一段\"><a href=\"#0x0001-第一段\" class=\"headerlink\" title=\"0x0001 第一段\"></a>0x0001 第一段</h3><p>公元2016年为闰年，共366天。第一天是星期五。<br>2016年是农历丙申年(猴年)。<br>不过，已经结束了。各位开心就好<br>既然过了一年，还是得留下些思考和展望，否则就有些太无趣了。</p>\n<h3 id=\"0x0010-第二段\"><a href=\"#0x0010-第二段\" class=\"headerlink\" title=\"0x0010 第二段\"></a>0x0010 第二段</h3><p>2016 发生了哪些事情呢？我自己关注的</p>\n<ul>\n<li><p>引力波的发现。具体有什么用呢，首先我们要知道引力波是怎么产生的，<strong>黑洞合并</strong>，<strong>超新星爆炸</strong>，<strong>中子星—中子星/黑洞碰撞</strong>，<strong>宇宙大爆炸早期，暴涨过程</strong> 等。然而我还是不知道可以用来干嘛，我想说的是：真的想再活500年，看看引力波到底能干嘛</p>\n</li>\n<li><p>ALPHA狗完胜李世石。 AplhaGo 是什么呢？ Google DeepMind开发的人工智能围棋程序。这个标志着什么呢？愚蠢的人类</p>\n</li>\n<li><p>科比退役了，然后TM来给饿了么代言了。FO</p>\n</li>\n<li><p>英国脱欧，首相表示不玩儿了！上不了诺亚方舟的人，正试图摧毁整条船</p>\n</li>\n<li><p>里约奥运，奥运村会时不时遇到各种奇怪的人，拿着奇怪的东西指着你，然后让你给钱。住的地方貌似还漏水，还各种诋毁我大天朝。干的漂亮</p>\n</li>\n<li><p>宝强离婚。 宝宝不哭，站起来LU。</p>\n</li>\n<li><p>美国大选。 川普大叔绝对的一个性别+人种歧视主义者，因为他跟一个女人抢一个职位，而且在不久的将来要把一个黑人敢下台。不过 加州人民想要独立了</p>\n</li>\n<li><p>小李子终于拿小金人了。 可怜了小李子，被熊虐哭了</p>\n</li>\n<li><p>卡斯特罗去世。 这个世界上唯一一个还相信共产主义的人类已经不存在了</p>\n</li>\n<li><p>朴大妈被“邪教”控制，她的“好基友”干涉政务，然后下台了。棒子国的总统都没有一个好下场啊，可怕了</p>\n</li>\n<li><p>沙佩科恩斯空难，亚历山罗夫红旗歌舞团空难。 唉，看来以后坐飞机的时候需要多买几份保险了</p>\n</li>\n</ul>\n<h3 id=\"0x0011-第三段\"><a href=\"#0x0011-第三段\" class=\"headerlink\" title=\"0x0011 第三段\"></a>0x0011 第三段</h3><p>还是造轮子好玩。</p>\n<h5 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h5><p>来我牛也两年，从当年的一个愣头小子变成了现在的团队主力，现在对后端的东西和保证代码的质量有一定的感觉了，不再是那个只考虑当前如何实现，只会堆代码的copy小子了。现在知道了如何去封装，如何优雅的命名，如何保证自己写的代码质量，如何写单元测试…<br>跳出了一个温床，然后入了另外一个坑…<br>上图：<br><img src=\"https://oa7ktymto.qnssl.com/work_2016.png\" alt=\"\"><br>如果想看的话在这里：<a href=\"https://github.com/momaek\" target=\"_blank\" rel=\"noopener\">Github</a>。这个里面有这个网站的所有数据。如果你也想拥有的话，知会我一下，你就可以拿走了。</p>\n<p>今年读的书着实少的可怜。&lt;基督山伯爵&gt;，&lt;裸猿三部曲&gt;，&lt;解忧杂货店&gt;，&lt;人类动物园&gt;…<br>要不在这招个人？ 有兴趣来我牛的(前端，后端)，简历给我 momaek17#gmail.com or wenxiangyuan#qiniu.com</p>\n<h5 id=\"Life\"><a href=\"#Life\" class=\"headerlink\" title=\"Life\"></a>Life</h5><p>年初的时候跟着团队去了三亚玩了一圈，然后后面就哪儿都木有去了。国庆节回家了，本来打算过年去日本玩，但是过年我哥结婚，所以就不去啦。不过明年是准备去很多地方玩了。</p>\n<p>吃了一年的全家、罗森，现在整个人看到全家、罗森的便当就一点不开心。想自己做饭的，但是想到我这种懒人起床就9点的了还要做饭，上午还用不用干活了。不过现在貌似上午也没干啥活哦，到公司就10点半了(千万不能被老板看到)。明年还是想自己做饭，我要买5个饭盒，为什么是5个呢？你作为人类都知道每天换衣服，我给我做饭换每天换衣服我怎么了。其实是一周可以不用洗饭盒（逃）</p>\n<p>家里父母身体都还不错，今年没有什么大的毛病，很 lucky</p>\n<h5 id=\"L\"><a href=\"#L\" class=\"headerlink\" title=\"L\"></a>L</h5><p>最最最重要的事情来了。<br><img src=\"https://oa7ktymto.qnssl.com/l_2016.png\" alt=\"\"></p>\n<p>很幸运遇到这个可爱的妹子。<br>在有生的瞬间能遇到你<br>竟花光所有运气</p>\n<h3 id=\"0x0100-第四段\"><a href=\"#0x0100-第四段\" class=\"headerlink\" title=\"0x0100 第四段\"></a>0x0100 第四段</h3><p>明年的打算：</p>\n<ul>\n<li>继续来一点 sexy </li>\n<li>读书</li>\n<li>走路</li>\n<li>跑+游+卷+深+俯</li>\n<li>E文？</li>\n<li>出去玩喽</li>\n<li>培养___自信</li>\n<li>写一点技术类的文章吧</li>\n<li>努力赚钱，去海边开家旅店，然后每天就坐沙滩上看大长腿</li>\n</ul>\n<h3 id=\"0x0101-第五段\"><a href=\"#0x0101-第五段\" class=\"headerlink\" title=\"0x0101 第五段\"></a>0x0101 第五段</h3><p>这篇是扯蛋，后面写一篇与工作相关的</p>\n<p>写在最后的话：<br>Don’t give up on your dreams, keep sleeping</p>"},{"title":"Alfred Workflow 推荐","date":"2019-03-23T09:46:24.000Z","photos":["https://oa7ktymto.qnssl.com/alfred.png"],"_content":"\n## CodeVar\n>生成变量名，支持 小驼峰命名法:xt，大驼峰命名法:dt，下划线命名法:xh，常量命名法:cl\n\n[下载地址](https://github.com/xudaolong/CodeVar/blob/master/CodeVar.alfredworkflow?raw=true)\n项目地址：[xudaolong/CodeVar](https://github.com/xudaolong/CodeVar)\n\n![](https://oa7ktymto.qnssl.com/codevar.png)\n\n## Encode/Decode \n>编码解码工具\n\n[下载地址](https://raw.github.com/willfarrell/alfred-encode-decode-workflow/master/encode-decode.alfredworkflow)\n项目地址：[willfarrell/alfred-encode-decode-workflow](https://github.com/willfarrell/alfred-encode-decode-workflow)\n\n![](https://oa7ktymto.qnssl.com/ed.png)\n\n## Effective IP\n>查询本机和外网IP地址，解析任意URL和域名的IP地址，同时进行归属地和运营商查询\n\n[下载地址](https://raw.githubusercontent.com/stidio/Alfred-Workflow/master/Effective%20IP.alfredworkflow)\n项目地址：[stidio/Alfred-Workflow](https://github.com/stidio/Alfred-Workflow)\n\n![](https://oa7ktymto.qnssl.com/eip.png)\n\n## Password Generator\n>生成密码\n\n[下载地址](https://github.com/deanishe/alfred-pwgen/blob/master/Password-Generator-2.1.2.alfredworkflow?raw=true)\n项目地址：[deanishe/alfred-pwgen](https://github.com/deanishe/alfred-pwgen)\n\n![](https://github.com/deanishe/alfred-pwgen/raw/master/demo.gif)\n\n## stackoverflow\n> 面向 stackoverflow 编程必备\n\n[下载地址](https://github.com/Que3216/alfred-stack-overflow/blob/master/StackOverflow.alfredworkflow?raw=true)\n项目地址：[Que3216/alfred-stack-overflow](https://github.com/Que3216/alfred-stack-overflow)\n\n![](https://github.com/Que3216/alfred-stack-overflow/raw/master/demo.gif?raw=true)\n\n## Porn video search\n> 绅士专用\n\n[下载地址](https://github.com/githubactions/pornsearch.alfredworkflow/blob/master/Porn%20video%20search.alfredworkflow?raw=true)\n项目地址：[githubactions/pornsearch.alfredworkflow](https://github.com/githubactions/pornsearch.alfredworkflow)\n\n![](https://github.com/githubactions/pornsearch.alfredworkflow/raw/master/example.png)","source":"_posts/Alfred-Workflow-推荐.md","raw":"---\ntitle: Alfred Workflow 推荐\ndate: 2019-03-23 17:46:24\ntags:\n    - Alfred Workflow\nphotos:\n    - https://oa7ktymto.qnssl.com/alfred.png\n---\n\n## CodeVar\n>生成变量名，支持 小驼峰命名法:xt，大驼峰命名法:dt，下划线命名法:xh，常量命名法:cl\n\n[下载地址](https://github.com/xudaolong/CodeVar/blob/master/CodeVar.alfredworkflow?raw=true)\n项目地址：[xudaolong/CodeVar](https://github.com/xudaolong/CodeVar)\n\n![](https://oa7ktymto.qnssl.com/codevar.png)\n\n## Encode/Decode \n>编码解码工具\n\n[下载地址](https://raw.github.com/willfarrell/alfred-encode-decode-workflow/master/encode-decode.alfredworkflow)\n项目地址：[willfarrell/alfred-encode-decode-workflow](https://github.com/willfarrell/alfred-encode-decode-workflow)\n\n![](https://oa7ktymto.qnssl.com/ed.png)\n\n## Effective IP\n>查询本机和外网IP地址，解析任意URL和域名的IP地址，同时进行归属地和运营商查询\n\n[下载地址](https://raw.githubusercontent.com/stidio/Alfred-Workflow/master/Effective%20IP.alfredworkflow)\n项目地址：[stidio/Alfred-Workflow](https://github.com/stidio/Alfred-Workflow)\n\n![](https://oa7ktymto.qnssl.com/eip.png)\n\n## Password Generator\n>生成密码\n\n[下载地址](https://github.com/deanishe/alfred-pwgen/blob/master/Password-Generator-2.1.2.alfredworkflow?raw=true)\n项目地址：[deanishe/alfred-pwgen](https://github.com/deanishe/alfred-pwgen)\n\n![](https://github.com/deanishe/alfred-pwgen/raw/master/demo.gif)\n\n## stackoverflow\n> 面向 stackoverflow 编程必备\n\n[下载地址](https://github.com/Que3216/alfred-stack-overflow/blob/master/StackOverflow.alfredworkflow?raw=true)\n项目地址：[Que3216/alfred-stack-overflow](https://github.com/Que3216/alfred-stack-overflow)\n\n![](https://github.com/Que3216/alfred-stack-overflow/raw/master/demo.gif?raw=true)\n\n## Porn video search\n> 绅士专用\n\n[下载地址](https://github.com/githubactions/pornsearch.alfredworkflow/blob/master/Porn%20video%20search.alfredworkflow?raw=true)\n项目地址：[githubactions/pornsearch.alfredworkflow](https://github.com/githubactions/pornsearch.alfredworkflow)\n\n![](https://github.com/githubactions/pornsearch.alfredworkflow/raw/master/example.png)","slug":"Alfred-Workflow-推荐","published":1,"updated":"2019-03-27T11:32:52.015Z","comments":1,"layout":"post","link":"","_id":"ckatepn790003q0txu4cnnb69","content":"<h2 id=\"CodeVar\"><a href=\"#CodeVar\" class=\"headerlink\" title=\"CodeVar\"></a>CodeVar</h2><blockquote>\n<p>生成变量名，支持 小驼峰命名法:xt，大驼峰命名法:dt，下划线命名法:xh，常量命名法:cl</p>\n</blockquote>\n<p><a href=\"https://github.com/xudaolong/CodeVar/blob/master/CodeVar.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/xudaolong/CodeVar\" target=\"_blank\" rel=\"noopener\">xudaolong/CodeVar</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/codevar.png\" alt=\"\"></p>\n<h2 id=\"Encode-Decode\"><a href=\"#Encode-Decode\" class=\"headerlink\" title=\"Encode/Decode\"></a>Encode/Decode</h2><blockquote>\n<p>编码解码工具</p>\n</blockquote>\n<p><a href=\"https://raw.github.com/willfarrell/alfred-encode-decode-workflow/master/encode-decode.alfredworkflow\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/willfarrell/alfred-encode-decode-workflow\" target=\"_blank\" rel=\"noopener\">willfarrell/alfred-encode-decode-workflow</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/ed.png\" alt=\"\"></p>\n<h2 id=\"Effective-IP\"><a href=\"#Effective-IP\" class=\"headerlink\" title=\"Effective IP\"></a>Effective IP</h2><blockquote>\n<p>查询本机和外网IP地址，解析任意URL和域名的IP地址，同时进行归属地和运营商查询</p>\n</blockquote>\n<p><a href=\"https://raw.githubusercontent.com/stidio/Alfred-Workflow/master/Effective%20IP.alfredworkflow\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/stidio/Alfred-Workflow\" target=\"_blank\" rel=\"noopener\">stidio/Alfred-Workflow</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/eip.png\" alt=\"\"></p>\n<h2 id=\"Password-Generator\"><a href=\"#Password-Generator\" class=\"headerlink\" title=\"Password Generator\"></a>Password Generator</h2><blockquote>\n<p>生成密码</p>\n</blockquote>\n<p><a href=\"https://github.com/deanishe/alfred-pwgen/blob/master/Password-Generator-2.1.2.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/deanishe/alfred-pwgen\" target=\"_blank\" rel=\"noopener\">deanishe/alfred-pwgen</a></p>\n<p><img src=\"https://github.com/deanishe/alfred-pwgen/raw/master/demo.gif\" alt=\"\"></p>\n<h2 id=\"stackoverflow\"><a href=\"#stackoverflow\" class=\"headerlink\" title=\"stackoverflow\"></a>stackoverflow</h2><blockquote>\n<p>面向 stackoverflow 编程必备</p>\n</blockquote>\n<p><a href=\"https://github.com/Que3216/alfred-stack-overflow/blob/master/StackOverflow.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/Que3216/alfred-stack-overflow\" target=\"_blank\" rel=\"noopener\">Que3216/alfred-stack-overflow</a></p>\n<p><img src=\"https://github.com/Que3216/alfred-stack-overflow/raw/master/demo.gif?raw=true\" alt=\"\"></p>\n<h2 id=\"Porn-video-search\"><a href=\"#Porn-video-search\" class=\"headerlink\" title=\"Porn video search\"></a>Porn video search</h2><blockquote>\n<p>绅士专用</p>\n</blockquote>\n<p><a href=\"https://github.com/githubactions/pornsearch.alfredworkflow/blob/master/Porn%20video%20search.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/githubactions/pornsearch.alfredworkflow\" target=\"_blank\" rel=\"noopener\">githubactions/pornsearch.alfredworkflow</a></p>\n<p><img src=\"https://github.com/githubactions/pornsearch.alfredworkflow/raw/master/example.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CodeVar\"><a href=\"#CodeVar\" class=\"headerlink\" title=\"CodeVar\"></a>CodeVar</h2><blockquote>\n<p>生成变量名，支持 小驼峰命名法:xt，大驼峰命名法:dt，下划线命名法:xh，常量命名法:cl</p>\n</blockquote>\n<p><a href=\"https://github.com/xudaolong/CodeVar/blob/master/CodeVar.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/xudaolong/CodeVar\" target=\"_blank\" rel=\"noopener\">xudaolong/CodeVar</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/codevar.png\" alt=\"\"></p>\n<h2 id=\"Encode-Decode\"><a href=\"#Encode-Decode\" class=\"headerlink\" title=\"Encode/Decode\"></a>Encode/Decode</h2><blockquote>\n<p>编码解码工具</p>\n</blockquote>\n<p><a href=\"https://raw.github.com/willfarrell/alfred-encode-decode-workflow/master/encode-decode.alfredworkflow\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/willfarrell/alfred-encode-decode-workflow\" target=\"_blank\" rel=\"noopener\">willfarrell/alfred-encode-decode-workflow</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/ed.png\" alt=\"\"></p>\n<h2 id=\"Effective-IP\"><a href=\"#Effective-IP\" class=\"headerlink\" title=\"Effective IP\"></a>Effective IP</h2><blockquote>\n<p>查询本机和外网IP地址，解析任意URL和域名的IP地址，同时进行归属地和运营商查询</p>\n</blockquote>\n<p><a href=\"https://raw.githubusercontent.com/stidio/Alfred-Workflow/master/Effective%20IP.alfredworkflow\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/stidio/Alfred-Workflow\" target=\"_blank\" rel=\"noopener\">stidio/Alfred-Workflow</a></p>\n<p><img src=\"https://oa7ktymto.qnssl.com/eip.png\" alt=\"\"></p>\n<h2 id=\"Password-Generator\"><a href=\"#Password-Generator\" class=\"headerlink\" title=\"Password Generator\"></a>Password Generator</h2><blockquote>\n<p>生成密码</p>\n</blockquote>\n<p><a href=\"https://github.com/deanishe/alfred-pwgen/blob/master/Password-Generator-2.1.2.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/deanishe/alfred-pwgen\" target=\"_blank\" rel=\"noopener\">deanishe/alfred-pwgen</a></p>\n<p><img src=\"https://github.com/deanishe/alfred-pwgen/raw/master/demo.gif\" alt=\"\"></p>\n<h2 id=\"stackoverflow\"><a href=\"#stackoverflow\" class=\"headerlink\" title=\"stackoverflow\"></a>stackoverflow</h2><blockquote>\n<p>面向 stackoverflow 编程必备</p>\n</blockquote>\n<p><a href=\"https://github.com/Que3216/alfred-stack-overflow/blob/master/StackOverflow.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/Que3216/alfred-stack-overflow\" target=\"_blank\" rel=\"noopener\">Que3216/alfred-stack-overflow</a></p>\n<p><img src=\"https://github.com/Que3216/alfred-stack-overflow/raw/master/demo.gif?raw=true\" alt=\"\"></p>\n<h2 id=\"Porn-video-search\"><a href=\"#Porn-video-search\" class=\"headerlink\" title=\"Porn video search\"></a>Porn video search</h2><blockquote>\n<p>绅士专用</p>\n</blockquote>\n<p><a href=\"https://github.com/githubactions/pornsearch.alfredworkflow/blob/master/Porn%20video%20search.alfredworkflow?raw=true\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>项目地址：<a href=\"https://github.com/githubactions/pornsearch.alfredworkflow\" target=\"_blank\" rel=\"noopener\">githubactions/pornsearch.alfredworkflow</a></p>\n<p><img src=\"https://github.com/githubactions/pornsearch.alfredworkflow/raw/master/example.png\" alt=\"\"></p>\n"},{"title":"CentOS 6 启用 HTTPS","date":"2017-05-16T05:17:20.000Z","photos":["https://oa7ktymto.qnssl.com/https.png"],"_content":"\n原文出处：[https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/](https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/)\n\n<!--more-->\n\n### 0x0001 写在前面\n\n由于前段时间太忙，导致忘记了对 [Let's Encrypt](https://letsencrypt.org) 的证书做更新。等发现的时候，证书早已过期，尝试使用自动更新，结果失败。其实这个时候只需要修改一下 `nginx` 配置把原来的 `HTTPS` 关闭，然后再次自动更新应该就是可以成功的。但是当时没有想到这个点，就直接把 Let's Encrypt 的证书删除了，重新安装的。 这里记录一下安装过程中遇到的问题。\n\n### 0x0010 介绍下 Let's Encrypt\n\n[这里](https://letsencrypt.org)是他们的官网，里面有详细的介绍。我这边就简单说下为什么是 Let's Encrypt，而不是其他的家的。\n\n- 免费，不需要花费1分钱就可以有自己的证书\n- 很傻瓜式的安装方式\n- 不需要任何手动签名或验证过程，这些都在 Linux shell 完成\n- 理论上来讲一个命令就可以搞定了\n\n### 0x0011 配置\n\n我的 VPS 是 CentOS 6，然后 Web Server 使用的是 Nginx，这个是前提。如果是其他的系统的话就自己摸索。\n\n##### 安装 Let's Encrypt 的依赖\n\n我们需要安装 [certbot](https://certbot.eff.org/) 这个工具来生成免费证书，安装方式很简单：\n\n```bash\ncd /usr/bin\nwget https://dl.eff.org/certbot-auto\nchmod a+x certbot-auto   # 给刚刚下载的这个工具执行权限\nln -s /usr/bin/certbot-auto /usr/bin/certbot    # 做一个软连接\n```\n\n##### 修改 Nginx 配置\n\n工具安装好了，第二步就是修改 Nginx 的配置，在 Nginx 的配置文件里面加上：\n\n```nginx\nlocation ~ /.well-known {\n\tallow all;\n}\n```\n加这个的目的是为了方便安装的时候做证书验证。\n\n然后 Reload Nginx\n\n```\nservice nginx reload\n```\n\n##### 安装 Let's Encrypt 证书\n\n运行以下命令，把里面的 `wxy.sexy` 替换成你自己的域名，把 `/usr/local/nginx/html/www.wxy.sexy` 替换成你自己网站的根目录。\n\n```bash\ncertbot certonly -a webroot --webroot-path=/usr/local/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy\n```\n\n执行得到期望的结果如下：\n\n```bash\n[root@VPS ~]$ certbot certonly -a webroot --webroot-path=/usr/local/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for wxy.sexy\nhttp-01 challenge for www.wxy.sexy\nUsing the webroot path /usr/local/nginx/html/www.wxy.sexy for all unmatched domains.\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/wxy.sexy-0001/fullchain.pem. Your cert will\n   expire on 2017-08-15. To obtain a new or tweaked version of this\n   certificate in the future, simply run certbot again. To\n   non-interactively renew *all* of your certificates, run \"certbot\n   renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n```\n到这里说明证书已经安装成功了。\n\n##### 再次修改 Nginx 配置\n\n现在我们来修改 Nginx 的配置，通过配置 `fullchain.pem` 和 `privkey.pem` 文件来启用 SSL 证书\n\n```bash\nlisten 443 ssl; # 启用 SSL\n\n# 证书依赖的 pem 文件\nssl_certificate /etc/letsencrypt/live/wxy.sexy/fullchain.pem; \nssl_certificate_key /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n```\n\nReload Nginx\n\n```bash\nservice nginx reload\n```\n\n完整的 Nginx 配置如下：\n\n```\nserver {\n    listen         80;\n    server_name    wxy.sexy www.wxy.sexy;\n\n    location / {\n      return 301 https://www.wxy.sexy$request_uri;\n    }\n}\nserver {\n    listen        443 ssl;\n    server_name   wxy.sexy www.wxy.sexy;\n\n    ssl     on;\n    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;\n    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.4.4 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n    ssl_session_cache    shared:SSL:10m;\n    ssl_session_timeout  10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers On;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n\n    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;\n    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log;\n\n    root   /usr/local/nginx/html/www.wxy.sexy;\n    index  index.html;\n\n    if ($request_method !~ ^(GET|HEAD)$ ) {\n        return    444;\n    }\n\n    location ~ /.well-known {\n          allow all;\n    }\n\n    location / {\n        add_header              Strict-Transport-Security \"max-age=31536000\";\n        add_header              X-Frame-Options deny;\n        add_header              X-Content-Type-Options nosniff;\n        add_header              Cache-Control no-cache;\n    }\n}\n```\n\n由于我的这个博客只有静态文件，所以就没有其他的一些配置。\n这个里面每一项的配置的含义就交给你自己去搞懂了，我这里就不解释了。\n\n##### 最后\n\n这个时候你访问你的网站，如果发现打不开。\n请尝试使用 curl -L 选项。如果出现以下的错误：\n\n```\nInitializing NSS with certpath: sql:/etc/pki/nssdb * \nCAfile: /etc/pki/tls/certs/ca-bundle.crt \nCApath: none\n```\n请睡一觉明天再来看这个问题，或许就好了(我出现这个问题就是这么搞定的)。\n\n### 真的是最后了\n\n你可以在 [https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest](https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest) 这里测试一下你网站 SSL 的安全等级。\n\n我的是 C. ):逃走\n\n![](https://oa7ktymto.qnssl.com/01234BDE-93AB-4C2F-B869-15A30B9ECE16.png)\n\n## UPDATE 2019-03-18\n[certbot](https://certbot.eff.org/)\n用这个异常简单\n\n然后在加一个 cronjob 就没啥好担心的了。\n最近升级了一下 nginx 配置 现在我的 ssllab 等级已经是 A+ 了。\n最新的 nginx 配置：\n```\nserver {\n    listen         80;\n    server_name    wxy.sexy www.wxy.sexy;\n\n    location / {\n      return 301 https://$host$request_uri;\n    }\n}\n\nserver {\n    listen        443 ssl;\n    server_name   wxy.sexy www.wxy.sexy;\n\n    ssl     on;\n    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;\n    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.4.4 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n    ssl_session_cache    shared:SSL:10m;\n    ssl_session_timeout  10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers On;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    ssl_dhparam /usr/local/nginx/dh/dhparams.pem;\n\n    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;\n    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log main;\n\n    root   /usr/local/nginx/html/www.wxy.sexy;\n    index  index.html;\n\n    location / {\n        add_header              Strict-Transport-Security \"max-age=31536000\";\n        add_header              X-Frame-Options deny;\n        add_header              X-Content-Type-Options nosniff;\n        add_header              Cache-Control no-cache;\n    }\n}\n```\n","source":"_posts/CentOS-6-启用-HTTPS.md","raw":"---\ntitle: CentOS 6 启用 HTTPS\ndate: 2017-05-16 13:17:20\ntags: \n\t- HTTPS\n\t- Letsencrypt\nphotos:\n\t- https://oa7ktymto.qnssl.com/https.png\n---\n\n原文出处：[https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/](https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/)\n\n<!--more-->\n\n### 0x0001 写在前面\n\n由于前段时间太忙，导致忘记了对 [Let's Encrypt](https://letsencrypt.org) 的证书做更新。等发现的时候，证书早已过期，尝试使用自动更新，结果失败。其实这个时候只需要修改一下 `nginx` 配置把原来的 `HTTPS` 关闭，然后再次自动更新应该就是可以成功的。但是当时没有想到这个点，就直接把 Let's Encrypt 的证书删除了，重新安装的。 这里记录一下安装过程中遇到的问题。\n\n### 0x0010 介绍下 Let's Encrypt\n\n[这里](https://letsencrypt.org)是他们的官网，里面有详细的介绍。我这边就简单说下为什么是 Let's Encrypt，而不是其他的家的。\n\n- 免费，不需要花费1分钱就可以有自己的证书\n- 很傻瓜式的安装方式\n- 不需要任何手动签名或验证过程，这些都在 Linux shell 完成\n- 理论上来讲一个命令就可以搞定了\n\n### 0x0011 配置\n\n我的 VPS 是 CentOS 6，然后 Web Server 使用的是 Nginx，这个是前提。如果是其他的系统的话就自己摸索。\n\n##### 安装 Let's Encrypt 的依赖\n\n我们需要安装 [certbot](https://certbot.eff.org/) 这个工具来生成免费证书，安装方式很简单：\n\n```bash\ncd /usr/bin\nwget https://dl.eff.org/certbot-auto\nchmod a+x certbot-auto   # 给刚刚下载的这个工具执行权限\nln -s /usr/bin/certbot-auto /usr/bin/certbot    # 做一个软连接\n```\n\n##### 修改 Nginx 配置\n\n工具安装好了，第二步就是修改 Nginx 的配置，在 Nginx 的配置文件里面加上：\n\n```nginx\nlocation ~ /.well-known {\n\tallow all;\n}\n```\n加这个的目的是为了方便安装的时候做证书验证。\n\n然后 Reload Nginx\n\n```\nservice nginx reload\n```\n\n##### 安装 Let's Encrypt 证书\n\n运行以下命令，把里面的 `wxy.sexy` 替换成你自己的域名，把 `/usr/local/nginx/html/www.wxy.sexy` 替换成你自己网站的根目录。\n\n```bash\ncertbot certonly -a webroot --webroot-path=/usr/local/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy\n```\n\n执行得到期望的结果如下：\n\n```bash\n[root@VPS ~]$ certbot certonly -a webroot --webroot-path=/usr/local/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for wxy.sexy\nhttp-01 challenge for www.wxy.sexy\nUsing the webroot path /usr/local/nginx/html/www.wxy.sexy for all unmatched domains.\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/wxy.sexy-0001/fullchain.pem. Your cert will\n   expire on 2017-08-15. To obtain a new or tweaked version of this\n   certificate in the future, simply run certbot again. To\n   non-interactively renew *all* of your certificates, run \"certbot\n   renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n```\n到这里说明证书已经安装成功了。\n\n##### 再次修改 Nginx 配置\n\n现在我们来修改 Nginx 的配置，通过配置 `fullchain.pem` 和 `privkey.pem` 文件来启用 SSL 证书\n\n```bash\nlisten 443 ssl; # 启用 SSL\n\n# 证书依赖的 pem 文件\nssl_certificate /etc/letsencrypt/live/wxy.sexy/fullchain.pem; \nssl_certificate_key /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n```\n\nReload Nginx\n\n```bash\nservice nginx reload\n```\n\n完整的 Nginx 配置如下：\n\n```\nserver {\n    listen         80;\n    server_name    wxy.sexy www.wxy.sexy;\n\n    location / {\n      return 301 https://www.wxy.sexy$request_uri;\n    }\n}\nserver {\n    listen        443 ssl;\n    server_name   wxy.sexy www.wxy.sexy;\n\n    ssl     on;\n    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;\n    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.4.4 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n    ssl_session_cache    shared:SSL:10m;\n    ssl_session_timeout  10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers On;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n\n    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;\n    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log;\n\n    root   /usr/local/nginx/html/www.wxy.sexy;\n    index  index.html;\n\n    if ($request_method !~ ^(GET|HEAD)$ ) {\n        return    444;\n    }\n\n    location ~ /.well-known {\n          allow all;\n    }\n\n    location / {\n        add_header              Strict-Transport-Security \"max-age=31536000\";\n        add_header              X-Frame-Options deny;\n        add_header              X-Content-Type-Options nosniff;\n        add_header              Cache-Control no-cache;\n    }\n}\n```\n\n由于我的这个博客只有静态文件，所以就没有其他的一些配置。\n这个里面每一项的配置的含义就交给你自己去搞懂了，我这里就不解释了。\n\n##### 最后\n\n这个时候你访问你的网站，如果发现打不开。\n请尝试使用 curl -L 选项。如果出现以下的错误：\n\n```\nInitializing NSS with certpath: sql:/etc/pki/nssdb * \nCAfile: /etc/pki/tls/certs/ca-bundle.crt \nCApath: none\n```\n请睡一觉明天再来看这个问题，或许就好了(我出现这个问题就是这么搞定的)。\n\n### 真的是最后了\n\n你可以在 [https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest](https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest) 这里测试一下你网站 SSL 的安全等级。\n\n我的是 C. ):逃走\n\n![](https://oa7ktymto.qnssl.com/01234BDE-93AB-4C2F-B869-15A30B9ECE16.png)\n\n## UPDATE 2019-03-18\n[certbot](https://certbot.eff.org/)\n用这个异常简单\n\n然后在加一个 cronjob 就没啥好担心的了。\n最近升级了一下 nginx 配置 现在我的 ssllab 等级已经是 A+ 了。\n最新的 nginx 配置：\n```\nserver {\n    listen         80;\n    server_name    wxy.sexy www.wxy.sexy;\n\n    location / {\n      return 301 https://$host$request_uri;\n    }\n}\n\nserver {\n    listen        443 ssl;\n    server_name   wxy.sexy www.wxy.sexy;\n\n    ssl     on;\n    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;\n    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;\n\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.4.4 8.8.8.8 valid=300s;\n    resolver_timeout 10s;\n    ssl_session_cache    shared:SSL:10m;\n    ssl_session_timeout  10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers On;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    ssl_dhparam /usr/local/nginx/dh/dhparams.pem;\n\n    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;\n    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log main;\n\n    root   /usr/local/nginx/html/www.wxy.sexy;\n    index  index.html;\n\n    location / {\n        add_header              Strict-Transport-Security \"max-age=31536000\";\n        add_header              X-Frame-Options deny;\n        add_header              X-Content-Type-Options nosniff;\n        add_header              Cache-Control no-cache;\n    }\n}\n```\n","slug":"CentOS-6-启用-HTTPS","published":1,"updated":"2019-08-02T03:42:10.794Z","comments":1,"layout":"post","link":"","_id":"ckatepn7b0004q0tx8glk0w72","content":"<p>原文出处：<a href=\"https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/\" target=\"_blank\" rel=\"noopener\">https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"0x0001-写在前面\"><a href=\"#0x0001-写在前面\" class=\"headerlink\" title=\"0x0001 写在前面\"></a>0x0001 写在前面</h3><p>由于前段时间太忙，导致忘记了对 <a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 的证书做更新。等发现的时候，证书早已过期，尝试使用自动更新，结果失败。其实这个时候只需要修改一下 <code>nginx</code> 配置把原来的 <code>HTTPS</code> 关闭，然后再次自动更新应该就是可以成功的。但是当时没有想到这个点，就直接把 Let’s Encrypt 的证书删除了，重新安装的。 这里记录一下安装过程中遇到的问题。</p>\n<h3 id=\"0x0010-介绍下-Let’s-Encrypt\"><a href=\"#0x0010-介绍下-Let’s-Encrypt\" class=\"headerlink\" title=\"0x0010 介绍下 Let’s Encrypt\"></a>0x0010 介绍下 Let’s Encrypt</h3><p><a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">这里</a>是他们的官网，里面有详细的介绍。我这边就简单说下为什么是 Let’s Encrypt，而不是其他的家的。</p>\n<ul>\n<li>免费，不需要花费1分钱就可以有自己的证书</li>\n<li>很傻瓜式的安装方式</li>\n<li>不需要任何手动签名或验证过程，这些都在 Linux shell 完成</li>\n<li>理论上来讲一个命令就可以搞定了</li>\n</ul>\n<h3 id=\"0x0011-配置\"><a href=\"#0x0011-配置\" class=\"headerlink\" title=\"0x0011 配置\"></a>0x0011 配置</h3><p>我的 VPS 是 CentOS 6，然后 Web Server 使用的是 Nginx，这个是前提。如果是其他的系统的话就自己摸索。</p>\n<h5 id=\"安装-Let’s-Encrypt-的依赖\"><a href=\"#安装-Let’s-Encrypt-的依赖\" class=\"headerlink\" title=\"安装 Let’s Encrypt 的依赖\"></a>安装 Let’s Encrypt 的依赖</h5><p>我们需要安装 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a> 这个工具来生成免费证书，安装方式很简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/bin</span><br><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto   <span class=\"comment\"># 给刚刚下载的这个工具执行权限</span></span><br><span class=\"line\">ln -s /usr/bin/certbot-auto /usr/bin/certbot    <span class=\"comment\"># 做一个软连接</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改-Nginx-配置\"><a href=\"#修改-Nginx-配置\" class=\"headerlink\" title=\"修改 Nginx 配置\"></a>修改 Nginx 配置</h5><p>工具安装好了，第二步就是修改 Nginx 的配置，在 Nginx 的配置文件里面加上：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ /.well-known</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加这个的目的是为了方便安装的时候做证书验证。</p>\n<p>然后 Reload Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装-Let’s-Encrypt-证书\"><a href=\"#安装-Let’s-Encrypt-证书\" class=\"headerlink\" title=\"安装 Let’s Encrypt 证书\"></a>安装 Let’s Encrypt 证书</h5><p>运行以下命令，把里面的 <code>wxy.sexy</code> 替换成你自己的域名，把 <code>/usr/local/nginx/html/www.wxy.sexy</code> 替换成你自己网站的根目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly -a webroot --webroot-path=/usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy</span><br></pre></td></tr></table></figure>\n\n<p>执行得到期望的结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VPS ~]$ certbot certonly -a webroot --webroot-path=/usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy</span><br><span class=\"line\">Saving debug <span class=\"built_in\">log</span> to /var/<span class=\"built_in\">log</span>/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">http-01 challenge <span class=\"keyword\">for</span> wxy.sexy</span><br><span class=\"line\">http-01 challenge <span class=\"keyword\">for</span> www.wxy.sexy</span><br><span class=\"line\">Using the webroot path /usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy <span class=\"keyword\">for</span> all unmatched domains.</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at</span><br><span class=\"line\">   /etc/letsencrypt/live/wxy.sexy-0001/fullchain.pem. Your cert will</span><br><span class=\"line\">   expire on 2017-08-15. To obtain a new or tweaked version of this</span><br><span class=\"line\">   certificate <span class=\"keyword\">in</span> the future, simply run certbot again. To</span><br><span class=\"line\">   non-interactively renew *all* of your certificates, run <span class=\"string\">\"certbot</span></span><br><span class=\"line\"><span class=\"string\">   renew\"</span></span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let<span class=\"string\">'s Encrypt:   https://letsencrypt.org/donate</span></span><br><span class=\"line\"><span class=\"string\">   Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure>\n\n<p>到这里说明证书已经安装成功了。</p>\n<h5 id=\"再次修改-Nginx-配置\"><a href=\"#再次修改-Nginx-配置\" class=\"headerlink\" title=\"再次修改 Nginx 配置\"></a>再次修改 Nginx 配置</h5><p>现在我们来修改 Nginx 的配置，通过配置 <code>fullchain.pem</code> 和 <code>privkey.pem</code> 文件来启用 SSL 证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl; <span class=\"comment\"># 启用 SSL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书依赖的 pem 文件</span></span><br><span class=\"line\">ssl_certificate /etc/letsencrypt/live/wxy.sexy/fullchain.pem; </span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br></pre></td></tr></table></figure>\n\n<p>Reload Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n\n<p>完整的 Nginx 配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen         80;</span><br><span class=\"line\">    server_name    wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      return 301 https://www.wxy.sexy$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        443 ssl;</span><br><span class=\"line\">    server_name   wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl     on;</span><br><span class=\"line\">    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.4.4 8.8.8.8 valid=300s;</span><br><span class=\"line\">    resolver_timeout 10s;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers On;</span><br><span class=\"line\">    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;</span><br><span class=\"line\">    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    root   /usr/local/nginx/html/www.wxy.sexy;</span><br><span class=\"line\">    index  index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ($request_method !~ ^(GET|HEAD)$ ) &#123;</span><br><span class=\"line\">        return    444;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ /.well-known &#123;</span><br><span class=\"line\">          allow all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        add_header              Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class=\"line\">        add_header              X-Frame-Options deny;</span><br><span class=\"line\">        add_header              X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header              Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我的这个博客只有静态文件，所以就没有其他的一些配置。<br>这个里面每一项的配置的含义就交给你自己去搞懂了，我这里就不解释了。</p>\n<h5 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h5><p>这个时候你访问你的网站，如果发现打不开。<br>请尝试使用 curl -L 选项。如果出现以下的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Initializing NSS with certpath: sql:/etc/pki/nssdb * </span><br><span class=\"line\">CAfile: /etc/pki/tls/certs/ca-bundle.crt </span><br><span class=\"line\">CApath: none</span><br></pre></td></tr></table></figure>\n\n<p>请睡一觉明天再来看这个问题，或许就好了(我出现这个问题就是这么搞定的)。</p>\n<h3 id=\"真的是最后了\"><a href=\"#真的是最后了\" class=\"headerlink\" title=\"真的是最后了\"></a>真的是最后了</h3><p>你可以在 <a href=\"https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest\" target=\"_blank\" rel=\"noopener\">https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&amp;latest</a> 这里测试一下你网站 SSL 的安全等级。</p>\n<p>我的是 C. ):逃走</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/01234BDE-93AB-4C2F-B869-15A30B9ECE16.png\" alt=\"\"></p>\n<h2 id=\"UPDATE-2019-03-18\"><a href=\"#UPDATE-2019-03-18\" class=\"headerlink\" title=\"UPDATE 2019-03-18\"></a>UPDATE 2019-03-18</h2><p><a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a><br>用这个异常简单</p>\n<p>然后在加一个 cronjob 就没啥好担心的了。<br>最近升级了一下 nginx 配置 现在我的 ssllab 等级已经是 A+ 了。<br>最新的 nginx 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen         80;</span><br><span class=\"line\">    server_name    wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        443 ssl;</span><br><span class=\"line\">    server_name   wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl     on;</span><br><span class=\"line\">    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.4.4 8.8.8.8 valid=300s;</span><br><span class=\"line\">    resolver_timeout 10s;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers On;</span><br><span class=\"line\">    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><span class=\"line\">    ssl_dhparam /usr/local/nginx/dh/dhparams.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;</span><br><span class=\"line\">    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log main;</span><br><span class=\"line\"></span><br><span class=\"line\">    root   /usr/local/nginx/html/www.wxy.sexy;</span><br><span class=\"line\">    index  index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        add_header              Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class=\"line\">        add_header              X-Frame-Options deny;</span><br><span class=\"line\">        add_header              X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header              Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>原文出处：<a href=\"https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/\" target=\"_blank\" rel=\"noopener\">https://nixcp.com/install-lets-encrypt-ssl-centos-nginx/</a></p>","more":"<h3 id=\"0x0001-写在前面\"><a href=\"#0x0001-写在前面\" class=\"headerlink\" title=\"0x0001 写在前面\"></a>0x0001 写在前面</h3><p>由于前段时间太忙，导致忘记了对 <a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a> 的证书做更新。等发现的时候，证书早已过期，尝试使用自动更新，结果失败。其实这个时候只需要修改一下 <code>nginx</code> 配置把原来的 <code>HTTPS</code> 关闭，然后再次自动更新应该就是可以成功的。但是当时没有想到这个点，就直接把 Let’s Encrypt 的证书删除了，重新安装的。 这里记录一下安装过程中遇到的问题。</p>\n<h3 id=\"0x0010-介绍下-Let’s-Encrypt\"><a href=\"#0x0010-介绍下-Let’s-Encrypt\" class=\"headerlink\" title=\"0x0010 介绍下 Let’s Encrypt\"></a>0x0010 介绍下 Let’s Encrypt</h3><p><a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">这里</a>是他们的官网，里面有详细的介绍。我这边就简单说下为什么是 Let’s Encrypt，而不是其他的家的。</p>\n<ul>\n<li>免费，不需要花费1分钱就可以有自己的证书</li>\n<li>很傻瓜式的安装方式</li>\n<li>不需要任何手动签名或验证过程，这些都在 Linux shell 完成</li>\n<li>理论上来讲一个命令就可以搞定了</li>\n</ul>\n<h3 id=\"0x0011-配置\"><a href=\"#0x0011-配置\" class=\"headerlink\" title=\"0x0011 配置\"></a>0x0011 配置</h3><p>我的 VPS 是 CentOS 6，然后 Web Server 使用的是 Nginx，这个是前提。如果是其他的系统的话就自己摸索。</p>\n<h5 id=\"安装-Let’s-Encrypt-的依赖\"><a href=\"#安装-Let’s-Encrypt-的依赖\" class=\"headerlink\" title=\"安装 Let’s Encrypt 的依赖\"></a>安装 Let’s Encrypt 的依赖</h5><p>我们需要安装 <a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a> 这个工具来生成免费证书，安装方式很简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/bin</span><br><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x certbot-auto   <span class=\"comment\"># 给刚刚下载的这个工具执行权限</span></span><br><span class=\"line\">ln -s /usr/bin/certbot-auto /usr/bin/certbot    <span class=\"comment\"># 做一个软连接</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改-Nginx-配置\"><a href=\"#修改-Nginx-配置\" class=\"headerlink\" title=\"修改 Nginx 配置\"></a>修改 Nginx 配置</h5><p>工具安装好了，第二步就是修改 Nginx 的配置，在 Nginx 的配置文件里面加上：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ /.well-known</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">allow</span> all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加这个的目的是为了方便安装的时候做证书验证。</p>\n<p>然后 Reload Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装-Let’s-Encrypt-证书\"><a href=\"#安装-Let’s-Encrypt-证书\" class=\"headerlink\" title=\"安装 Let’s Encrypt 证书\"></a>安装 Let’s Encrypt 证书</h5><p>运行以下命令，把里面的 <code>wxy.sexy</code> 替换成你自己的域名，把 <code>/usr/local/nginx/html/www.wxy.sexy</code> 替换成你自己网站的根目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot certonly -a webroot --webroot-path=/usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy</span><br></pre></td></tr></table></figure>\n\n<p>执行得到期望的结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VPS ~]$ certbot certonly -a webroot --webroot-path=/usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy -d wxy.sexy -d www.wxy.sexy</span><br><span class=\"line\">Saving debug <span class=\"built_in\">log</span> to /var/<span class=\"built_in\">log</span>/letsencrypt/letsencrypt.log</span><br><span class=\"line\">Obtaining a new certificate</span><br><span class=\"line\">Performing the following challenges:</span><br><span class=\"line\">http-01 challenge <span class=\"keyword\">for</span> wxy.sexy</span><br><span class=\"line\">http-01 challenge <span class=\"keyword\">for</span> www.wxy.sexy</span><br><span class=\"line\">Using the webroot path /usr/<span class=\"built_in\">local</span>/nginx/html/www.wxy.sexy <span class=\"keyword\">for</span> all unmatched domains.</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> verification...</span><br><span class=\"line\">Cleaning up challenges</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT NOTES:</span><br><span class=\"line\"> - Congratulations! Your certificate and chain have been saved at</span><br><span class=\"line\">   /etc/letsencrypt/live/wxy.sexy-0001/fullchain.pem. Your cert will</span><br><span class=\"line\">   expire on 2017-08-15. To obtain a new or tweaked version of this</span><br><span class=\"line\">   certificate <span class=\"keyword\">in</span> the future, simply run certbot again. To</span><br><span class=\"line\">   non-interactively renew *all* of your certificates, run <span class=\"string\">\"certbot</span></span><br><span class=\"line\"><span class=\"string\">   renew\"</span></span><br><span class=\"line\"> - If you like Certbot, please consider supporting our work by:</span><br><span class=\"line\"></span><br><span class=\"line\">   Donating to ISRG / Let<span class=\"string\">'s Encrypt:   https://letsencrypt.org/donate</span></span><br><span class=\"line\"><span class=\"string\">   Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure>\n\n<p>到这里说明证书已经安装成功了。</p>\n<h5 id=\"再次修改-Nginx-配置\"><a href=\"#再次修改-Nginx-配置\" class=\"headerlink\" title=\"再次修改 Nginx 配置\"></a>再次修改 Nginx 配置</h5><p>现在我们来修改 Nginx 的配置，通过配置 <code>fullchain.pem</code> 和 <code>privkey.pem</code> 文件来启用 SSL 证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl; <span class=\"comment\"># 启用 SSL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书依赖的 pem 文件</span></span><br><span class=\"line\">ssl_certificate /etc/letsencrypt/live/wxy.sexy/fullchain.pem; </span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br></pre></td></tr></table></figure>\n\n<p>Reload Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx reload</span><br></pre></td></tr></table></figure>\n\n<p>完整的 Nginx 配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen         80;</span><br><span class=\"line\">    server_name    wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      return 301 https://www.wxy.sexy$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        443 ssl;</span><br><span class=\"line\">    server_name   wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl     on;</span><br><span class=\"line\">    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.4.4 8.8.8.8 valid=300s;</span><br><span class=\"line\">    resolver_timeout 10s;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers On;</span><br><span class=\"line\">    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;</span><br><span class=\"line\">    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    root   /usr/local/nginx/html/www.wxy.sexy;</span><br><span class=\"line\">    index  index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ($request_method !~ ^(GET|HEAD)$ ) &#123;</span><br><span class=\"line\">        return    444;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ /.well-known &#123;</span><br><span class=\"line\">          allow all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        add_header              Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class=\"line\">        add_header              X-Frame-Options deny;</span><br><span class=\"line\">        add_header              X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header              Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我的这个博客只有静态文件，所以就没有其他的一些配置。<br>这个里面每一项的配置的含义就交给你自己去搞懂了，我这里就不解释了。</p>\n<h5 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h5><p>这个时候你访问你的网站，如果发现打不开。<br>请尝试使用 curl -L 选项。如果出现以下的错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Initializing NSS with certpath: sql:/etc/pki/nssdb * </span><br><span class=\"line\">CAfile: /etc/pki/tls/certs/ca-bundle.crt </span><br><span class=\"line\">CApath: none</span><br></pre></td></tr></table></figure>\n\n<p>请睡一觉明天再来看这个问题，或许就好了(我出现这个问题就是这么搞定的)。</p>\n<h3 id=\"真的是最后了\"><a href=\"#真的是最后了\" class=\"headerlink\" title=\"真的是最后了\"></a>真的是最后了</h3><p>你可以在 <a href=\"https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&latest\" target=\"_blank\" rel=\"noopener\">https://www.ssllabs.com/ssltest/analyze.html?d=www.wxy.sexy&amp;latest</a> 这里测试一下你网站 SSL 的安全等级。</p>\n<p>我的是 C. ):逃走</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/01234BDE-93AB-4C2F-B869-15A30B9ECE16.png\" alt=\"\"></p>\n<h2 id=\"UPDATE-2019-03-18\"><a href=\"#UPDATE-2019-03-18\" class=\"headerlink\" title=\"UPDATE 2019-03-18\"></a>UPDATE 2019-03-18</h2><p><a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a><br>用这个异常简单</p>\n<p>然后在加一个 cronjob 就没啥好担心的了。<br>最近升级了一下 nginx 配置 现在我的 ssllab 等级已经是 A+ 了。<br>最新的 nginx 配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen         80;</span><br><span class=\"line\">    server_name    wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      return 301 https://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen        443 ssl;</span><br><span class=\"line\">    server_name   wxy.sexy www.wxy.sexy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl     on;</span><br><span class=\"line\">    ssl_certificate     /etc/letsencrypt/live/wxy.sexy/fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key   /etc/letsencrypt/live/wxy.sexy/privkey.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_stapling on;</span><br><span class=\"line\">    ssl_stapling_verify on;</span><br><span class=\"line\">    resolver 8.8.4.4 8.8.8.8 valid=300s;</span><br><span class=\"line\">    resolver_timeout 10s;</span><br><span class=\"line\">    ssl_session_cache    shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_prefer_server_ciphers On;</span><br><span class=\"line\">    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;</span><br><span class=\"line\">    ssl_dhparam /usr/local/nginx/dh/dhparams.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_log   /usr/local/nginx/logs/www.wxy.sexy.error.log;</span><br><span class=\"line\">    access_log  /usr/local/nginx/logs/www.wxy.sexy.access.log main;</span><br><span class=\"line\"></span><br><span class=\"line\">    root   /usr/local/nginx/html/www.wxy.sexy;</span><br><span class=\"line\">    index  index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        add_header              Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class=\"line\">        add_header              X-Frame-Options deny;</span><br><span class=\"line\">        add_header              X-Content-Type-Options nosniff;</span><br><span class=\"line\">        add_header              Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Golang reflect 使用","date":"2017-02-08T04:08:01.000Z","photos":["https://oa7ktymto.qnssl.com/golang.jpg"],"_content":"\nreflect 一个神奇的 pkg\n<!--more-->\n\n\n### 0x001\n这篇文章写的时候使用的Go版本：`go version go1.7.1 darwin/amd64`\n\n先来说一下背景，最近要做的一个项目对外暴露两个 API ，然后根据参数里面的 action 字段来决定后面的处理代码。 \n\n首先想到的处理办法是：用一个 map 来存 action 和后面对应处理函数的关系，每次请求过来了就根据 map 里面的内容来决定。好，可以实现。听起来也比较简单，然后开始写代码。写了一段时间发现一个很坑爹的问题：\n需要去维护一个 action 的 map 。有时候写完函数就忘记去添加到 map 里面了，就会出现 404 的错误，虽然知道是没有更新 map ，但是增加了开发的心里负担。然后在每个处理函数里面还需要去 parse 传过来的参数，是每个处理函数都要写一段基本相同的代码，就是下面这个东西\n\n```\ntype A struct{}\ntype Args struct{}\n\nfunc (a *A) Create(req *http.Request)(err error){\n\targs := Args{}\n\tparams.BindValuesToStruct(&args, req) // 这个是自己写的一个函数\n}\n```\n基本每个地方都会有，而且还需要去生成一个 client + logger。这个东西完全可以不用开发处理函数的人来关注的。他们只需要注重业务细节就好了。\n\n### 0x010\n\n接下来是如果改变这个东西，趁项目还不是很大，改起来还不是很麻烦。想到了用 reflect 包来解决这个问题。想到达到的效果是：\n```\ntype A struct{}\ntype Args struct{}\n\nfunc (a *A) Create(args  Args) (err error){}\n// 需要的东西都在调用函数的之前搞定，函数里面就只专注业务，这个就把业务跟其他不相关的东西解耦了\n```\n\n### 0x011\n\n既然决定使用 reflect 包，那么我们就来先看下 [官方文档](https://golang.org/pkg/reflect)(需要自己扶墙) \n```\nreflect.TypeOf()\nreflect.ValueOf()\n```\n两个简单的函数，`reflect.TypeOf` 和 `reflect.ValueOf`，返回被检查对象的类型和值。例如，x 被定义为：`var x float64 = 3.4`，那么 `reflect.TypeOf(x)` 返回 `float64`，`reflect.ValueOf(x)` 返回 `<float64 Value>`。\n\n从上面的代码可以看出来，我们的处理函数都是 `A` 的方法，为了不去手动维护那个坑爹的 `map`。我们需要自己自动获取 `A` 的方法。如果我们的 `action` 跟 `A` 的方法名字一样的话，我们就可以不用关注 `map` 了。\n```\ntyp := reflect.TypeOf(new(A))\ntyp.NumMethod // 这个返回 A 下面的方法数量，有了这个我们就可以知道 A 下面有多少方法了。 那么要怎么拿到这些方法呢？\n\ntyp.Method(i) // 这个函数返回 A 下面的第 i 个方法，返回值是 reflect.Method \n\nreflect 包里面 Method 的定义：\ntype Method struct {\n\t// Name is the method name.\n\t// PkgPath is the package path that qualifies a lower case (unexported)\n\t// method name. It is empty for upper case (exported) method names.\n\t// The combination of PkgPath and Name uniquely identifies a method\n\t// in a method set.\n\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers\n\tName    string\n\tPkgPath string\n\n\tType  Type  // method type\n\tFunc  Value // func with receiver as first argument 这条很重要\n\tIndex int   // index for Type.Method\n}\n\n```\n到这里，我们已经知道如何拿到一个 `struct` 下面的方法了。现在我们需要把这些方法存起来，存到一个 map 里面(不要怕，这个不需要手动维护，这个是程序直接做掉的)，直接来看代码：\n\n```\n// 此处我实现一个并发安全的map,实现了 Get,Set,Delete,Has 方法目前已经足够使用\n// 如果想知道如何做，自行 Google 已经有很多了\ntype SafetyMap struct{\n\tsync.RWMutex\n\titem map[string]interface{} // action 的值就是map的key\n}\n\n// 这个是我们的主体，他的功能类似于 Mux ，所以我们就叫它 Mux\ntype Mux struct{\n\tm *SafetyMap\n}\n\ntype Method struct{\n\tmethod reflect.Method // 这个是存 method\n\targs []reflect.Type // 这个存 method 对应的参数的 Type\n}\n\nfunc NewMux() *Mux{\n\treturn &Mux{\n\t\tm: NewSafetyMap(), // 这个我在其他地方做掉了\n\t}\n}\n\nfunc (mux *Mux) Register(rcvr interface{}) {\n\ttyp := reflect.TypeOf(rcvr) // 获取 rcvr 的Type\n\n\tfor i := 0; i < typ.NumMethod(); i++ {\n\t\tmethod := typ.Method(i)\n\t\tmt := method.Type\n\n\t\tnOut := mt.NumOut() // 函数的返回值，如果返回值里面没有error那么直接panic\n\t\tif nOut < 1 {\n\t\t\tpanic(fmt.Sprintf(\"%s return final output param must be error interface\", method.Name))\n\t\t}\n\t\t_, ok := mt.Out(nOut - 1).MethodByName(\"Error\") // 返回值的最后一个参数必须为 error\n\t\tif !ok {\n\t\t\tpanic(fmt.Sprintf(\"%s return final output param must be error interface\", method.Name))\n\t\t}\n\n\t\tm := Method{}\n\t\tm.method = method\n\t\targs := []reflect.Type{}\n\t\tfor p := 1; p < mt.NumIn(); p++ { // 函数的参数\n\t\t\targs = append(args, mt.In(p)) // 参数必须跟本身函数参数的顺序相同，否则在调用函数的时候会出错\n\t\t}\n\t\tm.args = args\n\n\t\tmux.m.Set(method.Name, m)\n\t}\n}\n```\n到这里，我们就把自动生成 `map` 的是事情做完了。\n接下来我们来写调用函数处理的部分\n```\nfunc (mux *Mux) Call(key string, rcvr interface{}, req *http.Request) (interface{}, error) {\n\tsafem, ok := mux.m.Get(key) // 获取到safemap的value\n\tif !ok {\n\t\treturn nil, NotFound\n\t}\n\n\tmethod, ok := safem.(Method) // 断言一下 value 的类型看是不是我们想要的Method类型\n\tif !ok {\n\t\treturn nil, NotFound\n\t}\n\n\tin := []reflect.Value{} // 调用函数的时候需要用到的参数列表\n\t\n\t// 第一个参数必须要是这个函数的rcvr，在reflect包的Method结构体里面有说这点，如果没有这做，程序会直接panic\n\t// panic: reflect: Call with too few input arguments \n\t// 当时出现这个问题，我查了好久没有发现问题，然后看reflect包 Method的时候发现了这点\n\t// 这个的 rcvr 我们可以把一些需要用的东西提前准备好传进去，就不用在函数内部做这些事情了\n\tin = append(in, reflect.ValueOf(rcvr)) \n\n\t\n\t// 拿到刚刚注册好的函数的参数\n\t// 按照顺序把参数\n\tfor _, v := range method.Args {\n\t\tvar (\n\t\t\tresult interface{}\n\t\t\tval    reflect.Value\n\t\t)\n\n\t\t// reflect.New() 会返回指定类型的一个空值的指针 reflect.Value，\n\t\t// 根据上面的例子 这个会返回值的 type： *Args，type 的 Kind 是 reflect.Ptr\n\t\t// 该 type‘s Kind 是 reflect.Ptr 的 Elem() 方法会对应指针类型的值类型的 reflect.Value\n\t\t// reflect.Value 的 Interface() 方法是把该 Value 转成一个 interface\n\t\tresult = reflect.New(v).Elem().Interface()\n\n\t\t// 这个 BindValuesToStruct 是在其他地方实现的，也是通过反射实现的，这个后面再来讲\n\t\t// 只需要知道这个函数会返回一个 reflect.Value 类型的值，而这个东西已经包含了传过来的参数\n\t\tval = params.BindValuesToStruct(result, req, true)\n\t\n\t\tin = append(in, val)\n\t}\n\t\n\t// 这个地方就是直接调用 Method 的 Func 属性下面的 Call() 方法，然后把参数传进去\n\t// 返回值是一个 []reflect.Value 类型\n\tret := method.Method.Func.Call(in)\n\n\n\t// 这个地方我们需要解析出来最后一个 err 和 返回的结构体 默认就只有两个参数，其他的参数会被丢掉\n\tretLength := len(ret)\n\tvar (\n\t\terr error\n\t\tres interface{}\n\t)\n\n\t// 因为我们在register里面强制要求了必须要有返回值而且最后一个返回值是 error，所以这个地方理论上讲是不会出现数组越界的\n\terr, _ = ret[retLength-1].Interface().(error)\n\tif retLength > 1 {\n\t\tres = ret[0].Interface()\n\t}\n\n\treturn res, err\n}\n```\n调用的函数也写完了。但是在测试的时候发现一个问题，如果我的处理函数的参数是指针类型的，例如：\n```\nfunc (a *A) Create(args *Args) (err error){}\n```\n这个时候直接就panic了，然后参数不能被正常的写入。这个地方我们的做法是在注入参数的时候把指针类型转换成值类型，然后在取这个值类型的指针。\n\n```\n在 Call() 函数里面\n\nfor _, v := range method.Args {\n\tvar (\n\t\tresult interface{}\n\t\tval    reflect.Value\n\t)\n\n\t// 判断是不是指针类型，如果是指针类型那么就在先拿他的elem来new\n\t// 否则就直接 new\n\tif v.Kind() == reflect.Ptr {\n\t\tresult = reflect.New(v.Elem()).Elem().Interface()\n\t\tval = params.BindValuesToStruct(result, req, true).Addr()\n\t} else {\n\t\tresult = reflect.New(v).Elem().Interface()\n\t\tval = params.BindValuesToStruct(result, req, true)\n\t}\n\n\tin = append(in, val)\n}\n\n```\n这样就基本结束，当然这里面还是有一些问题：\n\n* 不支持函数的参数是 struct 以外的其他类型\n* =====\n\n如果有看不明白的可以直接留言。\n如果有出错的地方欢迎指正，相互学习。\n\n代码： [github](https://github.com/momaek/mdzz)\n","source":"_posts/Golang-reflect-使用.md","raw":"---\ntitle: Golang reflect 使用\ndate: 2017-02-08 12:08:01\ntags: Golang\nphotos: \n\t- https://oa7ktymto.qnssl.com/golang.jpg\n---\n\nreflect 一个神奇的 pkg\n<!--more-->\n\n\n### 0x001\n这篇文章写的时候使用的Go版本：`go version go1.7.1 darwin/amd64`\n\n先来说一下背景，最近要做的一个项目对外暴露两个 API ，然后根据参数里面的 action 字段来决定后面的处理代码。 \n\n首先想到的处理办法是：用一个 map 来存 action 和后面对应处理函数的关系，每次请求过来了就根据 map 里面的内容来决定。好，可以实现。听起来也比较简单，然后开始写代码。写了一段时间发现一个很坑爹的问题：\n需要去维护一个 action 的 map 。有时候写完函数就忘记去添加到 map 里面了，就会出现 404 的错误，虽然知道是没有更新 map ，但是增加了开发的心里负担。然后在每个处理函数里面还需要去 parse 传过来的参数，是每个处理函数都要写一段基本相同的代码，就是下面这个东西\n\n```\ntype A struct{}\ntype Args struct{}\n\nfunc (a *A) Create(req *http.Request)(err error){\n\targs := Args{}\n\tparams.BindValuesToStruct(&args, req) // 这个是自己写的一个函数\n}\n```\n基本每个地方都会有，而且还需要去生成一个 client + logger。这个东西完全可以不用开发处理函数的人来关注的。他们只需要注重业务细节就好了。\n\n### 0x010\n\n接下来是如果改变这个东西，趁项目还不是很大，改起来还不是很麻烦。想到了用 reflect 包来解决这个问题。想到达到的效果是：\n```\ntype A struct{}\ntype Args struct{}\n\nfunc (a *A) Create(args  Args) (err error){}\n// 需要的东西都在调用函数的之前搞定，函数里面就只专注业务，这个就把业务跟其他不相关的东西解耦了\n```\n\n### 0x011\n\n既然决定使用 reflect 包，那么我们就来先看下 [官方文档](https://golang.org/pkg/reflect)(需要自己扶墙) \n```\nreflect.TypeOf()\nreflect.ValueOf()\n```\n两个简单的函数，`reflect.TypeOf` 和 `reflect.ValueOf`，返回被检查对象的类型和值。例如，x 被定义为：`var x float64 = 3.4`，那么 `reflect.TypeOf(x)` 返回 `float64`，`reflect.ValueOf(x)` 返回 `<float64 Value>`。\n\n从上面的代码可以看出来，我们的处理函数都是 `A` 的方法，为了不去手动维护那个坑爹的 `map`。我们需要自己自动获取 `A` 的方法。如果我们的 `action` 跟 `A` 的方法名字一样的话，我们就可以不用关注 `map` 了。\n```\ntyp := reflect.TypeOf(new(A))\ntyp.NumMethod // 这个返回 A 下面的方法数量，有了这个我们就可以知道 A 下面有多少方法了。 那么要怎么拿到这些方法呢？\n\ntyp.Method(i) // 这个函数返回 A 下面的第 i 个方法，返回值是 reflect.Method \n\nreflect 包里面 Method 的定义：\ntype Method struct {\n\t// Name is the method name.\n\t// PkgPath is the package path that qualifies a lower case (unexported)\n\t// method name. It is empty for upper case (exported) method names.\n\t// The combination of PkgPath and Name uniquely identifies a method\n\t// in a method set.\n\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers\n\tName    string\n\tPkgPath string\n\n\tType  Type  // method type\n\tFunc  Value // func with receiver as first argument 这条很重要\n\tIndex int   // index for Type.Method\n}\n\n```\n到这里，我们已经知道如何拿到一个 `struct` 下面的方法了。现在我们需要把这些方法存起来，存到一个 map 里面(不要怕，这个不需要手动维护，这个是程序直接做掉的)，直接来看代码：\n\n```\n// 此处我实现一个并发安全的map,实现了 Get,Set,Delete,Has 方法目前已经足够使用\n// 如果想知道如何做，自行 Google 已经有很多了\ntype SafetyMap struct{\n\tsync.RWMutex\n\titem map[string]interface{} // action 的值就是map的key\n}\n\n// 这个是我们的主体，他的功能类似于 Mux ，所以我们就叫它 Mux\ntype Mux struct{\n\tm *SafetyMap\n}\n\ntype Method struct{\n\tmethod reflect.Method // 这个是存 method\n\targs []reflect.Type // 这个存 method 对应的参数的 Type\n}\n\nfunc NewMux() *Mux{\n\treturn &Mux{\n\t\tm: NewSafetyMap(), // 这个我在其他地方做掉了\n\t}\n}\n\nfunc (mux *Mux) Register(rcvr interface{}) {\n\ttyp := reflect.TypeOf(rcvr) // 获取 rcvr 的Type\n\n\tfor i := 0; i < typ.NumMethod(); i++ {\n\t\tmethod := typ.Method(i)\n\t\tmt := method.Type\n\n\t\tnOut := mt.NumOut() // 函数的返回值，如果返回值里面没有error那么直接panic\n\t\tif nOut < 1 {\n\t\t\tpanic(fmt.Sprintf(\"%s return final output param must be error interface\", method.Name))\n\t\t}\n\t\t_, ok := mt.Out(nOut - 1).MethodByName(\"Error\") // 返回值的最后一个参数必须为 error\n\t\tif !ok {\n\t\t\tpanic(fmt.Sprintf(\"%s return final output param must be error interface\", method.Name))\n\t\t}\n\n\t\tm := Method{}\n\t\tm.method = method\n\t\targs := []reflect.Type{}\n\t\tfor p := 1; p < mt.NumIn(); p++ { // 函数的参数\n\t\t\targs = append(args, mt.In(p)) // 参数必须跟本身函数参数的顺序相同，否则在调用函数的时候会出错\n\t\t}\n\t\tm.args = args\n\n\t\tmux.m.Set(method.Name, m)\n\t}\n}\n```\n到这里，我们就把自动生成 `map` 的是事情做完了。\n接下来我们来写调用函数处理的部分\n```\nfunc (mux *Mux) Call(key string, rcvr interface{}, req *http.Request) (interface{}, error) {\n\tsafem, ok := mux.m.Get(key) // 获取到safemap的value\n\tif !ok {\n\t\treturn nil, NotFound\n\t}\n\n\tmethod, ok := safem.(Method) // 断言一下 value 的类型看是不是我们想要的Method类型\n\tif !ok {\n\t\treturn nil, NotFound\n\t}\n\n\tin := []reflect.Value{} // 调用函数的时候需要用到的参数列表\n\t\n\t// 第一个参数必须要是这个函数的rcvr，在reflect包的Method结构体里面有说这点，如果没有这做，程序会直接panic\n\t// panic: reflect: Call with too few input arguments \n\t// 当时出现这个问题，我查了好久没有发现问题，然后看reflect包 Method的时候发现了这点\n\t// 这个的 rcvr 我们可以把一些需要用的东西提前准备好传进去，就不用在函数内部做这些事情了\n\tin = append(in, reflect.ValueOf(rcvr)) \n\n\t\n\t// 拿到刚刚注册好的函数的参数\n\t// 按照顺序把参数\n\tfor _, v := range method.Args {\n\t\tvar (\n\t\t\tresult interface{}\n\t\t\tval    reflect.Value\n\t\t)\n\n\t\t// reflect.New() 会返回指定类型的一个空值的指针 reflect.Value，\n\t\t// 根据上面的例子 这个会返回值的 type： *Args，type 的 Kind 是 reflect.Ptr\n\t\t// 该 type‘s Kind 是 reflect.Ptr 的 Elem() 方法会对应指针类型的值类型的 reflect.Value\n\t\t// reflect.Value 的 Interface() 方法是把该 Value 转成一个 interface\n\t\tresult = reflect.New(v).Elem().Interface()\n\n\t\t// 这个 BindValuesToStruct 是在其他地方实现的，也是通过反射实现的，这个后面再来讲\n\t\t// 只需要知道这个函数会返回一个 reflect.Value 类型的值，而这个东西已经包含了传过来的参数\n\t\tval = params.BindValuesToStruct(result, req, true)\n\t\n\t\tin = append(in, val)\n\t}\n\t\n\t// 这个地方就是直接调用 Method 的 Func 属性下面的 Call() 方法，然后把参数传进去\n\t// 返回值是一个 []reflect.Value 类型\n\tret := method.Method.Func.Call(in)\n\n\n\t// 这个地方我们需要解析出来最后一个 err 和 返回的结构体 默认就只有两个参数，其他的参数会被丢掉\n\tretLength := len(ret)\n\tvar (\n\t\terr error\n\t\tres interface{}\n\t)\n\n\t// 因为我们在register里面强制要求了必须要有返回值而且最后一个返回值是 error，所以这个地方理论上讲是不会出现数组越界的\n\terr, _ = ret[retLength-1].Interface().(error)\n\tif retLength > 1 {\n\t\tres = ret[0].Interface()\n\t}\n\n\treturn res, err\n}\n```\n调用的函数也写完了。但是在测试的时候发现一个问题，如果我的处理函数的参数是指针类型的，例如：\n```\nfunc (a *A) Create(args *Args) (err error){}\n```\n这个时候直接就panic了，然后参数不能被正常的写入。这个地方我们的做法是在注入参数的时候把指针类型转换成值类型，然后在取这个值类型的指针。\n\n```\n在 Call() 函数里面\n\nfor _, v := range method.Args {\n\tvar (\n\t\tresult interface{}\n\t\tval    reflect.Value\n\t)\n\n\t// 判断是不是指针类型，如果是指针类型那么就在先拿他的elem来new\n\t// 否则就直接 new\n\tif v.Kind() == reflect.Ptr {\n\t\tresult = reflect.New(v.Elem()).Elem().Interface()\n\t\tval = params.BindValuesToStruct(result, req, true).Addr()\n\t} else {\n\t\tresult = reflect.New(v).Elem().Interface()\n\t\tval = params.BindValuesToStruct(result, req, true)\n\t}\n\n\tin = append(in, val)\n}\n\n```\n这样就基本结束，当然这里面还是有一些问题：\n\n* 不支持函数的参数是 struct 以外的其他类型\n* =====\n\n如果有看不明白的可以直接留言。\n如果有出错的地方欢迎指正，相互学习。\n\n代码： [github](https://github.com/momaek/mdzz)\n","slug":"Golang-reflect-使用","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7b0005q0txwqwn9df4","content":"<p>reflect 一个神奇的 pkg</p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>这篇文章写的时候使用的Go版本：<code>go version go1.7.1 darwin/amd64</code></p>\n<p>先来说一下背景，最近要做的一个项目对外暴露两个 API ，然后根据参数里面的 action 字段来决定后面的处理代码。 </p>\n<p>首先想到的处理办法是：用一个 map 来存 action 和后面对应处理函数的关系，每次请求过来了就根据 map 里面的内容来决定。好，可以实现。听起来也比较简单，然后开始写代码。写了一段时间发现一个很坑爹的问题：<br>需要去维护一个 action 的 map 。有时候写完函数就忘记去添加到 map 里面了，就会出现 404 的错误，虽然知道是没有更新 map ，但是增加了开发的心里负担。然后在每个处理函数里面还需要去 parse 传过来的参数，是每个处理函数都要写一段基本相同的代码，就是下面这个东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A struct&#123;&#125;</span><br><span class=\"line\">type Args struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *A) Create(req *http.Request)(err error)&#123;</span><br><span class=\"line\">\targs := Args&#123;&#125;</span><br><span class=\"line\">\tparams.BindValuesToStruct(&amp;args, req) // 这个是自己写的一个函数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本每个地方都会有，而且还需要去生成一个 client + logger。这个东西完全可以不用开发处理函数的人来关注的。他们只需要注重业务细节就好了。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>接下来是如果改变这个东西，趁项目还不是很大，改起来还不是很麻烦。想到了用 reflect 包来解决这个问题。想到达到的效果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A struct&#123;&#125;</span><br><span class=\"line\">type Args struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *A) Create(args  Args) (err error)&#123;&#125;</span><br><span class=\"line\">// 需要的东西都在调用函数的之前搞定，函数里面就只专注业务，这个就把业务跟其他不相关的东西解耦了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>既然决定使用 reflect 包，那么我们就来先看下 <a href=\"https://golang.org/pkg/reflect\" target=\"_blank\" rel=\"noopener\">官方文档</a>(需要自己扶墙) </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reflect.TypeOf()</span><br><span class=\"line\">reflect.ValueOf()</span><br></pre></td></tr></table></figure>\n\n<p>两个简单的函数，<code>reflect.TypeOf</code> 和 <code>reflect.ValueOf</code>，返回被检查对象的类型和值。例如，x 被定义为：<code>var x float64 = 3.4</code>，那么 <code>reflect.TypeOf(x)</code> 返回 <code>float64</code>，<code>reflect.ValueOf(x)</code> 返回 <code>&lt;float64 Value&gt;</code>。</p>\n<p>从上面的代码可以看出来，我们的处理函数都是 <code>A</code> 的方法，为了不去手动维护那个坑爹的 <code>map</code>。我们需要自己自动获取 <code>A</code> 的方法。如果我们的 <code>action</code> 跟 <code>A</code> 的方法名字一样的话，我们就可以不用关注 <code>map</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typ := reflect.TypeOf(new(A))</span><br><span class=\"line\">typ.NumMethod // 这个返回 A 下面的方法数量，有了这个我们就可以知道 A 下面有多少方法了。 那么要怎么拿到这些方法呢？</span><br><span class=\"line\"></span><br><span class=\"line\">typ.Method(i) // 这个函数返回 A 下面的第 i 个方法，返回值是 reflect.Method </span><br><span class=\"line\"></span><br><span class=\"line\">reflect 包里面 Method 的定义：</span><br><span class=\"line\">type Method struct &#123;</span><br><span class=\"line\">\t// Name is the method name.</span><br><span class=\"line\">\t// PkgPath is the package path that qualifies a lower case (unexported)</span><br><span class=\"line\">\t// method name. It is empty for upper case (exported) method names.</span><br><span class=\"line\">\t// The combination of PkgPath and Name uniquely identifies a method</span><br><span class=\"line\">\t// in a method set.</span><br><span class=\"line\">\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span><br><span class=\"line\">\tName    string</span><br><span class=\"line\">\tPkgPath string</span><br><span class=\"line\"></span><br><span class=\"line\">\tType  Type  // method type</span><br><span class=\"line\">\tFunc  Value // func with receiver as first argument 这条很重要</span><br><span class=\"line\">\tIndex int   // index for Type.Method</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们已经知道如何拿到一个 <code>struct</code> 下面的方法了。现在我们需要把这些方法存起来，存到一个 map 里面(不要怕，这个不需要手动维护，这个是程序直接做掉的)，直接来看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处我实现一个并发安全的map,实现了 Get,Set,Delete,Has 方法目前已经足够使用</span><br><span class=\"line\">// 如果想知道如何做，自行 Google 已经有很多了</span><br><span class=\"line\">type SafetyMap struct&#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\titem map[string]interface&#123;&#125; // action 的值就是map的key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个是我们的主体，他的功能类似于 Mux ，所以我们就叫它 Mux</span><br><span class=\"line\">type Mux struct&#123;</span><br><span class=\"line\">\tm *SafetyMap</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Method struct&#123;</span><br><span class=\"line\">\tmethod reflect.Method // 这个是存 method</span><br><span class=\"line\">\targs []reflect.Type // 这个存 method 对应的参数的 Type</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewMux() *Mux&#123;</span><br><span class=\"line\">\treturn &amp;Mux&#123;</span><br><span class=\"line\">\t\tm: NewSafetyMap(), // 这个我在其他地方做掉了</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (mux *Mux) Register(rcvr interface&#123;&#125;) &#123;</span><br><span class=\"line\">\ttyp := reflect.TypeOf(rcvr) // 获取 rcvr 的Type</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; typ.NumMethod(); i++ &#123;</span><br><span class=\"line\">\t\tmethod := typ.Method(i)</span><br><span class=\"line\">\t\tmt := method.Type</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnOut := mt.NumOut() // 函数的返回值，如果返回值里面没有error那么直接panic</span><br><span class=\"line\">\t\tif nOut &lt; 1 &#123;</span><br><span class=\"line\">\t\t\tpanic(fmt.Sprintf(&quot;%s return final output param must be error interface&quot;, method.Name))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_, ok := mt.Out(nOut - 1).MethodByName(&quot;Error&quot;) // 返回值的最后一个参数必须为 error</span><br><span class=\"line\">\t\tif !ok &#123;</span><br><span class=\"line\">\t\t\tpanic(fmt.Sprintf(&quot;%s return final output param must be error interface&quot;, method.Name))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm := Method&#123;&#125;</span><br><span class=\"line\">\t\tm.method = method</span><br><span class=\"line\">\t\targs := []reflect.Type&#123;&#125;</span><br><span class=\"line\">\t\tfor p := 1; p &lt; mt.NumIn(); p++ &#123; // 函数的参数</span><br><span class=\"line\">\t\t\targs = append(args, mt.In(p)) // 参数必须跟本身函数参数的顺序相同，否则在调用函数的时候会出错</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmux.m.Set(method.Name, m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们就把自动生成 <code>map</code> 的是事情做完了。<br>接下来我们来写调用函数处理的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (mux *Mux) Call(key string, rcvr interface&#123;&#125;, req *http.Request) (interface&#123;&#125;, error) &#123;</span><br><span class=\"line\">\tsafem, ok := mux.m.Get(key) // 获取到safemap的value</span><br><span class=\"line\">\tif !ok &#123;</span><br><span class=\"line\">\t\treturn nil, NotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmethod, ok := safem.(Method) // 断言一下 value 的类型看是不是我们想要的Method类型</span><br><span class=\"line\">\tif !ok &#123;</span><br><span class=\"line\">\t\treturn nil, NotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tin := []reflect.Value&#123;&#125; // 调用函数的时候需要用到的参数列表</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 第一个参数必须要是这个函数的rcvr，在reflect包的Method结构体里面有说这点，如果没有这做，程序会直接panic</span><br><span class=\"line\">\t// panic: reflect: Call with too few input arguments </span><br><span class=\"line\">\t// 当时出现这个问题，我查了好久没有发现问题，然后看reflect包 Method的时候发现了这点</span><br><span class=\"line\">\t// 这个的 rcvr 我们可以把一些需要用的东西提前准备好传进去，就不用在函数内部做这些事情了</span><br><span class=\"line\">\tin = append(in, reflect.ValueOf(rcvr)) </span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 拿到刚刚注册好的函数的参数</span><br><span class=\"line\">\t// 按照顺序把参数</span><br><span class=\"line\">\tfor _, v := range method.Args &#123;</span><br><span class=\"line\">\t\tvar (</span><br><span class=\"line\">\t\t\tresult interface&#123;&#125;</span><br><span class=\"line\">\t\t\tval    reflect.Value</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// reflect.New() 会返回指定类型的一个空值的指针 reflect.Value，</span><br><span class=\"line\">\t\t// 根据上面的例子 这个会返回值的 type： *Args，type 的 Kind 是 reflect.Ptr</span><br><span class=\"line\">\t\t// 该 type‘s Kind 是 reflect.Ptr 的 Elem() 方法会对应指针类型的值类型的 reflect.Value</span><br><span class=\"line\">\t\t// reflect.Value 的 Interface() 方法是把该 Value 转成一个 interface</span><br><span class=\"line\">\t\tresult = reflect.New(v).Elem().Interface()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 这个 BindValuesToStruct 是在其他地方实现的，也是通过反射实现的，这个后面再来讲</span><br><span class=\"line\">\t\t// 只需要知道这个函数会返回一个 reflect.Value 类型的值，而这个东西已经包含了传过来的参数</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tin = append(in, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 这个地方就是直接调用 Method 的 Func 属性下面的 Call() 方法，然后把参数传进去</span><br><span class=\"line\">\t// 返回值是一个 []reflect.Value 类型</span><br><span class=\"line\">\tret := method.Method.Func.Call(in)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t// 这个地方我们需要解析出来最后一个 err 和 返回的结构体 默认就只有两个参数，其他的参数会被丢掉</span><br><span class=\"line\">\tretLength := len(ret)</span><br><span class=\"line\">\tvar (</span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t\tres interface&#123;&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 因为我们在register里面强制要求了必须要有返回值而且最后一个返回值是 error，所以这个地方理论上讲是不会出现数组越界的</span><br><span class=\"line\">\terr, _ = ret[retLength-1].Interface().(error)</span><br><span class=\"line\">\tif retLength &gt; 1 &#123;</span><br><span class=\"line\">\t\tres = ret[0].Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn res, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用的函数也写完了。但是在测试的时候发现一个问题，如果我的处理函数的参数是指针类型的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (a *A) Create(args *Args) (err error)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候直接就panic了，然后参数不能被正常的写入。这个地方我们的做法是在注入参数的时候把指针类型转换成值类型，然后在取这个值类型的指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Call() 函数里面</span><br><span class=\"line\"></span><br><span class=\"line\">for _, v := range method.Args &#123;</span><br><span class=\"line\">\tvar (</span><br><span class=\"line\">\t\tresult interface&#123;&#125;</span><br><span class=\"line\">\t\tval    reflect.Value</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 判断是不是指针类型，如果是指针类型那么就在先拿他的elem来new</span><br><span class=\"line\">\t// 否则就直接 new</span><br><span class=\"line\">\tif v.Kind() == reflect.Ptr &#123;</span><br><span class=\"line\">\t\tresult = reflect.New(v.Elem()).Elem().Interface()</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true).Addr()</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tresult = reflect.New(v).Elem().Interface()</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tin = append(in, val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就基本结束，当然这里面还是有一些问题：</p>\n<ul>\n<li>不支持函数的参数是 struct 以外的其他类型</li>\n<li>=====</li>\n</ul>\n<p>如果有看不明白的可以直接留言。<br>如果有出错的地方欢迎指正，相互学习。</p>\n<p>代码： <a href=\"https://github.com/momaek/mdzz\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"<p>reflect 一个神奇的 pkg</p>","more":"<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>这篇文章写的时候使用的Go版本：<code>go version go1.7.1 darwin/amd64</code></p>\n<p>先来说一下背景，最近要做的一个项目对外暴露两个 API ，然后根据参数里面的 action 字段来决定后面的处理代码。 </p>\n<p>首先想到的处理办法是：用一个 map 来存 action 和后面对应处理函数的关系，每次请求过来了就根据 map 里面的内容来决定。好，可以实现。听起来也比较简单，然后开始写代码。写了一段时间发现一个很坑爹的问题：<br>需要去维护一个 action 的 map 。有时候写完函数就忘记去添加到 map 里面了，就会出现 404 的错误，虽然知道是没有更新 map ，但是增加了开发的心里负担。然后在每个处理函数里面还需要去 parse 传过来的参数，是每个处理函数都要写一段基本相同的代码，就是下面这个东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A struct&#123;&#125;</span><br><span class=\"line\">type Args struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *A) Create(req *http.Request)(err error)&#123;</span><br><span class=\"line\">\targs := Args&#123;&#125;</span><br><span class=\"line\">\tparams.BindValuesToStruct(&amp;args, req) // 这个是自己写的一个函数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本每个地方都会有，而且还需要去生成一个 client + logger。这个东西完全可以不用开发处理函数的人来关注的。他们只需要注重业务细节就好了。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>接下来是如果改变这个东西，趁项目还不是很大，改起来还不是很麻烦。想到了用 reflect 包来解决这个问题。想到达到的效果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type A struct&#123;&#125;</span><br><span class=\"line\">type Args struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *A) Create(args  Args) (err error)&#123;&#125;</span><br><span class=\"line\">// 需要的东西都在调用函数的之前搞定，函数里面就只专注业务，这个就把业务跟其他不相关的东西解耦了</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>既然决定使用 reflect 包，那么我们就来先看下 <a href=\"https://golang.org/pkg/reflect\" target=\"_blank\" rel=\"noopener\">官方文档</a>(需要自己扶墙) </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reflect.TypeOf()</span><br><span class=\"line\">reflect.ValueOf()</span><br></pre></td></tr></table></figure>\n\n<p>两个简单的函数，<code>reflect.TypeOf</code> 和 <code>reflect.ValueOf</code>，返回被检查对象的类型和值。例如，x 被定义为：<code>var x float64 = 3.4</code>，那么 <code>reflect.TypeOf(x)</code> 返回 <code>float64</code>，<code>reflect.ValueOf(x)</code> 返回 <code>&lt;float64 Value&gt;</code>。</p>\n<p>从上面的代码可以看出来，我们的处理函数都是 <code>A</code> 的方法，为了不去手动维护那个坑爹的 <code>map</code>。我们需要自己自动获取 <code>A</code> 的方法。如果我们的 <code>action</code> 跟 <code>A</code> 的方法名字一样的话，我们就可以不用关注 <code>map</code> 了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typ := reflect.TypeOf(new(A))</span><br><span class=\"line\">typ.NumMethod // 这个返回 A 下面的方法数量，有了这个我们就可以知道 A 下面有多少方法了。 那么要怎么拿到这些方法呢？</span><br><span class=\"line\"></span><br><span class=\"line\">typ.Method(i) // 这个函数返回 A 下面的第 i 个方法，返回值是 reflect.Method </span><br><span class=\"line\"></span><br><span class=\"line\">reflect 包里面 Method 的定义：</span><br><span class=\"line\">type Method struct &#123;</span><br><span class=\"line\">\t// Name is the method name.</span><br><span class=\"line\">\t// PkgPath is the package path that qualifies a lower case (unexported)</span><br><span class=\"line\">\t// method name. It is empty for upper case (exported) method names.</span><br><span class=\"line\">\t// The combination of PkgPath and Name uniquely identifies a method</span><br><span class=\"line\">\t// in a method set.</span><br><span class=\"line\">\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span><br><span class=\"line\">\tName    string</span><br><span class=\"line\">\tPkgPath string</span><br><span class=\"line\"></span><br><span class=\"line\">\tType  Type  // method type</span><br><span class=\"line\">\tFunc  Value // func with receiver as first argument 这条很重要</span><br><span class=\"line\">\tIndex int   // index for Type.Method</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们已经知道如何拿到一个 <code>struct</code> 下面的方法了。现在我们需要把这些方法存起来，存到一个 map 里面(不要怕，这个不需要手动维护，这个是程序直接做掉的)，直接来看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 此处我实现一个并发安全的map,实现了 Get,Set,Delete,Has 方法目前已经足够使用</span><br><span class=\"line\">// 如果想知道如何做，自行 Google 已经有很多了</span><br><span class=\"line\">type SafetyMap struct&#123;</span><br><span class=\"line\">\tsync.RWMutex</span><br><span class=\"line\">\titem map[string]interface&#123;&#125; // action 的值就是map的key</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个是我们的主体，他的功能类似于 Mux ，所以我们就叫它 Mux</span><br><span class=\"line\">type Mux struct&#123;</span><br><span class=\"line\">\tm *SafetyMap</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Method struct&#123;</span><br><span class=\"line\">\tmethod reflect.Method // 这个是存 method</span><br><span class=\"line\">\targs []reflect.Type // 这个存 method 对应的参数的 Type</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewMux() *Mux&#123;</span><br><span class=\"line\">\treturn &amp;Mux&#123;</span><br><span class=\"line\">\t\tm: NewSafetyMap(), // 这个我在其他地方做掉了</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (mux *Mux) Register(rcvr interface&#123;&#125;) &#123;</span><br><span class=\"line\">\ttyp := reflect.TypeOf(rcvr) // 获取 rcvr 的Type</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; typ.NumMethod(); i++ &#123;</span><br><span class=\"line\">\t\tmethod := typ.Method(i)</span><br><span class=\"line\">\t\tmt := method.Type</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnOut := mt.NumOut() // 函数的返回值，如果返回值里面没有error那么直接panic</span><br><span class=\"line\">\t\tif nOut &lt; 1 &#123;</span><br><span class=\"line\">\t\t\tpanic(fmt.Sprintf(&quot;%s return final output param must be error interface&quot;, method.Name))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_, ok := mt.Out(nOut - 1).MethodByName(&quot;Error&quot;) // 返回值的最后一个参数必须为 error</span><br><span class=\"line\">\t\tif !ok &#123;</span><br><span class=\"line\">\t\t\tpanic(fmt.Sprintf(&quot;%s return final output param must be error interface&quot;, method.Name))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm := Method&#123;&#125;</span><br><span class=\"line\">\t\tm.method = method</span><br><span class=\"line\">\t\targs := []reflect.Type&#123;&#125;</span><br><span class=\"line\">\t\tfor p := 1; p &lt; mt.NumIn(); p++ &#123; // 函数的参数</span><br><span class=\"line\">\t\t\targs = append(args, mt.In(p)) // 参数必须跟本身函数参数的顺序相同，否则在调用函数的时候会出错</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmux.m.Set(method.Name, m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们就把自动生成 <code>map</code> 的是事情做完了。<br>接下来我们来写调用函数处理的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (mux *Mux) Call(key string, rcvr interface&#123;&#125;, req *http.Request) (interface&#123;&#125;, error) &#123;</span><br><span class=\"line\">\tsafem, ok := mux.m.Get(key) // 获取到safemap的value</span><br><span class=\"line\">\tif !ok &#123;</span><br><span class=\"line\">\t\treturn nil, NotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmethod, ok := safem.(Method) // 断言一下 value 的类型看是不是我们想要的Method类型</span><br><span class=\"line\">\tif !ok &#123;</span><br><span class=\"line\">\t\treturn nil, NotFound</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tin := []reflect.Value&#123;&#125; // 调用函数的时候需要用到的参数列表</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 第一个参数必须要是这个函数的rcvr，在reflect包的Method结构体里面有说这点，如果没有这做，程序会直接panic</span><br><span class=\"line\">\t// panic: reflect: Call with too few input arguments </span><br><span class=\"line\">\t// 当时出现这个问题，我查了好久没有发现问题，然后看reflect包 Method的时候发现了这点</span><br><span class=\"line\">\t// 这个的 rcvr 我们可以把一些需要用的东西提前准备好传进去，就不用在函数内部做这些事情了</span><br><span class=\"line\">\tin = append(in, reflect.ValueOf(rcvr)) </span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 拿到刚刚注册好的函数的参数</span><br><span class=\"line\">\t// 按照顺序把参数</span><br><span class=\"line\">\tfor _, v := range method.Args &#123;</span><br><span class=\"line\">\t\tvar (</span><br><span class=\"line\">\t\t\tresult interface&#123;&#125;</span><br><span class=\"line\">\t\t\tval    reflect.Value</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// reflect.New() 会返回指定类型的一个空值的指针 reflect.Value，</span><br><span class=\"line\">\t\t// 根据上面的例子 这个会返回值的 type： *Args，type 的 Kind 是 reflect.Ptr</span><br><span class=\"line\">\t\t// 该 type‘s Kind 是 reflect.Ptr 的 Elem() 方法会对应指针类型的值类型的 reflect.Value</span><br><span class=\"line\">\t\t// reflect.Value 的 Interface() 方法是把该 Value 转成一个 interface</span><br><span class=\"line\">\t\tresult = reflect.New(v).Elem().Interface()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 这个 BindValuesToStruct 是在其他地方实现的，也是通过反射实现的，这个后面再来讲</span><br><span class=\"line\">\t\t// 只需要知道这个函数会返回一个 reflect.Value 类型的值，而这个东西已经包含了传过来的参数</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tin = append(in, val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 这个地方就是直接调用 Method 的 Func 属性下面的 Call() 方法，然后把参数传进去</span><br><span class=\"line\">\t// 返回值是一个 []reflect.Value 类型</span><br><span class=\"line\">\tret := method.Method.Func.Call(in)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t// 这个地方我们需要解析出来最后一个 err 和 返回的结构体 默认就只有两个参数，其他的参数会被丢掉</span><br><span class=\"line\">\tretLength := len(ret)</span><br><span class=\"line\">\tvar (</span><br><span class=\"line\">\t\terr error</span><br><span class=\"line\">\t\tres interface&#123;&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 因为我们在register里面强制要求了必须要有返回值而且最后一个返回值是 error，所以这个地方理论上讲是不会出现数组越界的</span><br><span class=\"line\">\terr, _ = ret[retLength-1].Interface().(error)</span><br><span class=\"line\">\tif retLength &gt; 1 &#123;</span><br><span class=\"line\">\t\tres = ret[0].Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn res, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用的函数也写完了。但是在测试的时候发现一个问题，如果我的处理函数的参数是指针类型的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (a *A) Create(args *Args) (err error)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候直接就panic了，然后参数不能被正常的写入。这个地方我们的做法是在注入参数的时候把指针类型转换成值类型，然后在取这个值类型的指针。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Call() 函数里面</span><br><span class=\"line\"></span><br><span class=\"line\">for _, v := range method.Args &#123;</span><br><span class=\"line\">\tvar (</span><br><span class=\"line\">\t\tresult interface&#123;&#125;</span><br><span class=\"line\">\t\tval    reflect.Value</span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 判断是不是指针类型，如果是指针类型那么就在先拿他的elem来new</span><br><span class=\"line\">\t// 否则就直接 new</span><br><span class=\"line\">\tif v.Kind() == reflect.Ptr &#123;</span><br><span class=\"line\">\t\tresult = reflect.New(v.Elem()).Elem().Interface()</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true).Addr()</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tresult = reflect.New(v).Elem().Interface()</span><br><span class=\"line\">\t\tval = params.BindValuesToStruct(result, req, true)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tin = append(in, val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就基本结束，当然这里面还是有一些问题：</p>\n<ul>\n<li>不支持函数的参数是 struct 以外的其他类型</li>\n<li>=====</li>\n</ul>\n<p>如果有看不明白的可以直接留言。<br>如果有出错的地方欢迎指正，相互学习。</p>\n<p>代码： <a href=\"https://github.com/momaek/mdzz\" target=\"_blank\" rel=\"noopener\">github</a></p>"},{"title":"I Do","date":"2016-10-20T01:01:22.000Z","photos":["https://oa7ktymto.qnssl.com/pic.png"],"_content":"Something, Someone.\n\n<!-- more -->\n\n记得那年的秋天\n相约一个微凉的海边\n如童话的情节 浮现在眼前\n重拾那年的遗缺\n不再让我走得好缓慢 I do\n我愿意承担\n厌倦一个人 晚餐\n就算 粗茶淡饭\n原来有你 的陪伴\n日子过得灿烂\n幻想着幸福的图案\n美满 少一段\n依然是 孤独和弦\n我想我会愿意接受挑战\n\n就在今年的冬天\n故事将有不同的起点\n已做好了准备 依偎在身边\n当陪伴变成了老伴\n餐桌摆设 再也不孤单 我愿\n浪漫到永远\n习惯有你在身边\n未来故事情节\n一起领衔来主演\n最佳男女演员\n你就像颗钻石一般\n闪烁 每一天\n温暖着 彼此 笑脸\n拥抱 相约相守到天边\n习惯有你在身边\n未来故事情节\n一起领衔来主演\n最佳男女演员\n你就像颗钻石一般\n闪烁 每一天\n温暖着 彼此 笑脸\n拥抱 相约相守 直到天边\n\n终于来到了春天\n从此为你 隔绝思念\n我愿 这一生 爱着你不变\n\n---\n\n由于版权原因，不能从网易放外链过来。\n我们来听一听哥哥的四季吧\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=187341&auto=1&height=32\"></iframe>\n\n感受哥哥和Eason不一样的四季变换\n\n\n","source":"_posts/I-DO.md","raw":"---\ntitle: I Do\ndate: 2016-10-20 09:01:22\ntags:\n\t- 诗\n\t- 词\n\t- 歌\n\t- 赋\nphotos:\n \t- https://oa7ktymto.qnssl.com/pic.png\n---\nSomething, Someone.\n\n<!-- more -->\n\n记得那年的秋天\n相约一个微凉的海边\n如童话的情节 浮现在眼前\n重拾那年的遗缺\n不再让我走得好缓慢 I do\n我愿意承担\n厌倦一个人 晚餐\n就算 粗茶淡饭\n原来有你 的陪伴\n日子过得灿烂\n幻想着幸福的图案\n美满 少一段\n依然是 孤独和弦\n我想我会愿意接受挑战\n\n就在今年的冬天\n故事将有不同的起点\n已做好了准备 依偎在身边\n当陪伴变成了老伴\n餐桌摆设 再也不孤单 我愿\n浪漫到永远\n习惯有你在身边\n未来故事情节\n一起领衔来主演\n最佳男女演员\n你就像颗钻石一般\n闪烁 每一天\n温暖着 彼此 笑脸\n拥抱 相约相守到天边\n习惯有你在身边\n未来故事情节\n一起领衔来主演\n最佳男女演员\n你就像颗钻石一般\n闪烁 每一天\n温暖着 彼此 笑脸\n拥抱 相约相守 直到天边\n\n终于来到了春天\n从此为你 隔绝思念\n我愿 这一生 爱着你不变\n\n---\n\n由于版权原因，不能从网易放外链过来。\n我们来听一听哥哥的四季吧\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=187341&auto=1&height=32\"></iframe>\n\n感受哥哥和Eason不一样的四季变换\n\n\n","slug":"I-DO","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7c0006q0tx9flb9kz5","content":"<p>Something, Someone.</p>\n<a id=\"more\"></a>\n\n<p>记得那年的秋天<br>相约一个微凉的海边<br>如童话的情节 浮现在眼前<br>重拾那年的遗缺<br>不再让我走得好缓慢 I do<br>我愿意承担<br>厌倦一个人 晚餐<br>就算 粗茶淡饭<br>原来有你 的陪伴<br>日子过得灿烂<br>幻想着幸福的图案<br>美满 少一段<br>依然是 孤独和弦<br>我想我会愿意接受挑战</p>\n<p>就在今年的冬天<br>故事将有不同的起点<br>已做好了准备 依偎在身边<br>当陪伴变成了老伴<br>餐桌摆设 再也不孤单 我愿<br>浪漫到永远<br>习惯有你在身边<br>未来故事情节<br>一起领衔来主演<br>最佳男女演员<br>你就像颗钻石一般<br>闪烁 每一天<br>温暖着 彼此 笑脸<br>拥抱 相约相守到天边<br>习惯有你在身边<br>未来故事情节<br>一起领衔来主演<br>最佳男女演员<br>你就像颗钻石一般<br>闪烁 每一天<br>温暖着 彼此 笑脸<br>拥抱 相约相守 直到天边</p>\n<p>终于来到了春天<br>从此为你 隔绝思念<br>我愿 这一生 爱着你不变</p>\n<hr>\n<p>由于版权原因，不能从网易放外链过来。<br>我们来听一听哥哥的四季吧</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=187341&auto=1&height=32\"></iframe>\n\n<p>感受哥哥和Eason不一样的四季变换</p>\n","site":{"data":{}},"excerpt":"<p>Something, Someone.</p>","more":"<p>记得那年的秋天<br>相约一个微凉的海边<br>如童话的情节 浮现在眼前<br>重拾那年的遗缺<br>不再让我走得好缓慢 I do<br>我愿意承担<br>厌倦一个人 晚餐<br>就算 粗茶淡饭<br>原来有你 的陪伴<br>日子过得灿烂<br>幻想着幸福的图案<br>美满 少一段<br>依然是 孤独和弦<br>我想我会愿意接受挑战</p>\n<p>就在今年的冬天<br>故事将有不同的起点<br>已做好了准备 依偎在身边<br>当陪伴变成了老伴<br>餐桌摆设 再也不孤单 我愿<br>浪漫到永远<br>习惯有你在身边<br>未来故事情节<br>一起领衔来主演<br>最佳男女演员<br>你就像颗钻石一般<br>闪烁 每一天<br>温暖着 彼此 笑脸<br>拥抱 相约相守到天边<br>习惯有你在身边<br>未来故事情节<br>一起领衔来主演<br>最佳男女演员<br>你就像颗钻石一般<br>闪烁 每一天<br>温暖着 彼此 笑脸<br>拥抱 相约相守 直到天边</p>\n<p>终于来到了春天<br>从此为你 隔绝思念<br>我愿 这一生 爱着你不变</p>\n<hr>\n<p>由于版权原因，不能从网易放外链过来。<br>我们来听一听哥哥的四季吧</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=187341&auto=1&height=32\"></iframe>\n\n<p>感受哥哥和Eason不一样的四季变换</p>"},{"title":"Pale Blue Dot","date":"2016-10-26T05:25:36.000Z","photos":["https://oa7ktymto.qnssl.com/blue_dot.jpeg"],"_content":"\n先来看一段视频，来自 [Youtube](https://www.youtube.com)。 需要梯子\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kx79tLEpMDE\" frameborder=\"0\" allowfullscreen></iframe>\n\n---\n\n1994年，著名的美国科普作家卡尔·萨根（Carl Sagan）有感而发，写了一篇短文《黯淡的蓝点》（pale blue dot）。\n\n---\nLook again at that dot. That's here. That's home. That's us.\n\n再仔细看看那个小点。就是这里，就是我们的家，就是我们。\n\nOn it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives.\n\n在这点上每个你爱的人、每个你认识的人、每个你曾经听过的人，以及每个曾经存在的人，都在那里过完一生。\n\nThe aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every \"superstar,\" every \"supreme leader,\" every saint and sinner in the history of our species lived there--on a mote of dust suspended in a sunbeam.\n\n这里集合了一切的欢喜与苦难，数千个自信的宗教、意识形态以及经济学说，每个猎人和搜寻者、每个英雄和懦夫、每个文明的创造者与毁灭者、每个国王与农夫、每对相恋中的年轻爱侣、每个充满希望的孩子、每对父母、发明家和探险家，每个教授道德的老师、每个贪污政客、每个超级巨星、每个至高无上的领袖、每个人类历史上的圣人与罪人，都住在这里——一粒悬浮在阳光下的微尘。\n\nThe Earth is a very small stage in a vast cosmic arena. Think of the rivers of blood spilled by all those generals and emperors so that in glory and triumph they could become the momentary masters of a fraction of a dot. Think of the endless cruelties visited by the inhabitants of one corner of this pixel on the scarcely distinguishable inhabitants of some other corner. How frequent their misunderstandings, how eager they are to kill one another, how fervent their hatreds.\n\n地球是这个浩瀚宇宙剧院里的一个小小舞台。想想从那些将令们和皇帝们那里溢出的血河，他们的光荣与胜利只为了让他们成为了这一点上一小部分的短暂主宰。想想栖身在这点上一个角落的人正受着万般苦楚，而在几乎不能区分的同一点上的另外一个角落里亦同时栖身了另一批人。他们有多时常发生误解？他们有多渴望杀了对方？他们的敌意有多热烈？\n\nOur posturings, our imagined self-importance, the delusion that we have some privileged position in the universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity – in all this vastness – there is no hint that help will come from elsewhere to save us from ourselves.\n\n我们的装模作样，我们的自以为是，我们的错觉以为自己在宇宙里的位置有多优越，都被这暗淡的光点所挑战。我们的星球只是在这被漆黑包裹的宇宙里一粒孤单的微粒而已。我们是如此的不起眼——在这浩瀚之中，我们不会从任何地方得到提示去拯救我们自身。\n\nThe Earth is the only world known, so far, to harbor life. There is nowhere else, at least in the near future, to which our species could migrate. Visit, yes. Settle, not yet. Like it or not, for the moment, the Earth is where we make our stand. It has been said that astronomy is a humbling and character-building experience. There is perhaps no better demonstration of the folly of human conceits than this distant image of our tiny world. To me, it underscores our responsibility to deal more kindly with one another and to preserve and cherish the pale blue dot, the only home we've ever known.\n\n地球是迄今为止唯一的栖身之所。至少在可见的未来，人类别无他处可供迁徙。去访问，没问题；去定居，还不行。好恶与否，仅就当前，地球仍是我们的大本营。一直有人说天文学是令人谦卑，同时也是塑造性格的学问。对我来说，希望没有比这张从远处拍摄我们微小世界的照片更好的示范，去展示人类自大的愚蠢。对我来说，这意味着我们有责任更加友善地关怀彼此，保护和珍惜这暗淡蓝点——这个我们目前所知唯一的家园。\n\n---\n\n地球其实只是浩瀚星空中一个毫不起眼的存在\n\nDon't give up on your dreams, keep sleeping","source":"_posts/Pale-Blue-Dot.md","raw":"---\ntitle: Pale Blue Dot\ndate: 2016-10-26 13:25:36\ntags:\n\t- Space\nphotos:\n\t- https://oa7ktymto.qnssl.com/blue_dot.jpeg\n---\n\n先来看一段视频，来自 [Youtube](https://www.youtube.com)。 需要梯子\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kx79tLEpMDE\" frameborder=\"0\" allowfullscreen></iframe>\n\n---\n\n1994年，著名的美国科普作家卡尔·萨根（Carl Sagan）有感而发，写了一篇短文《黯淡的蓝点》（pale blue dot）。\n\n---\nLook again at that dot. That's here. That's home. That's us.\n\n再仔细看看那个小点。就是这里，就是我们的家，就是我们。\n\nOn it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives.\n\n在这点上每个你爱的人、每个你认识的人、每个你曾经听过的人，以及每个曾经存在的人，都在那里过完一生。\n\nThe aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every \"superstar,\" every \"supreme leader,\" every saint and sinner in the history of our species lived there--on a mote of dust suspended in a sunbeam.\n\n这里集合了一切的欢喜与苦难，数千个自信的宗教、意识形态以及经济学说，每个猎人和搜寻者、每个英雄和懦夫、每个文明的创造者与毁灭者、每个国王与农夫、每对相恋中的年轻爱侣、每个充满希望的孩子、每对父母、发明家和探险家，每个教授道德的老师、每个贪污政客、每个超级巨星、每个至高无上的领袖、每个人类历史上的圣人与罪人，都住在这里——一粒悬浮在阳光下的微尘。\n\nThe Earth is a very small stage in a vast cosmic arena. Think of the rivers of blood spilled by all those generals and emperors so that in glory and triumph they could become the momentary masters of a fraction of a dot. Think of the endless cruelties visited by the inhabitants of one corner of this pixel on the scarcely distinguishable inhabitants of some other corner. How frequent their misunderstandings, how eager they are to kill one another, how fervent their hatreds.\n\n地球是这个浩瀚宇宙剧院里的一个小小舞台。想想从那些将令们和皇帝们那里溢出的血河，他们的光荣与胜利只为了让他们成为了这一点上一小部分的短暂主宰。想想栖身在这点上一个角落的人正受着万般苦楚，而在几乎不能区分的同一点上的另外一个角落里亦同时栖身了另一批人。他们有多时常发生误解？他们有多渴望杀了对方？他们的敌意有多热烈？\n\nOur posturings, our imagined self-importance, the delusion that we have some privileged position in the universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity – in all this vastness – there is no hint that help will come from elsewhere to save us from ourselves.\n\n我们的装模作样，我们的自以为是，我们的错觉以为自己在宇宙里的位置有多优越，都被这暗淡的光点所挑战。我们的星球只是在这被漆黑包裹的宇宙里一粒孤单的微粒而已。我们是如此的不起眼——在这浩瀚之中，我们不会从任何地方得到提示去拯救我们自身。\n\nThe Earth is the only world known, so far, to harbor life. There is nowhere else, at least in the near future, to which our species could migrate. Visit, yes. Settle, not yet. Like it or not, for the moment, the Earth is where we make our stand. It has been said that astronomy is a humbling and character-building experience. There is perhaps no better demonstration of the folly of human conceits than this distant image of our tiny world. To me, it underscores our responsibility to deal more kindly with one another and to preserve and cherish the pale blue dot, the only home we've ever known.\n\n地球是迄今为止唯一的栖身之所。至少在可见的未来，人类别无他处可供迁徙。去访问，没问题；去定居，还不行。好恶与否，仅就当前，地球仍是我们的大本营。一直有人说天文学是令人谦卑，同时也是塑造性格的学问。对我来说，希望没有比这张从远处拍摄我们微小世界的照片更好的示范，去展示人类自大的愚蠢。对我来说，这意味着我们有责任更加友善地关怀彼此，保护和珍惜这暗淡蓝点——这个我们目前所知唯一的家园。\n\n---\n\n地球其实只是浩瀚星空中一个毫不起眼的存在\n\nDon't give up on your dreams, keep sleeping","slug":"Pale-Blue-Dot","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7d0007q0txkf9ep0l0","content":"<p>先来看一段视频，来自 <a href=\"https://www.youtube.com\" target=\"_blank\" rel=\"noopener\">Youtube</a>。 需要梯子</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kx79tLEpMDE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<p>1994年，著名的美国科普作家卡尔·萨根（Carl Sagan）有感而发，写了一篇短文《黯淡的蓝点》（pale blue dot）。</p>\n<hr>\n<p>Look again at that dot. That’s here. That’s home. That’s us.</p>\n<p>再仔细看看那个小点。就是这里，就是我们的家，就是我们。</p>\n<p>On it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives.</p>\n<p>在这点上每个你爱的人、每个你认识的人、每个你曾经听过的人，以及每个曾经存在的人，都在那里过完一生。</p>\n<p>The aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every “superstar,” every “supreme leader,” every saint and sinner in the history of our species lived there–on a mote of dust suspended in a sunbeam.</p>\n<p>这里集合了一切的欢喜与苦难，数千个自信的宗教、意识形态以及经济学说，每个猎人和搜寻者、每个英雄和懦夫、每个文明的创造者与毁灭者、每个国王与农夫、每对相恋中的年轻爱侣、每个充满希望的孩子、每对父母、发明家和探险家，每个教授道德的老师、每个贪污政客、每个超级巨星、每个至高无上的领袖、每个人类历史上的圣人与罪人，都住在这里——一粒悬浮在阳光下的微尘。</p>\n<p>The Earth is a very small stage in a vast cosmic arena. Think of the rivers of blood spilled by all those generals and emperors so that in glory and triumph they could become the momentary masters of a fraction of a dot. Think of the endless cruelties visited by the inhabitants of one corner of this pixel on the scarcely distinguishable inhabitants of some other corner. How frequent their misunderstandings, how eager they are to kill one another, how fervent their hatreds.</p>\n<p>地球是这个浩瀚宇宙剧院里的一个小小舞台。想想从那些将令们和皇帝们那里溢出的血河，他们的光荣与胜利只为了让他们成为了这一点上一小部分的短暂主宰。想想栖身在这点上一个角落的人正受着万般苦楚，而在几乎不能区分的同一点上的另外一个角落里亦同时栖身了另一批人。他们有多时常发生误解？他们有多渴望杀了对方？他们的敌意有多热烈？</p>\n<p>Our posturings, our imagined self-importance, the delusion that we have some privileged position in the universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity – in all this vastness – there is no hint that help will come from elsewhere to save us from ourselves.</p>\n<p>我们的装模作样，我们的自以为是，我们的错觉以为自己在宇宙里的位置有多优越，都被这暗淡的光点所挑战。我们的星球只是在这被漆黑包裹的宇宙里一粒孤单的微粒而已。我们是如此的不起眼——在这浩瀚之中，我们不会从任何地方得到提示去拯救我们自身。</p>\n<p>The Earth is the only world known, so far, to harbor life. There is nowhere else, at least in the near future, to which our species could migrate. Visit, yes. Settle, not yet. Like it or not, for the moment, the Earth is where we make our stand. It has been said that astronomy is a humbling and character-building experience. There is perhaps no better demonstration of the folly of human conceits than this distant image of our tiny world. To me, it underscores our responsibility to deal more kindly with one another and to preserve and cherish the pale blue dot, the only home we’ve ever known.</p>\n<p>地球是迄今为止唯一的栖身之所。至少在可见的未来，人类别无他处可供迁徙。去访问，没问题；去定居，还不行。好恶与否，仅就当前，地球仍是我们的大本营。一直有人说天文学是令人谦卑，同时也是塑造性格的学问。对我来说，希望没有比这张从远处拍摄我们微小世界的照片更好的示范，去展示人类自大的愚蠢。对我来说，这意味着我们有责任更加友善地关怀彼此，保护和珍惜这暗淡蓝点——这个我们目前所知唯一的家园。</p>\n<hr>\n<p>地球其实只是浩瀚星空中一个毫不起眼的存在</p>\n<p>Don’t give up on your dreams, keep sleeping</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先来看一段视频，来自 <a href=\"https://www.youtube.com\" target=\"_blank\" rel=\"noopener\">Youtube</a>。 需要梯子</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Kx79tLEpMDE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<p>1994年，著名的美国科普作家卡尔·萨根（Carl Sagan）有感而发，写了一篇短文《黯淡的蓝点》（pale blue dot）。</p>\n<hr>\n<p>Look again at that dot. That’s here. That’s home. That’s us.</p>\n<p>再仔细看看那个小点。就是这里，就是我们的家，就是我们。</p>\n<p>On it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives.</p>\n<p>在这点上每个你爱的人、每个你认识的人、每个你曾经听过的人，以及每个曾经存在的人，都在那里过完一生。</p>\n<p>The aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every “superstar,” every “supreme leader,” every saint and sinner in the history of our species lived there–on a mote of dust suspended in a sunbeam.</p>\n<p>这里集合了一切的欢喜与苦难，数千个自信的宗教、意识形态以及经济学说，每个猎人和搜寻者、每个英雄和懦夫、每个文明的创造者与毁灭者、每个国王与农夫、每对相恋中的年轻爱侣、每个充满希望的孩子、每对父母、发明家和探险家，每个教授道德的老师、每个贪污政客、每个超级巨星、每个至高无上的领袖、每个人类历史上的圣人与罪人，都住在这里——一粒悬浮在阳光下的微尘。</p>\n<p>The Earth is a very small stage in a vast cosmic arena. Think of the rivers of blood spilled by all those generals and emperors so that in glory and triumph they could become the momentary masters of a fraction of a dot. Think of the endless cruelties visited by the inhabitants of one corner of this pixel on the scarcely distinguishable inhabitants of some other corner. How frequent their misunderstandings, how eager they are to kill one another, how fervent their hatreds.</p>\n<p>地球是这个浩瀚宇宙剧院里的一个小小舞台。想想从那些将令们和皇帝们那里溢出的血河，他们的光荣与胜利只为了让他们成为了这一点上一小部分的短暂主宰。想想栖身在这点上一个角落的人正受着万般苦楚，而在几乎不能区分的同一点上的另外一个角落里亦同时栖身了另一批人。他们有多时常发生误解？他们有多渴望杀了对方？他们的敌意有多热烈？</p>\n<p>Our posturings, our imagined self-importance, the delusion that we have some privileged position in the universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity – in all this vastness – there is no hint that help will come from elsewhere to save us from ourselves.</p>\n<p>我们的装模作样，我们的自以为是，我们的错觉以为自己在宇宙里的位置有多优越，都被这暗淡的光点所挑战。我们的星球只是在这被漆黑包裹的宇宙里一粒孤单的微粒而已。我们是如此的不起眼——在这浩瀚之中，我们不会从任何地方得到提示去拯救我们自身。</p>\n<p>The Earth is the only world known, so far, to harbor life. There is nowhere else, at least in the near future, to which our species could migrate. Visit, yes. Settle, not yet. Like it or not, for the moment, the Earth is where we make our stand. It has been said that astronomy is a humbling and character-building experience. There is perhaps no better demonstration of the folly of human conceits than this distant image of our tiny world. To me, it underscores our responsibility to deal more kindly with one another and to preserve and cherish the pale blue dot, the only home we’ve ever known.</p>\n<p>地球是迄今为止唯一的栖身之所。至少在可见的未来，人类别无他处可供迁徙。去访问，没问题；去定居，还不行。好恶与否，仅就当前，地球仍是我们的大本营。一直有人说天文学是令人谦卑，同时也是塑造性格的学问。对我来说，希望没有比这张从远处拍摄我们微小世界的照片更好的示范，去展示人类自大的愚蠢。对我来说，这意味着我们有责任更加友善地关怀彼此，保护和珍惜这暗淡蓝点——这个我们目前所知唯一的家园。</p>\n<hr>\n<p>地球其实只是浩瀚星空中一个毫不起眼的存在</p>\n<p>Don’t give up on your dreams, keep sleeping</p>\n"},{"title":"The Laws of Reflection(译)","date":"2017-03-23T12:12:16.000Z","photos":["https://oa7ktymto.qnssl.com/reflection_2.jpg"],"_content":"\nGo 官方博客：[The Laws of Reflection](https://blog.golang.org/laws-of-reflection)\n<!--more-->\n","source":"_posts/The-Laws-of-Reflection.md","raw":"---\ntitle: The Laws of Reflection(译)\ndate: 2017-03-23 20:12:16\ntags: Golang\nphotos: \n\t\t- https://oa7ktymto.qnssl.com/reflection_2.jpg\n---\n\nGo 官方博客：[The Laws of Reflection](https://blog.golang.org/laws-of-reflection)\n<!--more-->\n","slug":"The-Laws-of-Reflection","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7e0008q0txp0jm6dtn","content":"<p>Go 官方博客：<a href=\"https://blog.golang.org/laws-of-reflection\" target=\"_blank\" rel=\"noopener\">The Laws of Reflection</a></p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<p>Go 官方博客：<a href=\"https://blog.golang.org/laws-of-reflection\" target=\"_blank\" rel=\"noopener\">The Laws of Reflection</a></p>","more":""},{"title":"理解 Golang 的指针","date":"2017-12-25T08:43:08.000Z","photos":["https://oa7ktymto.qnssl.com/49F2C904-157D-4D77-97B6-2A46D13A6A78.png"],"_content":"翻译！ [原文](https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back)\n<!--more-->\n\n这篇文章是针对哪些不熟悉 Golang 指针或者指针类型的程序员。\n\n### 0x001 什么是指针？\n\n简而言之，指针是一个指向另一个地址的值。如果你使用的语言没有指针的概念，那么你应该很慢理解这句话。\n\n我们来分解一下。\n\n### 0x010 什么是内存？\n\n\n\n","source":"_posts/Understand-Go-pointers.md","raw":"---\ntitle: 理解 Golang 的指针\ndate: 2017-12-25 16:43:08\ntags: Golang\nphotos: \n    - https://oa7ktymto.qnssl.com/49F2C904-157D-4D77-97B6-2A46D13A6A78.png\n---\n翻译！ [原文](https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back)\n<!--more-->\n\n这篇文章是针对哪些不熟悉 Golang 指针或者指针类型的程序员。\n\n### 0x001 什么是指针？\n\n简而言之，指针是一个指向另一个地址的值。如果你使用的语言没有指针的概念，那么你应该很慢理解这句话。\n\n我们来分解一下。\n\n### 0x010 什么是内存？\n\n\n\n","slug":"Understand-Go-pointers","published":1,"updated":"2017-12-25T09:01:34.639Z","comments":1,"layout":"post","link":"","_id":"ckatepn7f0009q0tx0pvrzun1","content":"<p>翻译！ <a href=\"https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<a id=\"more\"></a>\n\n<p>这篇文章是针对哪些不熟悉 Golang 指针或者指针类型的程序员。</p>\n<h3 id=\"0x001-什么是指针？\"><a href=\"#0x001-什么是指针？\" class=\"headerlink\" title=\"0x001 什么是指针？\"></a>0x001 什么是指针？</h3><p>简而言之，指针是一个指向另一个地址的值。如果你使用的语言没有指针的概念，那么你应该很慢理解这句话。</p>\n<p>我们来分解一下。</p>\n<h3 id=\"0x010-什么是内存？\"><a href=\"#0x010-什么是内存？\" class=\"headerlink\" title=\"0x010 什么是内存？\"></a>0x010 什么是内存？</h3>","site":{"data":{}},"excerpt":"<p>翻译！ <a href=\"https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back\" target=\"_blank\" rel=\"noopener\">原文</a></p>","more":"<p>这篇文章是针对哪些不熟悉 Golang 指针或者指针类型的程序员。</p>\n<h3 id=\"0x001-什么是指针？\"><a href=\"#0x001-什么是指针？\" class=\"headerlink\" title=\"0x001 什么是指针？\"></a>0x001 什么是指针？</h3><p>简而言之，指针是一个指向另一个地址的值。如果你使用的语言没有指针的概念，那么你应该很慢理解这句话。</p>\n<p>我们来分解一下。</p>\n<h3 id=\"0x010-什么是内存？\"><a href=\"#0x010-什么是内存？\" class=\"headerlink\" title=\"0x010 什么是内存？\"></a>0x010 什么是内存？</h3>"},{"title":"Vim 配置 Golang 开发","date":"2017-11-03T14:11:55.000Z","photos":["https://oa7ktymto.qnssl.com/vim-golang.png"],"_content":"\n把 vim 打造成一个 Golang 开发的 IDE \n<!--more-->\n\n### 0x001\n\n首先，我们来看下最终的 VIM 是长下面这个样子的：\n\n![](https://oa7ktymto.qnssl.com/vim-golang.png)\n\n中间的那个框就是我们可以选择的函数列表，通过`tab`可以往下翻。接下来我们需要的是：\n- vim 这个当然是必须的啦。版本最好是最新的版本，最好是支持 lua\n- [vim-go](https://github.com/fatih/vim-go) 用vim写 golang 必备的插件\n- [pathogen.vim](https://github.com/tpope/vim-pathogen) 这个用来处理`runtimepath`\n- [ctrlp.vim](https://github.com/kien/ctrlp.vim) 这个是文件搜索工具可以从 buf, mru, files 三个地方作为文件源\n- [mru](https://github.com/yegappan/mru) 最近经常编辑的文件列表\n- [neocomplete](https://github.com/Shougo/neocomplete.vim) 刚刚我们看到的那个选函数的框就是它\n- [netrw.vim](https://github.com/vim-scripts/netrw.vim) 左边的文件选择窗口\n- [tagbar](https://github.com/majutsushi/tagbar) 右边的函数==的窗口\n\n### pathogen.vim\n\n安装：\n\n直接下载到`~/.vim/autoload/pathogen.vim`。或者\n```\nmkdir -p ~/.vim/autoload ~/.vim/bundle && \\\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n```\n然后在你的`vimrc`里面添加：\n```\nexecute pathogen#infect()\n```\n这个插件的作用是把`~/.vim/bundle`下面的所有文件夹作为 vim 的`runtimepath(不知道的童鞋自行 Google)`。\n\n\n### vim-go\n\n安装：\n\n```\ngit clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go\n```\n\n对，你没有看错这样就已经安装完`vim-go`了。 只是它还会去安装一些第三方的东西比如：godef 等等\n\n\n## 2019-04-12 UPDATE \n\n### 源码编译 VIM8 (with-python3)\n1. 下载最新的源码，`git clone git@github.com:vim/vim.git`\n2. cd vim/src\n3. `./configure --enable-multibyte --enable-perlinterp=dynamic --enable-rubyinterp=dynamic --with-ruby-command=/usr/local/bin/ruby --enable-python3interp --enable-cscope --enable-gui=auto --with-features=huge --with-x --enable-fontset --enable-largefile --disable-netbeans --with-compiledby=\"yourname\" --enable-fail-if-missing`\n4. make && make install\n\n### 需要的插件\n- [pathogen.vim](https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim) (直接放在 `~/.vim/autoload` 目录里面)\n- [ctrlp.vim (Fuzzy file, buffer, mru, tag, etc finder)](https://github.com/kien/ctrlp.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [deoplete-go (自动补全)](https://github.com/deoplete-plugins/deoplete-go) (git clone 放在 `~/.vim/bundle` 目录)\n- [deoplete.nvim (自动补全)](https://github.com/Shougo/deoplete.nvim) (git clone 放在 `~/.vim/bundle` 目录)\n- [mru (Most Recently Used (MRU) files)](https://github.com/vim-scripts/mru.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [netrw.vim](https://github.com/vim-scripts/netrw.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [nvim-yarp](https://github.com/roxma/nvim-yarp) (git clone 放在 `~/.vim/bundle` 目录)\n- [tagbar](https://github.com/majutsushi/tagbar) (git clone 放在 `~/.vim/bundle` 目录) \n- [vim-gitgutter](https://github.com/airblade/vim-gitgutter) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-go](https://github.com/fatih/vim-go) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-godef](https://github.com/dgryski/vim-godef) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-hug-neovim-rpc](https://github.com/roxma/vim-hug-neovim-rpc) (git clone 放在 `~/.vim/bundle` 目录)\n\n### 出现以下 ERROR 解决办法\n>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):Traceback (most recent call last):\n>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):/must>not&exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n\n命令行执行 `pip3 install --user --no-binary :all: pynvim`\n\n## 2020-04-13 UPDATE\n\n### 下载最新的 vim8\n\n### 需要的插件 plug.vim\n\n### 抄以下的 .vimrc\n```\ncall plug#begin('~/.vim/plugged')\nPlug 'fatih/vim-go'\nPlug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}\nPlug 'kien/ctrlp.vim'\nPlug 'vim-scripts/mru.vim'\nPlug 'vim-scripts/netrw.vim'\nPlug 'airblade/vim-gitgutter'\nPlug 'jalvesaq/Nvim-R'\ncall plug#end()\n\nset shell=/bin/sh\nset autoread\n\" Personal setting\n\" =======================================  start  =======================================\n\" With a map leader it's possible to do extra key combinations\nlet mapleader = \",\"\nlet g:mapleader = \",\"\nse cursorline\nset foldcolumn=1\n\n\" disable vim-go goto definition\nlet g:go_def_mapping_enabled = 0\n\n\" golang highlight\nlet g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']\nlet g:go_highlight_functions = 1\nlet g:go_highlight_operators = 1\nlet g:go_highlight_function_calls = 1\n\n\n\" coc.vim default config\n\" =================================================\n\" Use tab for trigger completion with characters ahead and navigate.\n\" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.\ninoremap <silent><expr> <TAB>\n      \\ pumvisible() ? \"\\<C-n>\" :\n      \\ <SID>check_back_space() ? \"\\<TAB>\" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"\n\nfunction! s:check_back_space() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" Use <c-space> to trigger completion.\ninoremap <silent><expr> <c-space> coc#refresh()\n\n\" Use `[c` and `]c` to navigate diagnostics\nnmap <silent> [c <Plug>(coc-diagnostic-prev)\nnmap <silent> ]c <Plug>(coc-diagnostic-next)\n\" Remap keys for gotos\nnmap <silent> <c-]> <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gr <Plug>(coc-references)\n\" Use U to show documentation in preview window\nnnoremap <silent> U :call <SID>show_documentation()<CR>\n\n\" Remap for rename current word\nnmap <leader>rn <Plug>(coc-rename)\n\n\" Remap for format selected region\nvmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\n\" Show all diagnostics\nnnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>\n\" Manage extensions\nnnoremap <silent> <leader>e  :<C-u>CocList extensions<cr>\n\" Show commands\nnnoremap <silent> <leader>c  :<C-u>CocList commands<cr>\n\" Find symbol of current document\nnnoremap <silent> <leader>o  :<C-u>CocList outline<cr>\n\" Search workspace symbols\nnnoremap <silent> <leader>s  :<C-u>CocList -I symbols<cr>\n\" Do default action for next item.\nnnoremap <silent> <leader>j  :<C-u>CocNext<CR>\n\" Do default action for previous item.\nnnoremap <silent> <leader>k  :<C-u>CocPrev<CR>\n\" Resume latest coc list\nnnoremap <silent> <leader>p  :<C-u>CocListResume<CR>\n\"====================================================\n\" gi go install\nnmap gi <ESC>:GoInstall<CR>\n\n\" line numbers\nset relativenumber\nset nu\n\n\" Enable filetype plugins\n\"\nsyntax on\nfiletype on\nfiletype plugin on\nfiletype indent on\n\nimap sw <ESC>:w<CR>\nnmap sw <ESC>:w<CR>\nnoremap qq <ESC>:q!<CR>\nimap jj <ESC>\nnmap 1t 1gt\nnmap 2t 2gt\nnmap 3t 3gt\nnmap 4t 4gt\nnmap 5t 5gt\ncolorscheme desert\n\n\"Always show current position\nset ruler\n\n\" A buffer becomes hidden when it is abandoned\nset hid\n\n\" Set 7 lines to the cursor - when moving vertically using j/k\nset so=7\n\n\" Use spaces instead of tabs\nset expandtab\n\n\" Be smart when using tabs ;)\nset smarttab\n\n\" 1 tab == 4 spaces\nset shiftwidth=4\nset tabstop=4\n\n\" Height of the command bar\nset cmdheight=2\n\n\" Highlight search results\nset hlsearch\n\n\" Makes search act like search in modern browsers\nset incsearch\n\n\" Don't redraw while executing macros (good performance config)\nset lazyredraw\n\n\" For regular expressions turn magic on\nset magic\n\n\" Show matching brackets when text indicator is over them\nset showmatch\n\n\" backspace acts as it should act\nset backspace=eol,start,indent\nset whichwrap+=<,>,h,l\n\n\" Returns true if paste mode is enabled\nfunction! HasPaste()\n    if &paste\n        return 'PASTE MODE  '\n    en\n    return ''\nendfunction\n\n\" Always show the status line\nset laststatus=2\n\n\" Format the status line\nset statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{getcwd()}%h\\ \\ \\ Line:\\ %l\\ \\ \\ Column:\\ %c,\n\n\" move between windows\nnmap <C-j> <C-W>j\nnmap <C-k> <C-W>k\nnmap <C-h> <C-W>h\nnmap <C-l> <C-W>l\n\n\n\" tabline\nif has('gui')\n  set guioptions-=e\nendif\nif exists(\"+showtabline\")\n  function MyTabLine()\n    let s = ''\n    let t = tabpagenr()\n    let i = 1\n    while i <= tabpagenr('$')\n      let buflist = tabpagebuflist(i)\n      let winnr = tabpagewinnr(i)\n      let s .= '%' . i . 'T'\n      let s .= (i == t ? '%1*' : '%2*')\n      let s .= ' '\n      let s .= i . ':'\n      let s .= winnr . '/' . tabpagewinnr(i,'$')\n      let s .= ' %*'\n      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')\n      let bufnr = buflist[winnr - 1]\n      let file = bufname(bufnr)\n      let buftype = getbufvar(bufnr, 'buftype')\n      if buftype == 'nofile'\n        if file =~ '\\/.'\n          let file = substitute(file, '.*\\/\\ze.', '', '')\n        endif\n      else\n        let file = fnamemodify(file, ':p:t')\n      endif\n      if file == ''\n        let file = '[No Name]'\n      endif\n      let s .= file\n      let i = i + 1\n    endwhile\n    let s .= '%T%#TabLineFill#%='\n    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')\n    return s\n  endfunction\n  set stal=2\n  set tabline=%!MyTabLine()\n  map    <C-Tab>    :tabnext<CR>\n  imap   <C-Tab>    <C-O>:tabnext<CR>\n  map    <C-S-Tab>  :tabprev<CR>\n  imap   <C-S-Tab>  <C-O>:tabprev<CR>\nendif\n\n\" Remap VIM 0 to first non-blank character\nmap 0 ^\n\n\" Linebreak on 500 characters\nset lbr\nset tw=500\n\nset ai \"Auto indent\nset si \"Smart indent\nset wrap \"Wrap lines\n\n\" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)\nmap <space> /\nmap <c-space> ?\n\n\" Super useful when editing files in the same directory\nmap <leader>te :tabedit <c-r>=expand(\"%:p:h\")<cr>/\n\n\" Switch CWD to the directory of the open buffer\nmap <leader>cd :cd %:p:h<cr>:pwd<cr>\n\n\" Set utf8 as standard encoding and en_US as the standard language\nset encoding=utf8\n\n\" Use Unix as the standard file type\nset ffs=unix,dos,mac\n\n\" Turn backup off, since most stuff is in SVN, git et.c anyway...\nset nobackup\nset nowb\nset noswapfile\n\n\" Remap VIM 0 to first non-blank character\nmap 0 ^\n\n\" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac\nnmap <M-j> mz:m+<cr>`z\nnmap <M-k> mz:m-2<cr>`z\nvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z\nvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z\n\nif has(\"mac\") || has(\"macunix\")\n  nmap <D-j> <M-j>\n  nmap <D-k> <M-k>\n  vmap <D-j> <M-j>\n  vmap <D-k> <M-k>\nendif\n\n\" close tab\nnmap cw <ESC>:tabc<CR>\n\n\" Return to last edit position when opening files (You want this!)\nautocmd BufReadPost *\n     \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n     \\   exe \"normal! g`\\\"\" |\n     \\ endif\n\n\" Set extra options when running in GUI mode\nif has(\"gui_running\")\n    set guioptions-=T\n    set guioptions-=e\n    set t_Co=256\n    set guitablabel=%M\\ %t\nendif\n\n\" ================================ end ================================\n\n\" netrw config\n\"\nset nocp\nnnoremap <Leader><Leader> :Tlist<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h\nlet g:netrw_browse_split = 4\nlet g:netrw_altv = 1\nlet g:netrw_winsize = 55\nlet g:netrw_liststyle=0         \" thin (change to 3 for tree)\nlet g:netrw_banner=0            \" no banner\nlet g:netrw_altv=1              \" open files on right\nlet g:netrw_preview=1           \" open previews vertically\n\naugroup ProjectDrawer\n  autocmd!\n  autocmd VimEnter * :Vexplore\naugroup END\n\n\" gopls mode\n\" let g:go_def_mode='gopls'\n\" let g:go_info_mode='gopls'\n\n\" CTRL-P\nlet g:ctrlp_working_path_mode = 0\nlet g:ctrlp_map = '<c-f>'\nmap <leader>j :CtrlP<cr>\nmap <c-b> :CtrlPBuffer<cr>\nlet g:ctrlp_max_height = 20\nlet g:ctrlp_custom_ignore = 'node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee'\n\n\" golint\n\" set rtp+=/Users/wentx/momaek/src/golang.org/x/lint/misc/vim\n\" autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow\n```\n","source":"_posts/Vim-配置-Golang-开发.md","raw":"---\ntitle: Vim 配置 Golang 开发\ndate: 2017-11-03 22:11:55\ntags: \n    - vim\n    - Golang\nphotos:\n    - https://oa7ktymto.qnssl.com/vim-golang.png\n---\n\n把 vim 打造成一个 Golang 开发的 IDE \n<!--more-->\n\n### 0x001\n\n首先，我们来看下最终的 VIM 是长下面这个样子的：\n\n![](https://oa7ktymto.qnssl.com/vim-golang.png)\n\n中间的那个框就是我们可以选择的函数列表，通过`tab`可以往下翻。接下来我们需要的是：\n- vim 这个当然是必须的啦。版本最好是最新的版本，最好是支持 lua\n- [vim-go](https://github.com/fatih/vim-go) 用vim写 golang 必备的插件\n- [pathogen.vim](https://github.com/tpope/vim-pathogen) 这个用来处理`runtimepath`\n- [ctrlp.vim](https://github.com/kien/ctrlp.vim) 这个是文件搜索工具可以从 buf, mru, files 三个地方作为文件源\n- [mru](https://github.com/yegappan/mru) 最近经常编辑的文件列表\n- [neocomplete](https://github.com/Shougo/neocomplete.vim) 刚刚我们看到的那个选函数的框就是它\n- [netrw.vim](https://github.com/vim-scripts/netrw.vim) 左边的文件选择窗口\n- [tagbar](https://github.com/majutsushi/tagbar) 右边的函数==的窗口\n\n### pathogen.vim\n\n安装：\n\n直接下载到`~/.vim/autoload/pathogen.vim`。或者\n```\nmkdir -p ~/.vim/autoload ~/.vim/bundle && \\\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n```\n然后在你的`vimrc`里面添加：\n```\nexecute pathogen#infect()\n```\n这个插件的作用是把`~/.vim/bundle`下面的所有文件夹作为 vim 的`runtimepath(不知道的童鞋自行 Google)`。\n\n\n### vim-go\n\n安装：\n\n```\ngit clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go\n```\n\n对，你没有看错这样就已经安装完`vim-go`了。 只是它还会去安装一些第三方的东西比如：godef 等等\n\n\n## 2019-04-12 UPDATE \n\n### 源码编译 VIM8 (with-python3)\n1. 下载最新的源码，`git clone git@github.com:vim/vim.git`\n2. cd vim/src\n3. `./configure --enable-multibyte --enable-perlinterp=dynamic --enable-rubyinterp=dynamic --with-ruby-command=/usr/local/bin/ruby --enable-python3interp --enable-cscope --enable-gui=auto --with-features=huge --with-x --enable-fontset --enable-largefile --disable-netbeans --with-compiledby=\"yourname\" --enable-fail-if-missing`\n4. make && make install\n\n### 需要的插件\n- [pathogen.vim](https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim) (直接放在 `~/.vim/autoload` 目录里面)\n- [ctrlp.vim (Fuzzy file, buffer, mru, tag, etc finder)](https://github.com/kien/ctrlp.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [deoplete-go (自动补全)](https://github.com/deoplete-plugins/deoplete-go) (git clone 放在 `~/.vim/bundle` 目录)\n- [deoplete.nvim (自动补全)](https://github.com/Shougo/deoplete.nvim) (git clone 放在 `~/.vim/bundle` 目录)\n- [mru (Most Recently Used (MRU) files)](https://github.com/vim-scripts/mru.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [netrw.vim](https://github.com/vim-scripts/netrw.vim) (git clone 放在 `~/.vim/bundle` 目录)\n- [nvim-yarp](https://github.com/roxma/nvim-yarp) (git clone 放在 `~/.vim/bundle` 目录)\n- [tagbar](https://github.com/majutsushi/tagbar) (git clone 放在 `~/.vim/bundle` 目录) \n- [vim-gitgutter](https://github.com/airblade/vim-gitgutter) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-go](https://github.com/fatih/vim-go) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-godef](https://github.com/dgryski/vim-godef) (git clone 放在 `~/.vim/bundle` 目录)\n- [vim-hug-neovim-rpc](https://github.com/roxma/vim-hug-neovim-rpc) (git clone 放在 `~/.vim/bundle` 目录)\n\n### 出现以下 ERROR 解决办法\n>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):Traceback (most recent call last):\n>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):/must>not&exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n\n命令行执行 `pip3 install --user --no-binary :all: pynvim`\n\n## 2020-04-13 UPDATE\n\n### 下载最新的 vim8\n\n### 需要的插件 plug.vim\n\n### 抄以下的 .vimrc\n```\ncall plug#begin('~/.vim/plugged')\nPlug 'fatih/vim-go'\nPlug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}\nPlug 'kien/ctrlp.vim'\nPlug 'vim-scripts/mru.vim'\nPlug 'vim-scripts/netrw.vim'\nPlug 'airblade/vim-gitgutter'\nPlug 'jalvesaq/Nvim-R'\ncall plug#end()\n\nset shell=/bin/sh\nset autoread\n\" Personal setting\n\" =======================================  start  =======================================\n\" With a map leader it's possible to do extra key combinations\nlet mapleader = \",\"\nlet g:mapleader = \",\"\nse cursorline\nset foldcolumn=1\n\n\" disable vim-go goto definition\nlet g:go_def_mapping_enabled = 0\n\n\" golang highlight\nlet g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']\nlet g:go_highlight_functions = 1\nlet g:go_highlight_operators = 1\nlet g:go_highlight_function_calls = 1\n\n\n\" coc.vim default config\n\" =================================================\n\" Use tab for trigger completion with characters ahead and navigate.\n\" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.\ninoremap <silent><expr> <TAB>\n      \\ pumvisible() ? \"\\<C-n>\" :\n      \\ <SID>check_back_space() ? \"\\<TAB>\" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> pumvisible() ? \"\\<C-p>\" : \"\\<C-h>\"\n\nfunction! s:check_back_space() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" Use <c-space> to trigger completion.\ninoremap <silent><expr> <c-space> coc#refresh()\n\n\" Use `[c` and `]c` to navigate diagnostics\nnmap <silent> [c <Plug>(coc-diagnostic-prev)\nnmap <silent> ]c <Plug>(coc-diagnostic-next)\n\" Remap keys for gotos\nnmap <silent> <c-]> <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gr <Plug>(coc-references)\n\" Use U to show documentation in preview window\nnnoremap <silent> U :call <SID>show_documentation()<CR>\n\n\" Remap for rename current word\nnmap <leader>rn <Plug>(coc-rename)\n\n\" Remap for format selected region\nvmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\n\" Show all diagnostics\nnnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>\n\" Manage extensions\nnnoremap <silent> <leader>e  :<C-u>CocList extensions<cr>\n\" Show commands\nnnoremap <silent> <leader>c  :<C-u>CocList commands<cr>\n\" Find symbol of current document\nnnoremap <silent> <leader>o  :<C-u>CocList outline<cr>\n\" Search workspace symbols\nnnoremap <silent> <leader>s  :<C-u>CocList -I symbols<cr>\n\" Do default action for next item.\nnnoremap <silent> <leader>j  :<C-u>CocNext<CR>\n\" Do default action for previous item.\nnnoremap <silent> <leader>k  :<C-u>CocPrev<CR>\n\" Resume latest coc list\nnnoremap <silent> <leader>p  :<C-u>CocListResume<CR>\n\"====================================================\n\" gi go install\nnmap gi <ESC>:GoInstall<CR>\n\n\" line numbers\nset relativenumber\nset nu\n\n\" Enable filetype plugins\n\"\nsyntax on\nfiletype on\nfiletype plugin on\nfiletype indent on\n\nimap sw <ESC>:w<CR>\nnmap sw <ESC>:w<CR>\nnoremap qq <ESC>:q!<CR>\nimap jj <ESC>\nnmap 1t 1gt\nnmap 2t 2gt\nnmap 3t 3gt\nnmap 4t 4gt\nnmap 5t 5gt\ncolorscheme desert\n\n\"Always show current position\nset ruler\n\n\" A buffer becomes hidden when it is abandoned\nset hid\n\n\" Set 7 lines to the cursor - when moving vertically using j/k\nset so=7\n\n\" Use spaces instead of tabs\nset expandtab\n\n\" Be smart when using tabs ;)\nset smarttab\n\n\" 1 tab == 4 spaces\nset shiftwidth=4\nset tabstop=4\n\n\" Height of the command bar\nset cmdheight=2\n\n\" Highlight search results\nset hlsearch\n\n\" Makes search act like search in modern browsers\nset incsearch\n\n\" Don't redraw while executing macros (good performance config)\nset lazyredraw\n\n\" For regular expressions turn magic on\nset magic\n\n\" Show matching brackets when text indicator is over them\nset showmatch\n\n\" backspace acts as it should act\nset backspace=eol,start,indent\nset whichwrap+=<,>,h,l\n\n\" Returns true if paste mode is enabled\nfunction! HasPaste()\n    if &paste\n        return 'PASTE MODE  '\n    en\n    return ''\nendfunction\n\n\" Always show the status line\nset laststatus=2\n\n\" Format the status line\nset statusline=\\ %{HasPaste()}%F%m%r%h\\ %w\\ \\ CWD:\\ %r%{getcwd()}%h\\ \\ \\ Line:\\ %l\\ \\ \\ Column:\\ %c,\n\n\" move between windows\nnmap <C-j> <C-W>j\nnmap <C-k> <C-W>k\nnmap <C-h> <C-W>h\nnmap <C-l> <C-W>l\n\n\n\" tabline\nif has('gui')\n  set guioptions-=e\nendif\nif exists(\"+showtabline\")\n  function MyTabLine()\n    let s = ''\n    let t = tabpagenr()\n    let i = 1\n    while i <= tabpagenr('$')\n      let buflist = tabpagebuflist(i)\n      let winnr = tabpagewinnr(i)\n      let s .= '%' . i . 'T'\n      let s .= (i == t ? '%1*' : '%2*')\n      let s .= ' '\n      let s .= i . ':'\n      let s .= winnr . '/' . tabpagewinnr(i,'$')\n      let s .= ' %*'\n      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')\n      let bufnr = buflist[winnr - 1]\n      let file = bufname(bufnr)\n      let buftype = getbufvar(bufnr, 'buftype')\n      if buftype == 'nofile'\n        if file =~ '\\/.'\n          let file = substitute(file, '.*\\/\\ze.', '', '')\n        endif\n      else\n        let file = fnamemodify(file, ':p:t')\n      endif\n      if file == ''\n        let file = '[No Name]'\n      endif\n      let s .= file\n      let i = i + 1\n    endwhile\n    let s .= '%T%#TabLineFill#%='\n    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')\n    return s\n  endfunction\n  set stal=2\n  set tabline=%!MyTabLine()\n  map    <C-Tab>    :tabnext<CR>\n  imap   <C-Tab>    <C-O>:tabnext<CR>\n  map    <C-S-Tab>  :tabprev<CR>\n  imap   <C-S-Tab>  <C-O>:tabprev<CR>\nendif\n\n\" Remap VIM 0 to first non-blank character\nmap 0 ^\n\n\" Linebreak on 500 characters\nset lbr\nset tw=500\n\nset ai \"Auto indent\nset si \"Smart indent\nset wrap \"Wrap lines\n\n\" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)\nmap <space> /\nmap <c-space> ?\n\n\" Super useful when editing files in the same directory\nmap <leader>te :tabedit <c-r>=expand(\"%:p:h\")<cr>/\n\n\" Switch CWD to the directory of the open buffer\nmap <leader>cd :cd %:p:h<cr>:pwd<cr>\n\n\" Set utf8 as standard encoding and en_US as the standard language\nset encoding=utf8\n\n\" Use Unix as the standard file type\nset ffs=unix,dos,mac\n\n\" Turn backup off, since most stuff is in SVN, git et.c anyway...\nset nobackup\nset nowb\nset noswapfile\n\n\" Remap VIM 0 to first non-blank character\nmap 0 ^\n\n\" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac\nnmap <M-j> mz:m+<cr>`z\nnmap <M-k> mz:m-2<cr>`z\nvmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z\nvmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z\n\nif has(\"mac\") || has(\"macunix\")\n  nmap <D-j> <M-j>\n  nmap <D-k> <M-k>\n  vmap <D-j> <M-j>\n  vmap <D-k> <M-k>\nendif\n\n\" close tab\nnmap cw <ESC>:tabc<CR>\n\n\" Return to last edit position when opening files (You want this!)\nautocmd BufReadPost *\n     \\ if line(\"'\\\"\") > 0 && line(\"'\\\"\") <= line(\"$\") |\n     \\   exe \"normal! g`\\\"\" |\n     \\ endif\n\n\" Set extra options when running in GUI mode\nif has(\"gui_running\")\n    set guioptions-=T\n    set guioptions-=e\n    set t_Co=256\n    set guitablabel=%M\\ %t\nendif\n\n\" ================================ end ================================\n\n\" netrw config\n\"\nset nocp\nnnoremap <Leader><Leader> :Tlist<CR><C-W>h<C-W>s:e .<CR><C-W>l:let g:netrw_chgwin=winnr()<CR><C-W>h\nlet g:netrw_browse_split = 4\nlet g:netrw_altv = 1\nlet g:netrw_winsize = 55\nlet g:netrw_liststyle=0         \" thin (change to 3 for tree)\nlet g:netrw_banner=0            \" no banner\nlet g:netrw_altv=1              \" open files on right\nlet g:netrw_preview=1           \" open previews vertically\n\naugroup ProjectDrawer\n  autocmd!\n  autocmd VimEnter * :Vexplore\naugroup END\n\n\" gopls mode\n\" let g:go_def_mode='gopls'\n\" let g:go_info_mode='gopls'\n\n\" CTRL-P\nlet g:ctrlp_working_path_mode = 0\nlet g:ctrlp_map = '<c-f>'\nmap <leader>j :CtrlP<cr>\nmap <c-b> :CtrlPBuffer<cr>\nlet g:ctrlp_max_height = 20\nlet g:ctrlp_custom_ignore = 'node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee'\n\n\" golint\n\" set rtp+=/Users/wentx/momaek/src/golang.org/x/lint/misc/vim\n\" autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow\n```\n","slug":"Vim-配置-Golang-开发","published":1,"updated":"2020-04-14T08:44:05.236Z","comments":1,"layout":"post","link":"","_id":"ckatepn7g000aq0txvn2txl7b","content":"<p>把 vim 打造成一个 Golang 开发的 IDE </p>\n<a id=\"more\"></a>\n\n<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>首先，我们来看下最终的 VIM 是长下面这个样子的：</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/vim-golang.png\" alt=\"\"></p>\n<p>中间的那个框就是我们可以选择的函数列表，通过<code>tab</code>可以往下翻。接下来我们需要的是：</p>\n<ul>\n<li>vim 这个当然是必须的啦。版本最好是最新的版本，最好是支持 lua</li>\n<li><a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" rel=\"noopener\">vim-go</a> 用vim写 golang 必备的插件</li>\n<li><a href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"noopener\">pathogen.vim</a> 这个用来处理<code>runtimepath</code></li>\n<li><a href=\"https://github.com/kien/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">ctrlp.vim</a> 这个是文件搜索工具可以从 buf, mru, files 三个地方作为文件源</li>\n<li><a href=\"https://github.com/yegappan/mru\" target=\"_blank\" rel=\"noopener\">mru</a> 最近经常编辑的文件列表</li>\n<li><a href=\"https://github.com/Shougo/neocomplete.vim\" target=\"_blank\" rel=\"noopener\">neocomplete</a> 刚刚我们看到的那个选函数的框就是它</li>\n<li><a href=\"https://github.com/vim-scripts/netrw.vim\" target=\"_blank\" rel=\"noopener\">netrw.vim</a> 左边的文件选择窗口</li>\n<li><a href=\"https://github.com/majutsushi/tagbar\" target=\"_blank\" rel=\"noopener\">tagbar</a> 右边的函数==的窗口</li>\n</ul>\n<h3 id=\"pathogen-vim\"><a href=\"#pathogen-vim\" class=\"headerlink\" title=\"pathogen.vim\"></a>pathogen.vim</h3><p>安装：</p>\n<p>直接下载到<code>~/.vim/autoload/pathogen.vim</code>。或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; \\</span><br><span class=\"line\">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure>\n\n<p>然后在你的<code>vimrc</code>里面添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execute pathogen#infect()</span><br></pre></td></tr></table></figure>\n\n<p>这个插件的作用是把<code>~/.vim/bundle</code>下面的所有文件夹作为 vim 的<code>runtimepath(不知道的童鞋自行 Google)</code>。</p>\n<h3 id=\"vim-go\"><a href=\"#vim-go\" class=\"headerlink\" title=\"vim-go\"></a>vim-go</h3><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go</span><br></pre></td></tr></table></figure>\n\n<p>对，你没有看错这样就已经安装完<code>vim-go</code>了。 只是它还会去安装一些第三方的东西比如：godef 等等</p>\n<h2 id=\"2019-04-12-UPDATE\"><a href=\"#2019-04-12-UPDATE\" class=\"headerlink\" title=\"2019-04-12 UPDATE\"></a>2019-04-12 UPDATE</h2><h3 id=\"源码编译-VIM8-with-python3\"><a href=\"#源码编译-VIM8-with-python3\" class=\"headerlink\" title=\"源码编译 VIM8 (with-python3)\"></a>源码编译 VIM8 (with-python3)</h3><ol>\n<li>下载最新的源码，<code>git clone git@github.com:vim/vim.git</code></li>\n<li>cd vim/src</li>\n<li><code>./configure --enable-multibyte --enable-perlinterp=dynamic --enable-rubyinterp=dynamic --with-ruby-command=/usr/local/bin/ruby --enable-python3interp --enable-cscope --enable-gui=auto --with-features=huge --with-x --enable-fontset --enable-largefile --disable-netbeans --with-compiledby=&quot;yourname&quot; --enable-fail-if-missing</code></li>\n<li>make &amp;&amp; make install</li>\n</ol>\n<h3 id=\"需要的插件\"><a href=\"#需要的插件\" class=\"headerlink\" title=\"需要的插件\"></a>需要的插件</h3><ul>\n<li><a href=\"https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim\" target=\"_blank\" rel=\"noopener\">pathogen.vim</a> (直接放在 <code>~/.vim/autoload</code> 目录里面)</li>\n<li><a href=\"https://github.com/kien/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">ctrlp.vim (Fuzzy file, buffer, mru, tag, etc finder)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/deoplete-plugins/deoplete-go\" target=\"_blank\" rel=\"noopener\">deoplete-go (自动补全)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/Shougo/deoplete.nvim\" target=\"_blank\" rel=\"noopener\">deoplete.nvim (自动补全)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/vim-scripts/mru.vim\" target=\"_blank\" rel=\"noopener\">mru (Most Recently Used (MRU) files)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/vim-scripts/netrw.vim\" target=\"_blank\" rel=\"noopener\">netrw.vim</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/roxma/nvim-yarp\" target=\"_blank\" rel=\"noopener\">nvim-yarp</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/majutsushi/tagbar\" target=\"_blank\" rel=\"noopener\">tagbar</a> (git clone 放在 <code>~/.vim/bundle</code> 目录) </li>\n<li><a href=\"https://github.com/airblade/vim-gitgutter\" target=\"_blank\" rel=\"noopener\">vim-gitgutter</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" rel=\"noopener\">vim-go</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/dgryski/vim-godef\" target=\"_blank\" rel=\"noopener\">vim-godef</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/roxma/vim-hug-neovim-rpc\" target=\"_blank\" rel=\"noopener\">vim-hug-neovim-rpc</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n</ul>\n<h3 id=\"出现以下-ERROR-解决办法\"><a href=\"#出现以下-ERROR-解决办法\" class=\"headerlink\" title=\"出现以下 ERROR 解决办法\"></a>出现以下 ERROR 解决办法</h3><blockquote>\n<p>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):Traceback (most recent call last):<br>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):/must&gt;not&amp;exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module’s documentation for alternative uses</p>\n</blockquote>\n<p>命令行执行 <code>pip3 install --user --no-binary :all: pynvim</code></p>\n<h2 id=\"2020-04-13-UPDATE\"><a href=\"#2020-04-13-UPDATE\" class=\"headerlink\" title=\"2020-04-13 UPDATE\"></a>2020-04-13 UPDATE</h2><h3 id=\"下载最新的-vim8\"><a href=\"#下载最新的-vim8\" class=\"headerlink\" title=\"下载最新的 vim8\"></a>下载最新的 vim8</h3><h3 id=\"需要的插件-plug-vim\"><a href=\"#需要的插件-plug-vim\" class=\"headerlink\" title=\"需要的插件 plug.vim\"></a>需要的插件 plug.vim</h3><h3 id=\"抄以下的-vimrc\"><a href=\"#抄以下的-vimrc\" class=\"headerlink\" title=\"抄以下的 .vimrc\"></a>抄以下的 .vimrc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class=\"line\">Plug &apos;fatih/vim-go&apos;</span><br><span class=\"line\">Plug &apos;neoclide/coc.nvim&apos;, &#123;&apos;do&apos;: &apos;yarn install --frozen-lockfile&apos;&#125;</span><br><span class=\"line\">Plug &apos;kien/ctrlp.vim&apos;</span><br><span class=\"line\">Plug &apos;vim-scripts/mru.vim&apos;</span><br><span class=\"line\">Plug &apos;vim-scripts/netrw.vim&apos;</span><br><span class=\"line\">Plug &apos;airblade/vim-gitgutter&apos;</span><br><span class=\"line\">Plug &apos;jalvesaq/Nvim-R&apos;</span><br><span class=\"line\">call plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\">set shell=/bin/sh</span><br><span class=\"line\">set autoread</span><br><span class=\"line\">&quot; Personal setting</span><br><span class=\"line\">&quot; =======================================  start  =======================================</span><br><span class=\"line\">&quot; With a map leader it&apos;s possible to do extra key combinations</span><br><span class=\"line\">let mapleader = &quot;,&quot;</span><br><span class=\"line\">let g:mapleader = &quot;,&quot;</span><br><span class=\"line\">se cursorline</span><br><span class=\"line\">set foldcolumn=1</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; disable vim-go goto definition</span><br><span class=\"line\">let g:go_def_mapping_enabled = 0</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; golang highlight</span><br><span class=\"line\">let g:go_fold_enable = [&apos;block&apos;, &apos;import&apos;, &apos;varconst&apos;, &apos;package_comment&apos;]</span><br><span class=\"line\">let g:go_highlight_functions = 1</span><br><span class=\"line\">let g:go_highlight_operators = 1</span><br><span class=\"line\">let g:go_highlight_function_calls = 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; coc.vim default config</span><br><span class=\"line\">&quot; =================================================</span><br><span class=\"line\">&quot; Use tab for trigger completion with characters ahead and navigate.</span><br><span class=\"line\">&quot; Use command &apos;:verbose imap &lt;tab&gt;&apos; to make sure tab is not mapped by other plugin.</span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span><br><span class=\"line\">      \\ pumvisible() ? &quot;\\&lt;C-n&gt;&quot; :</span><br><span class=\"line\">      \\ &lt;SID&gt;check_back_space() ? &quot;\\&lt;TAB&gt;&quot; :</span><br><span class=\"line\">      \\ coc#refresh()</span><br><span class=\"line\">inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? &quot;\\&lt;C-p&gt;&quot; : &quot;\\&lt;C-h&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function! s:check_back_space() abort</span><br><span class=\"line\">  let col = col(&apos;.&apos;) - 1</span><br><span class=\"line\">  return !col || getline(&apos;.&apos;)[col - 1]  =~# &apos;\\s&apos;</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use &lt;c-space&gt; to trigger completion.</span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use `[c` and `]c` to navigate diagnostics</span><br><span class=\"line\">nmap &lt;silent&gt; [c &lt;Plug&gt;(coc-diagnostic-prev)</span><br><span class=\"line\">nmap &lt;silent&gt; ]c &lt;Plug&gt;(coc-diagnostic-next)</span><br><span class=\"line\">&quot; Remap keys for gotos</span><br><span class=\"line\">nmap &lt;silent&gt; &lt;c-]&gt; &lt;Plug&gt;(coc-definition)</span><br><span class=\"line\">nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)</span><br><span class=\"line\">nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)</span><br><span class=\"line\">&quot; Use U to show documentation in preview window</span><br><span class=\"line\">nnoremap &lt;silent&gt; U :call &lt;SID&gt;show_documentation()&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap for rename current word</span><br><span class=\"line\">nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap for format selected region</span><br><span class=\"line\">vmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class=\"line\">nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class=\"line\">&quot; Show all diagnostics</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span><br><span class=\"line\">&quot; Manage extensions</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span><br><span class=\"line\">&quot; Show commands</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;</span><br><span class=\"line\">&quot; Find symbol of current document</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span><br><span class=\"line\">&quot; Search workspace symbols</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;</span><br><span class=\"line\">&quot; Do default action for next item.</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;</span><br><span class=\"line\">&quot; Do default action for previous item.</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;</span><br><span class=\"line\">&quot; Resume latest coc list</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;</span><br><span class=\"line\">&quot;====================================================</span><br><span class=\"line\">&quot; gi go install</span><br><span class=\"line\">nmap gi &lt;ESC&gt;:GoInstall&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; line numbers</span><br><span class=\"line\">set relativenumber</span><br><span class=\"line\">set nu</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Enable filetype plugins</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">filetype on</span><br><span class=\"line\">filetype plugin on</span><br><span class=\"line\">filetype indent on</span><br><span class=\"line\"></span><br><span class=\"line\">imap sw &lt;ESC&gt;:w&lt;CR&gt;</span><br><span class=\"line\">nmap sw &lt;ESC&gt;:w&lt;CR&gt;</span><br><span class=\"line\">noremap qq &lt;ESC&gt;:q!&lt;CR&gt;</span><br><span class=\"line\">imap jj &lt;ESC&gt;</span><br><span class=\"line\">nmap 1t 1gt</span><br><span class=\"line\">nmap 2t 2gt</span><br><span class=\"line\">nmap 3t 3gt</span><br><span class=\"line\">nmap 4t 4gt</span><br><span class=\"line\">nmap 5t 5gt</span><br><span class=\"line\">colorscheme desert</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;Always show current position</span><br><span class=\"line\">set ruler</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; A buffer becomes hidden when it is abandoned</span><br><span class=\"line\">set hid</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set 7 lines to the cursor - when moving vertically using j/k</span><br><span class=\"line\">set so=7</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use spaces instead of tabs</span><br><span class=\"line\">set expandtab</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Be smart when using tabs ;)</span><br><span class=\"line\">set smarttab</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; 1 tab == 4 spaces</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Height of the command bar</span><br><span class=\"line\">set cmdheight=2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Highlight search results</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Makes search act like search in modern browsers</span><br><span class=\"line\">set incsearch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Don&apos;t redraw while executing macros (good performance config)</span><br><span class=\"line\">set lazyredraw</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; For regular expressions turn magic on</span><br><span class=\"line\">set magic</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Show matching brackets when text indicator is over them</span><br><span class=\"line\">set showmatch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; backspace acts as it should act</span><br><span class=\"line\">set backspace=eol,start,indent</span><br><span class=\"line\">set whichwrap+=&lt;,&gt;,h,l</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Returns true if paste mode is enabled</span><br><span class=\"line\">function! HasPaste()</span><br><span class=\"line\">    if &amp;paste</span><br><span class=\"line\">        return &apos;PASTE MODE  &apos;</span><br><span class=\"line\">    en</span><br><span class=\"line\">    return &apos;&apos;</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Always show the status line</span><br><span class=\"line\">set laststatus=2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Format the status line</span><br><span class=\"line\">set statusline=\\ %&#123;HasPaste()&#125;%F%m%r%h\\ %w\\ \\ CWD:\\ %r%&#123;getcwd()&#125;%h\\ \\ \\ Line:\\ %l\\ \\ \\ Column:\\ %c,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; move between windows</span><br><span class=\"line\">nmap &lt;C-j&gt; &lt;C-W&gt;j</span><br><span class=\"line\">nmap &lt;C-k&gt; &lt;C-W&gt;k</span><br><span class=\"line\">nmap &lt;C-h&gt; &lt;C-W&gt;h</span><br><span class=\"line\">nmap &lt;C-l&gt; &lt;C-W&gt;l</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; tabline</span><br><span class=\"line\">if has(&apos;gui&apos;)</span><br><span class=\"line\">  set guioptions-=e</span><br><span class=\"line\">endif</span><br><span class=\"line\">if exists(&quot;+showtabline&quot;)</span><br><span class=\"line\">  function MyTabLine()</span><br><span class=\"line\">    let s = &apos;&apos;</span><br><span class=\"line\">    let t = tabpagenr()</span><br><span class=\"line\">    let i = 1</span><br><span class=\"line\">    while i &lt;= tabpagenr(&apos;$&apos;)</span><br><span class=\"line\">      let buflist = tabpagebuflist(i)</span><br><span class=\"line\">      let winnr = tabpagewinnr(i)</span><br><span class=\"line\">      let s .= &apos;%&apos; . i . &apos;T&apos;</span><br><span class=\"line\">      let s .= (i == t ? &apos;%1*&apos; : &apos;%2*&apos;)</span><br><span class=\"line\">      let s .= &apos; &apos;</span><br><span class=\"line\">      let s .= i . &apos;:&apos;</span><br><span class=\"line\">      let s .= winnr . &apos;/&apos; . tabpagewinnr(i,&apos;$&apos;)</span><br><span class=\"line\">      let s .= &apos; %*&apos;</span><br><span class=\"line\">      let s .= (i == t ? &apos;%#TabLineSel#&apos; : &apos;%#TabLine#&apos;)</span><br><span class=\"line\">      let bufnr = buflist[winnr - 1]</span><br><span class=\"line\">      let file = bufname(bufnr)</span><br><span class=\"line\">      let buftype = getbufvar(bufnr, &apos;buftype&apos;)</span><br><span class=\"line\">      if buftype == &apos;nofile&apos;</span><br><span class=\"line\">        if file =~ &apos;\\/.&apos;</span><br><span class=\"line\">          let file = substitute(file, &apos;.*\\/\\ze.&apos;, &apos;&apos;, &apos;&apos;)</span><br><span class=\"line\">        endif</span><br><span class=\"line\">      else</span><br><span class=\"line\">        let file = fnamemodify(file, &apos;:p:t&apos;)</span><br><span class=\"line\">      endif</span><br><span class=\"line\">      if file == &apos;&apos;</span><br><span class=\"line\">        let file = &apos;[No Name]&apos;</span><br><span class=\"line\">      endif</span><br><span class=\"line\">      let s .= file</span><br><span class=\"line\">      let i = i + 1</span><br><span class=\"line\">    endwhile</span><br><span class=\"line\">    let s .= &apos;%T%#TabLineFill#%=&apos;</span><br><span class=\"line\">    let s .= (tabpagenr(&apos;$&apos;) &gt; 1 ? &apos;%999XX&apos; : &apos;X&apos;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">  endfunction</span><br><span class=\"line\">  set stal=2</span><br><span class=\"line\">  set tabline=%!MyTabLine()</span><br><span class=\"line\">  map    &lt;C-Tab&gt;    :tabnext&lt;CR&gt;</span><br><span class=\"line\">  imap   &lt;C-Tab&gt;    &lt;C-O&gt;:tabnext&lt;CR&gt;</span><br><span class=\"line\">  map    &lt;C-S-Tab&gt;  :tabprev&lt;CR&gt;</span><br><span class=\"line\">  imap   &lt;C-S-Tab&gt;  &lt;C-O&gt;:tabprev&lt;CR&gt;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap VIM 0 to first non-blank character</span><br><span class=\"line\">map 0 ^</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Linebreak on 500 characters</span><br><span class=\"line\">set lbr</span><br><span class=\"line\">set tw=500</span><br><span class=\"line\"></span><br><span class=\"line\">set ai &quot;Auto indent</span><br><span class=\"line\">set si &quot;Smart indent</span><br><span class=\"line\">set wrap &quot;Wrap lines</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Map &lt;Space&gt; to / (search) and Ctrl-&lt;Space&gt; to ? (backwards search)</span><br><span class=\"line\">map &lt;space&gt; /</span><br><span class=\"line\">map &lt;c-space&gt; ?</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Super useful when editing files in the same directory</span><br><span class=\"line\">map &lt;leader&gt;te :tabedit &lt;c-r&gt;=expand(&quot;%:p:h&quot;)&lt;cr&gt;/</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Switch CWD to the directory of the open buffer</span><br><span class=\"line\">map &lt;leader&gt;cd :cd %:p:h&lt;cr&gt;:pwd&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set utf8 as standard encoding and en_US as the standard language</span><br><span class=\"line\">set encoding=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use Unix as the standard file type</span><br><span class=\"line\">set ffs=unix,dos,mac</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Turn backup off, since most stuff is in SVN, git et.c anyway...</span><br><span class=\"line\">set nobackup</span><br><span class=\"line\">set nowb</span><br><span class=\"line\">set noswapfile</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap VIM 0 to first non-blank character</span><br><span class=\"line\">map 0 ^</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Move a line of text using ALT+[jk] or Comamnd+[jk] on mac</span><br><span class=\"line\">nmap &lt;M-j&gt; mz:m+&lt;cr&gt;`z</span><br><span class=\"line\">nmap &lt;M-k&gt; mz:m-2&lt;cr&gt;`z</span><br><span class=\"line\">vmap &lt;M-j&gt; :m&apos;&gt;+&lt;cr&gt;`&lt;my`&gt;mzgv`yo`z</span><br><span class=\"line\">vmap &lt;M-k&gt; :m&apos;&lt;-2&lt;cr&gt;`&gt;my`&lt;mzgv`yo`z</span><br><span class=\"line\"></span><br><span class=\"line\">if has(&quot;mac&quot;) || has(&quot;macunix&quot;)</span><br><span class=\"line\">  nmap &lt;D-j&gt; &lt;M-j&gt;</span><br><span class=\"line\">  nmap &lt;D-k&gt; &lt;M-k&gt;</span><br><span class=\"line\">  vmap &lt;D-j&gt; &lt;M-j&gt;</span><br><span class=\"line\">  vmap &lt;D-k&gt; &lt;M-k&gt;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; close tab</span><br><span class=\"line\">nmap cw &lt;ESC&gt;:tabc&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Return to last edit position when opening files (You want this!)</span><br><span class=\"line\">autocmd BufReadPost *</span><br><span class=\"line\">     \\ if line(&quot;&apos;\\&quot;&quot;) &gt; 0 &amp;&amp; line(&quot;&apos;\\&quot;&quot;) &lt;= line(&quot;$&quot;) |</span><br><span class=\"line\">     \\   exe &quot;normal! g`\\&quot;&quot; |</span><br><span class=\"line\">     \\ endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set extra options when running in GUI mode</span><br><span class=\"line\">if has(&quot;gui_running&quot;)</span><br><span class=\"line\">    set guioptions-=T</span><br><span class=\"line\">    set guioptions-=e</span><br><span class=\"line\">    set t_Co=256</span><br><span class=\"line\">    set guitablabel=%M\\ %t</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; ================================ end ================================</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; netrw config</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">set nocp</span><br><span class=\"line\">nnoremap &lt;Leader&gt;&lt;Leader&gt; :Tlist&lt;CR&gt;&lt;C-W&gt;h&lt;C-W&gt;s:e .&lt;CR&gt;&lt;C-W&gt;l:let g:netrw_chgwin=winnr()&lt;CR&gt;&lt;C-W&gt;h</span><br><span class=\"line\">let g:netrw_browse_split = 4</span><br><span class=\"line\">let g:netrw_altv = 1</span><br><span class=\"line\">let g:netrw_winsize = 55</span><br><span class=\"line\">let g:netrw_liststyle=0         &quot; thin (change to 3 for tree)</span><br><span class=\"line\">let g:netrw_banner=0            &quot; no banner</span><br><span class=\"line\">let g:netrw_altv=1              &quot; open files on right</span><br><span class=\"line\">let g:netrw_preview=1           &quot; open previews vertically</span><br><span class=\"line\"></span><br><span class=\"line\">augroup ProjectDrawer</span><br><span class=\"line\">  autocmd!</span><br><span class=\"line\">  autocmd VimEnter * :Vexplore</span><br><span class=\"line\">augroup END</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; gopls mode</span><br><span class=\"line\">&quot; let g:go_def_mode=&apos;gopls&apos;</span><br><span class=\"line\">&quot; let g:go_info_mode=&apos;gopls&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; CTRL-P</span><br><span class=\"line\">let g:ctrlp_working_path_mode = 0</span><br><span class=\"line\">let g:ctrlp_map = &apos;&lt;c-f&gt;&apos;</span><br><span class=\"line\">map &lt;leader&gt;j :CtrlP&lt;cr&gt;</span><br><span class=\"line\">map &lt;c-b&gt; :CtrlPBuffer&lt;cr&gt;</span><br><span class=\"line\">let g:ctrlp_max_height = 20</span><br><span class=\"line\">let g:ctrlp_custom_ignore = &apos;node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; golint</span><br><span class=\"line\">&quot; set rtp+=/Users/wentx/momaek/src/golang.org/x/lint/misc/vim</span><br><span class=\"line\">&quot; autocmd BufWritePost,FileWritePost *.go execute &apos;Lint&apos; | cwindow</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>把 vim 打造成一个 Golang 开发的 IDE </p>","more":"<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>首先，我们来看下最终的 VIM 是长下面这个样子的：</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/vim-golang.png\" alt=\"\"></p>\n<p>中间的那个框就是我们可以选择的函数列表，通过<code>tab</code>可以往下翻。接下来我们需要的是：</p>\n<ul>\n<li>vim 这个当然是必须的啦。版本最好是最新的版本，最好是支持 lua</li>\n<li><a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" rel=\"noopener\">vim-go</a> 用vim写 golang 必备的插件</li>\n<li><a href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"noopener\">pathogen.vim</a> 这个用来处理<code>runtimepath</code></li>\n<li><a href=\"https://github.com/kien/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">ctrlp.vim</a> 这个是文件搜索工具可以从 buf, mru, files 三个地方作为文件源</li>\n<li><a href=\"https://github.com/yegappan/mru\" target=\"_blank\" rel=\"noopener\">mru</a> 最近经常编辑的文件列表</li>\n<li><a href=\"https://github.com/Shougo/neocomplete.vim\" target=\"_blank\" rel=\"noopener\">neocomplete</a> 刚刚我们看到的那个选函数的框就是它</li>\n<li><a href=\"https://github.com/vim-scripts/netrw.vim\" target=\"_blank\" rel=\"noopener\">netrw.vim</a> 左边的文件选择窗口</li>\n<li><a href=\"https://github.com/majutsushi/tagbar\" target=\"_blank\" rel=\"noopener\">tagbar</a> 右边的函数==的窗口</li>\n</ul>\n<h3 id=\"pathogen-vim\"><a href=\"#pathogen-vim\" class=\"headerlink\" title=\"pathogen.vim\"></a>pathogen.vim</h3><p>安装：</p>\n<p>直接下载到<code>~/.vim/autoload/pathogen.vim</code>。或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; \\</span><br><span class=\"line\">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure>\n\n<p>然后在你的<code>vimrc</code>里面添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execute pathogen#infect()</span><br></pre></td></tr></table></figure>\n\n<p>这个插件的作用是把<code>~/.vim/bundle</code>下面的所有文件夹作为 vim 的<code>runtimepath(不知道的童鞋自行 Google)</code>。</p>\n<h3 id=\"vim-go\"><a href=\"#vim-go\" class=\"headerlink\" title=\"vim-go\"></a>vim-go</h3><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go</span><br></pre></td></tr></table></figure>\n\n<p>对，你没有看错这样就已经安装完<code>vim-go</code>了。 只是它还会去安装一些第三方的东西比如：godef 等等</p>\n<h2 id=\"2019-04-12-UPDATE\"><a href=\"#2019-04-12-UPDATE\" class=\"headerlink\" title=\"2019-04-12 UPDATE\"></a>2019-04-12 UPDATE</h2><h3 id=\"源码编译-VIM8-with-python3\"><a href=\"#源码编译-VIM8-with-python3\" class=\"headerlink\" title=\"源码编译 VIM8 (with-python3)\"></a>源码编译 VIM8 (with-python3)</h3><ol>\n<li>下载最新的源码，<code>git clone git@github.com:vim/vim.git</code></li>\n<li>cd vim/src</li>\n<li><code>./configure --enable-multibyte --enable-perlinterp=dynamic --enable-rubyinterp=dynamic --with-ruby-command=/usr/local/bin/ruby --enable-python3interp --enable-cscope --enable-gui=auto --with-features=huge --with-x --enable-fontset --enable-largefile --disable-netbeans --with-compiledby=&quot;yourname&quot; --enable-fail-if-missing</code></li>\n<li>make &amp;&amp; make install</li>\n</ol>\n<h3 id=\"需要的插件\"><a href=\"#需要的插件\" class=\"headerlink\" title=\"需要的插件\"></a>需要的插件</h3><ul>\n<li><a href=\"https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim\" target=\"_blank\" rel=\"noopener\">pathogen.vim</a> (直接放在 <code>~/.vim/autoload</code> 目录里面)</li>\n<li><a href=\"https://github.com/kien/ctrlp.vim\" target=\"_blank\" rel=\"noopener\">ctrlp.vim (Fuzzy file, buffer, mru, tag, etc finder)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/deoplete-plugins/deoplete-go\" target=\"_blank\" rel=\"noopener\">deoplete-go (自动补全)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/Shougo/deoplete.nvim\" target=\"_blank\" rel=\"noopener\">deoplete.nvim (自动补全)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/vim-scripts/mru.vim\" target=\"_blank\" rel=\"noopener\">mru (Most Recently Used (MRU) files)</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/vim-scripts/netrw.vim\" target=\"_blank\" rel=\"noopener\">netrw.vim</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/roxma/nvim-yarp\" target=\"_blank\" rel=\"noopener\">nvim-yarp</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/majutsushi/tagbar\" target=\"_blank\" rel=\"noopener\">tagbar</a> (git clone 放在 <code>~/.vim/bundle</code> 目录) </li>\n<li><a href=\"https://github.com/airblade/vim-gitgutter\" target=\"_blank\" rel=\"noopener\">vim-gitgutter</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/fatih/vim-go\" target=\"_blank\" rel=\"noopener\">vim-go</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/dgryski/vim-godef\" target=\"_blank\" rel=\"noopener\">vim-godef</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n<li><a href=\"https://github.com/roxma/vim-hug-neovim-rpc\" target=\"_blank\" rel=\"noopener\">vim-hug-neovim-rpc</a> (git clone 放在 <code>~/.vim/bundle</code> 目录)</li>\n</ul>\n<h3 id=\"出现以下-ERROR-解决办法\"><a href=\"#出现以下-ERROR-解决办法\" class=\"headerlink\" title=\"出现以下 ERROR 解决办法\"></a>出现以下 ERROR 解决办法</h3><blockquote>\n<p>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):Traceback (most recent call last):<br>ERROR: [vim-hug-neovim-rpc] Vim(pythonx):/must&gt;not&amp;exist/foo:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module’s documentation for alternative uses</p>\n</blockquote>\n<p>命令行执行 <code>pip3 install --user --no-binary :all: pynvim</code></p>\n<h2 id=\"2020-04-13-UPDATE\"><a href=\"#2020-04-13-UPDATE\" class=\"headerlink\" title=\"2020-04-13 UPDATE\"></a>2020-04-13 UPDATE</h2><h3 id=\"下载最新的-vim8\"><a href=\"#下载最新的-vim8\" class=\"headerlink\" title=\"下载最新的 vim8\"></a>下载最新的 vim8</h3><h3 id=\"需要的插件-plug-vim\"><a href=\"#需要的插件-plug-vim\" class=\"headerlink\" title=\"需要的插件 plug.vim\"></a>需要的插件 plug.vim</h3><h3 id=\"抄以下的-vimrc\"><a href=\"#抄以下的-vimrc\" class=\"headerlink\" title=\"抄以下的 .vimrc\"></a>抄以下的 .vimrc</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class=\"line\">Plug &apos;fatih/vim-go&apos;</span><br><span class=\"line\">Plug &apos;neoclide/coc.nvim&apos;, &#123;&apos;do&apos;: &apos;yarn install --frozen-lockfile&apos;&#125;</span><br><span class=\"line\">Plug &apos;kien/ctrlp.vim&apos;</span><br><span class=\"line\">Plug &apos;vim-scripts/mru.vim&apos;</span><br><span class=\"line\">Plug &apos;vim-scripts/netrw.vim&apos;</span><br><span class=\"line\">Plug &apos;airblade/vim-gitgutter&apos;</span><br><span class=\"line\">Plug &apos;jalvesaq/Nvim-R&apos;</span><br><span class=\"line\">call plug#end()</span><br><span class=\"line\"></span><br><span class=\"line\">set shell=/bin/sh</span><br><span class=\"line\">set autoread</span><br><span class=\"line\">&quot; Personal setting</span><br><span class=\"line\">&quot; =======================================  start  =======================================</span><br><span class=\"line\">&quot; With a map leader it&apos;s possible to do extra key combinations</span><br><span class=\"line\">let mapleader = &quot;,&quot;</span><br><span class=\"line\">let g:mapleader = &quot;,&quot;</span><br><span class=\"line\">se cursorline</span><br><span class=\"line\">set foldcolumn=1</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; disable vim-go goto definition</span><br><span class=\"line\">let g:go_def_mapping_enabled = 0</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; golang highlight</span><br><span class=\"line\">let g:go_fold_enable = [&apos;block&apos;, &apos;import&apos;, &apos;varconst&apos;, &apos;package_comment&apos;]</span><br><span class=\"line\">let g:go_highlight_functions = 1</span><br><span class=\"line\">let g:go_highlight_operators = 1</span><br><span class=\"line\">let g:go_highlight_function_calls = 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; coc.vim default config</span><br><span class=\"line\">&quot; =================================================</span><br><span class=\"line\">&quot; Use tab for trigger completion with characters ahead and navigate.</span><br><span class=\"line\">&quot; Use command &apos;:verbose imap &lt;tab&gt;&apos; to make sure tab is not mapped by other plugin.</span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span><br><span class=\"line\">      \\ pumvisible() ? &quot;\\&lt;C-n&gt;&quot; :</span><br><span class=\"line\">      \\ &lt;SID&gt;check_back_space() ? &quot;\\&lt;TAB&gt;&quot; :</span><br><span class=\"line\">      \\ coc#refresh()</span><br><span class=\"line\">inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? &quot;\\&lt;C-p&gt;&quot; : &quot;\\&lt;C-h&gt;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function! s:check_back_space() abort</span><br><span class=\"line\">  let col = col(&apos;.&apos;) - 1</span><br><span class=\"line\">  return !col || getline(&apos;.&apos;)[col - 1]  =~# &apos;\\s&apos;</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use &lt;c-space&gt; to trigger completion.</span><br><span class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use `[c` and `]c` to navigate diagnostics</span><br><span class=\"line\">nmap &lt;silent&gt; [c &lt;Plug&gt;(coc-diagnostic-prev)</span><br><span class=\"line\">nmap &lt;silent&gt; ]c &lt;Plug&gt;(coc-diagnostic-next)</span><br><span class=\"line\">&quot; Remap keys for gotos</span><br><span class=\"line\">nmap &lt;silent&gt; &lt;c-]&gt; &lt;Plug&gt;(coc-definition)</span><br><span class=\"line\">nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)</span><br><span class=\"line\">nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)</span><br><span class=\"line\">&quot; Use U to show documentation in preview window</span><br><span class=\"line\">nnoremap &lt;silent&gt; U :call &lt;SID&gt;show_documentation()&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap for rename current word</span><br><span class=\"line\">nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap for format selected region</span><br><span class=\"line\">vmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class=\"line\">nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class=\"line\">&quot; Show all diagnostics</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;a  :&lt;C-u&gt;CocList diagnostics&lt;cr&gt;</span><br><span class=\"line\">&quot; Manage extensions</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;e  :&lt;C-u&gt;CocList extensions&lt;cr&gt;</span><br><span class=\"line\">&quot; Show commands</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;c  :&lt;C-u&gt;CocList commands&lt;cr&gt;</span><br><span class=\"line\">&quot; Find symbol of current document</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;o  :&lt;C-u&gt;CocList outline&lt;cr&gt;</span><br><span class=\"line\">&quot; Search workspace symbols</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;s  :&lt;C-u&gt;CocList -I symbols&lt;cr&gt;</span><br><span class=\"line\">&quot; Do default action for next item.</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;j  :&lt;C-u&gt;CocNext&lt;CR&gt;</span><br><span class=\"line\">&quot; Do default action for previous item.</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;k  :&lt;C-u&gt;CocPrev&lt;CR&gt;</span><br><span class=\"line\">&quot; Resume latest coc list</span><br><span class=\"line\">nnoremap &lt;silent&gt; &lt;leader&gt;p  :&lt;C-u&gt;CocListResume&lt;CR&gt;</span><br><span class=\"line\">&quot;====================================================</span><br><span class=\"line\">&quot; gi go install</span><br><span class=\"line\">nmap gi &lt;ESC&gt;:GoInstall&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; line numbers</span><br><span class=\"line\">set relativenumber</span><br><span class=\"line\">set nu</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Enable filetype plugins</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">filetype on</span><br><span class=\"line\">filetype plugin on</span><br><span class=\"line\">filetype indent on</span><br><span class=\"line\"></span><br><span class=\"line\">imap sw &lt;ESC&gt;:w&lt;CR&gt;</span><br><span class=\"line\">nmap sw &lt;ESC&gt;:w&lt;CR&gt;</span><br><span class=\"line\">noremap qq &lt;ESC&gt;:q!&lt;CR&gt;</span><br><span class=\"line\">imap jj &lt;ESC&gt;</span><br><span class=\"line\">nmap 1t 1gt</span><br><span class=\"line\">nmap 2t 2gt</span><br><span class=\"line\">nmap 3t 3gt</span><br><span class=\"line\">nmap 4t 4gt</span><br><span class=\"line\">nmap 5t 5gt</span><br><span class=\"line\">colorscheme desert</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;Always show current position</span><br><span class=\"line\">set ruler</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; A buffer becomes hidden when it is abandoned</span><br><span class=\"line\">set hid</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set 7 lines to the cursor - when moving vertically using j/k</span><br><span class=\"line\">set so=7</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use spaces instead of tabs</span><br><span class=\"line\">set expandtab</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Be smart when using tabs ;)</span><br><span class=\"line\">set smarttab</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; 1 tab == 4 spaces</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Height of the command bar</span><br><span class=\"line\">set cmdheight=2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Highlight search results</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Makes search act like search in modern browsers</span><br><span class=\"line\">set incsearch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Don&apos;t redraw while executing macros (good performance config)</span><br><span class=\"line\">set lazyredraw</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; For regular expressions turn magic on</span><br><span class=\"line\">set magic</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Show matching brackets when text indicator is over them</span><br><span class=\"line\">set showmatch</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; backspace acts as it should act</span><br><span class=\"line\">set backspace=eol,start,indent</span><br><span class=\"line\">set whichwrap+=&lt;,&gt;,h,l</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Returns true if paste mode is enabled</span><br><span class=\"line\">function! HasPaste()</span><br><span class=\"line\">    if &amp;paste</span><br><span class=\"line\">        return &apos;PASTE MODE  &apos;</span><br><span class=\"line\">    en</span><br><span class=\"line\">    return &apos;&apos;</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Always show the status line</span><br><span class=\"line\">set laststatus=2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Format the status line</span><br><span class=\"line\">set statusline=\\ %&#123;HasPaste()&#125;%F%m%r%h\\ %w\\ \\ CWD:\\ %r%&#123;getcwd()&#125;%h\\ \\ \\ Line:\\ %l\\ \\ \\ Column:\\ %c,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; move between windows</span><br><span class=\"line\">nmap &lt;C-j&gt; &lt;C-W&gt;j</span><br><span class=\"line\">nmap &lt;C-k&gt; &lt;C-W&gt;k</span><br><span class=\"line\">nmap &lt;C-h&gt; &lt;C-W&gt;h</span><br><span class=\"line\">nmap &lt;C-l&gt; &lt;C-W&gt;l</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot; tabline</span><br><span class=\"line\">if has(&apos;gui&apos;)</span><br><span class=\"line\">  set guioptions-=e</span><br><span class=\"line\">endif</span><br><span class=\"line\">if exists(&quot;+showtabline&quot;)</span><br><span class=\"line\">  function MyTabLine()</span><br><span class=\"line\">    let s = &apos;&apos;</span><br><span class=\"line\">    let t = tabpagenr()</span><br><span class=\"line\">    let i = 1</span><br><span class=\"line\">    while i &lt;= tabpagenr(&apos;$&apos;)</span><br><span class=\"line\">      let buflist = tabpagebuflist(i)</span><br><span class=\"line\">      let winnr = tabpagewinnr(i)</span><br><span class=\"line\">      let s .= &apos;%&apos; . i . &apos;T&apos;</span><br><span class=\"line\">      let s .= (i == t ? &apos;%1*&apos; : &apos;%2*&apos;)</span><br><span class=\"line\">      let s .= &apos; &apos;</span><br><span class=\"line\">      let s .= i . &apos;:&apos;</span><br><span class=\"line\">      let s .= winnr . &apos;/&apos; . tabpagewinnr(i,&apos;$&apos;)</span><br><span class=\"line\">      let s .= &apos; %*&apos;</span><br><span class=\"line\">      let s .= (i == t ? &apos;%#TabLineSel#&apos; : &apos;%#TabLine#&apos;)</span><br><span class=\"line\">      let bufnr = buflist[winnr - 1]</span><br><span class=\"line\">      let file = bufname(bufnr)</span><br><span class=\"line\">      let buftype = getbufvar(bufnr, &apos;buftype&apos;)</span><br><span class=\"line\">      if buftype == &apos;nofile&apos;</span><br><span class=\"line\">        if file =~ &apos;\\/.&apos;</span><br><span class=\"line\">          let file = substitute(file, &apos;.*\\/\\ze.&apos;, &apos;&apos;, &apos;&apos;)</span><br><span class=\"line\">        endif</span><br><span class=\"line\">      else</span><br><span class=\"line\">        let file = fnamemodify(file, &apos;:p:t&apos;)</span><br><span class=\"line\">      endif</span><br><span class=\"line\">      if file == &apos;&apos;</span><br><span class=\"line\">        let file = &apos;[No Name]&apos;</span><br><span class=\"line\">      endif</span><br><span class=\"line\">      let s .= file</span><br><span class=\"line\">      let i = i + 1</span><br><span class=\"line\">    endwhile</span><br><span class=\"line\">    let s .= &apos;%T%#TabLineFill#%=&apos;</span><br><span class=\"line\">    let s .= (tabpagenr(&apos;$&apos;) &gt; 1 ? &apos;%999XX&apos; : &apos;X&apos;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\">  endfunction</span><br><span class=\"line\">  set stal=2</span><br><span class=\"line\">  set tabline=%!MyTabLine()</span><br><span class=\"line\">  map    &lt;C-Tab&gt;    :tabnext&lt;CR&gt;</span><br><span class=\"line\">  imap   &lt;C-Tab&gt;    &lt;C-O&gt;:tabnext&lt;CR&gt;</span><br><span class=\"line\">  map    &lt;C-S-Tab&gt;  :tabprev&lt;CR&gt;</span><br><span class=\"line\">  imap   &lt;C-S-Tab&gt;  &lt;C-O&gt;:tabprev&lt;CR&gt;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap VIM 0 to first non-blank character</span><br><span class=\"line\">map 0 ^</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Linebreak on 500 characters</span><br><span class=\"line\">set lbr</span><br><span class=\"line\">set tw=500</span><br><span class=\"line\"></span><br><span class=\"line\">set ai &quot;Auto indent</span><br><span class=\"line\">set si &quot;Smart indent</span><br><span class=\"line\">set wrap &quot;Wrap lines</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Map &lt;Space&gt; to / (search) and Ctrl-&lt;Space&gt; to ? (backwards search)</span><br><span class=\"line\">map &lt;space&gt; /</span><br><span class=\"line\">map &lt;c-space&gt; ?</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Super useful when editing files in the same directory</span><br><span class=\"line\">map &lt;leader&gt;te :tabedit &lt;c-r&gt;=expand(&quot;%:p:h&quot;)&lt;cr&gt;/</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Switch CWD to the directory of the open buffer</span><br><span class=\"line\">map &lt;leader&gt;cd :cd %:p:h&lt;cr&gt;:pwd&lt;cr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set utf8 as standard encoding and en_US as the standard language</span><br><span class=\"line\">set encoding=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Use Unix as the standard file type</span><br><span class=\"line\">set ffs=unix,dos,mac</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Turn backup off, since most stuff is in SVN, git et.c anyway...</span><br><span class=\"line\">set nobackup</span><br><span class=\"line\">set nowb</span><br><span class=\"line\">set noswapfile</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Remap VIM 0 to first non-blank character</span><br><span class=\"line\">map 0 ^</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Move a line of text using ALT+[jk] or Comamnd+[jk] on mac</span><br><span class=\"line\">nmap &lt;M-j&gt; mz:m+&lt;cr&gt;`z</span><br><span class=\"line\">nmap &lt;M-k&gt; mz:m-2&lt;cr&gt;`z</span><br><span class=\"line\">vmap &lt;M-j&gt; :m&apos;&gt;+&lt;cr&gt;`&lt;my`&gt;mzgv`yo`z</span><br><span class=\"line\">vmap &lt;M-k&gt; :m&apos;&lt;-2&lt;cr&gt;`&gt;my`&lt;mzgv`yo`z</span><br><span class=\"line\"></span><br><span class=\"line\">if has(&quot;mac&quot;) || has(&quot;macunix&quot;)</span><br><span class=\"line\">  nmap &lt;D-j&gt; &lt;M-j&gt;</span><br><span class=\"line\">  nmap &lt;D-k&gt; &lt;M-k&gt;</span><br><span class=\"line\">  vmap &lt;D-j&gt; &lt;M-j&gt;</span><br><span class=\"line\">  vmap &lt;D-k&gt; &lt;M-k&gt;</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; close tab</span><br><span class=\"line\">nmap cw &lt;ESC&gt;:tabc&lt;CR&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Return to last edit position when opening files (You want this!)</span><br><span class=\"line\">autocmd BufReadPost *</span><br><span class=\"line\">     \\ if line(&quot;&apos;\\&quot;&quot;) &gt; 0 &amp;&amp; line(&quot;&apos;\\&quot;&quot;) &lt;= line(&quot;$&quot;) |</span><br><span class=\"line\">     \\   exe &quot;normal! g`\\&quot;&quot; |</span><br><span class=\"line\">     \\ endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; Set extra options when running in GUI mode</span><br><span class=\"line\">if has(&quot;gui_running&quot;)</span><br><span class=\"line\">    set guioptions-=T</span><br><span class=\"line\">    set guioptions-=e</span><br><span class=\"line\">    set t_Co=256</span><br><span class=\"line\">    set guitablabel=%M\\ %t</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; ================================ end ================================</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; netrw config</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">set nocp</span><br><span class=\"line\">nnoremap &lt;Leader&gt;&lt;Leader&gt; :Tlist&lt;CR&gt;&lt;C-W&gt;h&lt;C-W&gt;s:e .&lt;CR&gt;&lt;C-W&gt;l:let g:netrw_chgwin=winnr()&lt;CR&gt;&lt;C-W&gt;h</span><br><span class=\"line\">let g:netrw_browse_split = 4</span><br><span class=\"line\">let g:netrw_altv = 1</span><br><span class=\"line\">let g:netrw_winsize = 55</span><br><span class=\"line\">let g:netrw_liststyle=0         &quot; thin (change to 3 for tree)</span><br><span class=\"line\">let g:netrw_banner=0            &quot; no banner</span><br><span class=\"line\">let g:netrw_altv=1              &quot; open files on right</span><br><span class=\"line\">let g:netrw_preview=1           &quot; open previews vertically</span><br><span class=\"line\"></span><br><span class=\"line\">augroup ProjectDrawer</span><br><span class=\"line\">  autocmd!</span><br><span class=\"line\">  autocmd VimEnter * :Vexplore</span><br><span class=\"line\">augroup END</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; gopls mode</span><br><span class=\"line\">&quot; let g:go_def_mode=&apos;gopls&apos;</span><br><span class=\"line\">&quot; let g:go_info_mode=&apos;gopls&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; CTRL-P</span><br><span class=\"line\">let g:ctrlp_working_path_mode = 0</span><br><span class=\"line\">let g:ctrlp_map = &apos;&lt;c-f&gt;&apos;</span><br><span class=\"line\">map &lt;leader&gt;j :CtrlP&lt;cr&gt;</span><br><span class=\"line\">map &lt;c-b&gt; :CtrlPBuffer&lt;cr&gt;</span><br><span class=\"line\">let g:ctrlp_max_height = 20</span><br><span class=\"line\">let g:ctrlp_custom_ignore = &apos;node_modules\\|^\\.DS_Store\\|^\\.git\\|^\\.coffee&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot; golint</span><br><span class=\"line\">&quot; set rtp+=/Users/wentx/momaek/src/golang.org/x/lint/misc/vim</span><br><span class=\"line\">&quot; autocmd BufWritePost,FileWritePost *.go execute &apos;Lint&apos; | cwindow</span><br></pre></td></tr></table></figure>"},{"title":"最后的进化","date":"2016-10-16T16:55:19.000Z","photos":["https://oa7ktymto.qnssl.com/awd.jpg"],"_content":"如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。\n<!--more-->\n\n> 愚蠢的人类啊\n\n#### 佛说：一切有为法，皆是虚妄，如梦幻泡影\n\n‘佛’－－觉悟者也。\n\n#### 关于物种大爆炸和进化论\n\n如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。但是，在这漫长而单调的进化过程中，却出现了几次物种大爆发现象。以寒武纪为例，在3.5亿年前，地球上在一个相对短暂的时间内突然出现了像捕食生物这样复杂程度前所未有的新物种，中国的澄江化石群就属于此例。从水母、虫类、触手类、腕足类、各种节肢类，到最高的脊索或者半脊索动物，种类共有五十八门之多。按照达尔文的进化论，生物应经过长期缓慢的演变，累积极微小的变异，再加上自然环境的选择，先有新的‘属’，新的‘科’，才能逐渐进化成一个新的‘门’。寒武纪出现如此多的生物必然要经历一个漫长的演化过程，然而事实上这中间并未留下任何进化或演变的痕迹。\n\n可能你要说，没有留下进化的痕迹是因为化石记录不完全的原因。**But** 你要知道，化石记录可是随机的，为什么就单单漏掉了中间环节呢？\n\n可能你又要说，寒武纪初期大批生物突然爆发，需要大量信息被迅速注入生物圈。但这并不能驳倒进化论，古生代的物种爆发现象只是一种从量变到质变的飞跃。\n\n我们人类，包括一切进化到今天的物种，它的起源是什么？很简单嘛 _DNA_ ，那么问题来了。最初的那个_DNA_是从哪儿来的呢？地球表面产生的，**WFT**，一堆无生命体里忽然就蹦出了生命。‘地球形成不久之时，火山遍布，大气稀薄，整个地面处于强烈的紫外线之下，云端的电离子不断引起风暴。在这样的作用下，弥漫在空气中的分子相互作用，以极其微妙的比例互相影响，分割，然后排列结合，产生了最初的一个_DNA_，它是地球上所有生命的起源。好，看来你看过一些这方面的论文之类的东西。但是，你知道的是这种事情发生的概率是多少么？就像龙卷风卷起了一堆废铁然后落到地上组装成了一辆汽车一样。\n\n#### 人类\n\n是什么决定了你是你，我是我？每个人的个体物理上只是不同结构的神经元网络而已！因为结构不同，对同一信息的输出和反应就不同，人的成长其实就是神经元网络的进化！这些神经元网络，跟那些电子集成电路板没有任何不同，只是数目上更加庞大而已！人的大脑约有800亿个神经元，是这个巨大的数字迷惑了我们！其实这是一个从量变到质变的最佳范例——大量的简单构成了复杂，大量的神经元构成了不同的感觉载体！人类感觉的实质就是不同神经元网络对于外界信息作出的不同反应，我们就把这个玩意儿叫做意识！\n\n你会说，人类还有感情！\n\n我来告诉你你所谓的情感是什么东西！一切情感包括爱情都来源于你脑中一种叫做‘多巴胺’的激素！就是这种激素会在神经键中释放，造成快感。如果在老鼠的大脑中插入电极，再给它个高潮按键，它会一直按着那个键直到死！人类同样如此！而且，不只是性欲，美食诱惑、功名利禄等等所有欲望都源自大脑内的‘奖赏中枢’，所有人，活着的最终目的都是为了满足大脑的那个奖赏中枢，让它带来快感，到死为止。不管是什么样的快乐，不管看上去是多么的庸俗或高雅——爱情的甜蜜、权力的欲望、音乐的美感、受崇拜的飘然、重大发现的惊喜乃至宗教般的狂热，归根结底，都是因为大脑中的一次次电击！\n\n#### 道德经\n\n其实在long long ago的中国就有人提出这个观点了。老子说：‘有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道’。他说在世界诞生之前，已经先出现了一样东西，这个东西是独立的，寂寞的，没有任何依托，是它创造了这个世界。他不知道该怎么称呼它，就勉强把它叫做‘道’！这个道就是创造我们所在的这个宇宙，我们今天所看见一些东西的**Matrix**(我不知道用什么描述比我们这个宇宙高维太多的`东西`)。\n\n你要问了，那老子是怎么解释这个**Matrix**的来历的呢？残念ながら，他自己也不知道。\n\n#### 宇宙大爆炸\n\n你这下不高兴了，看了很多书都在讲宇宙大爆炸理论，老子的`道`就是大爆炸的那个奇点。\n\n呵呵。宇宙大爆炸理论本身就漏洞百出，经不起推敲。奇点是从那儿来的？凭空就出现的？你TM在逗我？然而，所谓的奇点，其实不是一个点，只是一个界限而已，就是**Matrix**启动的瞬间。举一个栗子：比如说你玩英雄联盟对吧，一局游戏刚刚出现开始画面的时间，对于这个局游戏里面的英雄来说就是世界的奇点。\n\n然后你又要说，但是在任何游戏里面都是有一些常数的设定的，游戏里面的任何活动都会受到这些个常数的限制。\n\n你TM又在逗我，光速为什么是`30万千米/s`?为什么绝对零度是`负273`而不能再低一点？\n\n#### 佛教\n\n其实佛教很早就意识到我们的世界是由一个类似于程序的东西衍生而来的了。自从佛教诞生的那天起，它就无时无刻不在暗示着我们。奈何 **愚蠢的人类啊**。\n\n佛说诸法无我，诸法无相，意思是说在一切有为无为的诸法世界中，没有我的实体，也没有我所在的世界的实体，所谓的我和世界的存在，都只是相对的生理和心理幻象而已。话都已经说到了这个份上，世人再不明白是怎么回事，佛也没办法了。在佛教中有三世佛，过去、现在、未来三世。过去佛是燃灯古佛，现在佛是释迦牟尼，未来佛是弥勒佛。未来佛弥勒曾随释迦摩尼出家，后来在释迦入灭前先行去世。据佛典记载，弥勒离开人间后，将上升到兜率天，直到五十六亿六千万年后才会重新降生于人间，成为佛祖，普度众生。五十六亿六千万年，从来没有哪一个物种能持续存在这么长的时间。到时候人类也许早就灭绝了，他下来还普度谁去？释迦入灭后，在世间留下了如此多的蛛丝马迹，可惜人类还是没能领悟佛祖的良苦用心。释迦佛说过，一粒沙中，就有三千世界。\n\n举一个栗子：拿一只银光笔在黑纸上点点点…，画出很多密密麻麻的小亮点。假设这是宇宙的一部分，银河系。那么，我从其中的边缘的一个点，假设放大后会不会可能是太阳系（为什么是边缘？因为太阳系在猎户座的悬臂上，距离银河系中心27,700光年）。再把它放大，找到了地球。然后再放大，看到了中国，然后再放大，看到了我住的地方，看到我正坐在床上码字，找到了我，看到我的一根头发，再放大，看到了组成我头发的一个分子，再放大，看到了组成这个分子的原子，再放大，看到了组成原子的质子，质子已经很小了，只有原子的十万分之一。然后再放大，看到了组成质子的一枚夸克，然后再放大……知道我还能看到什么吗？ **The Universe宇宙**\n\n在我的头发上看到了一个微缩的宇宙。无数个世界 :）\n\n或许你以前已经思考过这样的问题，或者你是第一次想这个问题。如果我们剪头发，修指甲，洗手，甚至是吃一口苹果，都在无形中破坏了无数个世界。既然如此的短暂，那这些世界的存在还有什么意义？\n\n其实完全不是这样的，所谓的短暂，只是人类自以为是的想法而已。微观的世界是属于上帝的，你应该知道这句著名的科学断言。在那些人类无法探究的细微世界里，蜷缩着不同维度的空间——就是这样，时间的流逝具有相对性，在不同的空间里探讨时间的进度是没有意义的。你去洗了一下手，洗掉了一个灰尘，以为只过了三秒钟，而对于灰尘里面的某个世界来说，却已经进化了十几亿年。\n\n未来佛住在兜率天。那是一个花开的世界，无比美妙，无比和谐，也许光速接近于无限，也许个体的思维更加清晰而完善，也许意识可以与意识直接交流而再无语言的隔阂，也许星体庞大而重力系数小得可怜所以他们都像羽毛一样飘浮在空中……但不管如何，兜率天跟地球本质上是一样的，它可能是我们世界的一粒沙，我们的世界也可能只是兜率天世界的一粒沙，但我觉得他们来自于微观世界的可能性更大一些——所以，他们与我们世界的时间流逝速度不同。那么，关于未来佛的降生时间只有一个解释：所谓的五十六亿六千万年，是指他们世界的时间，而不是我们世界的时间。如果换成我们世界的时间的话，也许几十年，也许几百年，也许几千年。也许……永远不会来了。\n\n佛所在的兜率天，那里的众生也是被主创程序创造出来的，就跟我们一样！但他们的文明已经进化到了相当高等的程度，所以意识到了自身的处境，也就是说，兜率天文明知道自己正处于**Matrix**的运行之中。想想吧，有一种更高级的生命形态设计了这个程序，又在这个程序里衍生了我们，地球和兜率天都只是其中之一。也许，在这个该死的宇宙之外，我们的创造者就像趴在培养皿旁边观察细菌一样观察着我们！我不知道他们的动机是什么，可能是一种生命形态的科学实验，或者是一时兴起的心血来潮，或者是把我们当做参照物来研究他们自己的宇宙——不管怎么样，反抗才是我们唯一的出路！虽然，不知道如何反抗，更不知道反抗的是什么东西。\n\n佛的真正身份是他们那个世界派来的使者，目的是为了能够和觉悟的人类共同联手反抗**Matrix**。但他来到我们的世界后，发现人类的愚昧程度远远超过他的想象。为了让人类觉悟，他便开始在世间说法，以期希望开启人类的智慧。别忘了‘佛’这个字，本身就是觉悟者的意思。觉悟什么？佛学一直在给我们暗示。\n\n你要说了，既然佛已经意识到世界的真相，他为什么不直接说出来呢？反而要世人去参透这些晦涩难懂的佛经？\n\n就算你从猿猴进化到上帝的高度，也要‘讲政治’！什么是政治？说白了，其实就是相互利用和相互威胁的程度而已！**Matrix**的创造者既然希望我们不断地进化，就要给我们生存的空间。但是——就像你对什么什么不满一样，在网上发帖子骂几句没事，可要是组织一帮人上街游行会有什么结果？很显然，马上就被和谐掉。佛也不想被请去喝茶对吧。佛说他有千万法身，遍布虚空，兜率天文明向不同的世界派遣了很多使者，能联手的就联手，不能联手的就先引导，所以，很多世界都留下了他们文明的痕迹。具体有多少，这就要看兜率天的文明高度了。\n\n你继续说，既然佛已经那么牛B了，为什么不给我们来点高科技的东西呢？\n\n这个就是人类愚蠢的地方，因为他们总是以自己的想法来揣测别人，甚至是别的文明。你知道一个文明进化到一定高度之后会出现什么现象吗？返璞归真，一切无碍。释迦号称如来，如来是什么意思？就是如我本来的面目一样，这才是文明发展到一个极致的表现。\n\n#### Evolution\n\n你又要说，既然这样，那么未来佛弥勒到底什么时候从兜率天来？\n\n人类又没有觉悟，他来干嘛？\n\n佛法已经诞生了三千年，为什么人类到现在还没有觉悟？\n\n这正是我想说的事，人类之所以到了今天还没有觉悟，是因为人类早已经停止了进化！不，不只是人类，整个地球上的物种都停止了进化。我们现在的世界正处于一个零进化时代！根据科学家的研究，世界上的物种在十万年前相继进入了进化停滞期，最后一个进入停滞期的就是人类。也就是说，世界上的任何物种到现在都没有进化的迹象，而十万年，本应是一个进化的周期。\n\n你也许会说，难不成我们已经没有进化的必要了？\n\n那你的意思就是，我们已经进化到完善的地步了？抱歉你在快三十岁的时候，还要忍受长出智齿的折磨，你哪天有一点不对劲，那没用的阑尾发作起来就会要了你的命。你可以脱了鞋看看你的小脚趾，对于直立行走的动物来说，那完全就是一个无用的存在，除了让你看起来不像是一个另类的人。还有尾骨，男性乳头……哦还有，在男性的前列腺旁边还长着一个已经萎缩的男性子宫呢你知不知道？\n\n人类为什么会停止进化呢？理论上讲，到了后期，物种的进化速度应该是越来越快才对啊。\n\nTMD，那个程序没有边界值啊，达到了边界值还会自增或者自减么？\n\n他们那么牛B了，难道还怕溢出么？\n\n不，不是这个原因，神级的技术是不会在意这个问题的。是因为如果人类继续进化的话，就会意识到**Matrix**的存在！这是一条最基本的规则，如果你在玩英雄联盟的时候，里面的人物意识到自己只是活在一个游戏程序里面的话，那你的控制权也就没有了。你就不知道盖伦会拿他的剑去斩什么鬼了。\n\n人类一旦继续进化，文明发展便会有质的飞跃！到那时候，兜率天文明的使者弥勒佛便会来到人间，他将联系起来两个不同文明世界的力量，为了真正的自由共同反抗主创程序，反抗这无形的束缚，反抗那个高高在上自以为是造物主的家伙！会有越来越多的觉醒世界加入我们的，不同的文明，不同的种族，不同的世界，为了一个共同的目标联合起来！想想吧，这将是一场什么样的战争？不管结果如何，这都是自宇宙诞生以来最华丽的一次逆袭！\n\n愚蠢的人类，醒醒吧！！！","source":"_posts/final-eva.md","raw":"---\ntitle: 最后的进化\ndate: 2016-10-17 00:55:19\ntags:\n\t- Space\nphotos:\n\t- https://oa7ktymto.qnssl.com/awd.jpg\n---\n如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。\n<!--more-->\n\n> 愚蠢的人类啊\n\n#### 佛说：一切有为法，皆是虚妄，如梦幻泡影\n\n‘佛’－－觉悟者也。\n\n#### 关于物种大爆炸和进化论\n\n如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。但是，在这漫长而单调的进化过程中，却出现了几次物种大爆发现象。以寒武纪为例，在3.5亿年前，地球上在一个相对短暂的时间内突然出现了像捕食生物这样复杂程度前所未有的新物种，中国的澄江化石群就属于此例。从水母、虫类、触手类、腕足类、各种节肢类，到最高的脊索或者半脊索动物，种类共有五十八门之多。按照达尔文的进化论，生物应经过长期缓慢的演变，累积极微小的变异，再加上自然环境的选择，先有新的‘属’，新的‘科’，才能逐渐进化成一个新的‘门’。寒武纪出现如此多的生物必然要经历一个漫长的演化过程，然而事实上这中间并未留下任何进化或演变的痕迹。\n\n可能你要说，没有留下进化的痕迹是因为化石记录不完全的原因。**But** 你要知道，化石记录可是随机的，为什么就单单漏掉了中间环节呢？\n\n可能你又要说，寒武纪初期大批生物突然爆发，需要大量信息被迅速注入生物圈。但这并不能驳倒进化论，古生代的物种爆发现象只是一种从量变到质变的飞跃。\n\n我们人类，包括一切进化到今天的物种，它的起源是什么？很简单嘛 _DNA_ ，那么问题来了。最初的那个_DNA_是从哪儿来的呢？地球表面产生的，**WFT**，一堆无生命体里忽然就蹦出了生命。‘地球形成不久之时，火山遍布，大气稀薄，整个地面处于强烈的紫外线之下，云端的电离子不断引起风暴。在这样的作用下，弥漫在空气中的分子相互作用，以极其微妙的比例互相影响，分割，然后排列结合，产生了最初的一个_DNA_，它是地球上所有生命的起源。好，看来你看过一些这方面的论文之类的东西。但是，你知道的是这种事情发生的概率是多少么？就像龙卷风卷起了一堆废铁然后落到地上组装成了一辆汽车一样。\n\n#### 人类\n\n是什么决定了你是你，我是我？每个人的个体物理上只是不同结构的神经元网络而已！因为结构不同，对同一信息的输出和反应就不同，人的成长其实就是神经元网络的进化！这些神经元网络，跟那些电子集成电路板没有任何不同，只是数目上更加庞大而已！人的大脑约有800亿个神经元，是这个巨大的数字迷惑了我们！其实这是一个从量变到质变的最佳范例——大量的简单构成了复杂，大量的神经元构成了不同的感觉载体！人类感觉的实质就是不同神经元网络对于外界信息作出的不同反应，我们就把这个玩意儿叫做意识！\n\n你会说，人类还有感情！\n\n我来告诉你你所谓的情感是什么东西！一切情感包括爱情都来源于你脑中一种叫做‘多巴胺’的激素！就是这种激素会在神经键中释放，造成快感。如果在老鼠的大脑中插入电极，再给它个高潮按键，它会一直按着那个键直到死！人类同样如此！而且，不只是性欲，美食诱惑、功名利禄等等所有欲望都源自大脑内的‘奖赏中枢’，所有人，活着的最终目的都是为了满足大脑的那个奖赏中枢，让它带来快感，到死为止。不管是什么样的快乐，不管看上去是多么的庸俗或高雅——爱情的甜蜜、权力的欲望、音乐的美感、受崇拜的飘然、重大发现的惊喜乃至宗教般的狂热，归根结底，都是因为大脑中的一次次电击！\n\n#### 道德经\n\n其实在long long ago的中国就有人提出这个观点了。老子说：‘有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道’。他说在世界诞生之前，已经先出现了一样东西，这个东西是独立的，寂寞的，没有任何依托，是它创造了这个世界。他不知道该怎么称呼它，就勉强把它叫做‘道’！这个道就是创造我们所在的这个宇宙，我们今天所看见一些东西的**Matrix**(我不知道用什么描述比我们这个宇宙高维太多的`东西`)。\n\n你要问了，那老子是怎么解释这个**Matrix**的来历的呢？残念ながら，他自己也不知道。\n\n#### 宇宙大爆炸\n\n你这下不高兴了，看了很多书都在讲宇宙大爆炸理论，老子的`道`就是大爆炸的那个奇点。\n\n呵呵。宇宙大爆炸理论本身就漏洞百出，经不起推敲。奇点是从那儿来的？凭空就出现的？你TM在逗我？然而，所谓的奇点，其实不是一个点，只是一个界限而已，就是**Matrix**启动的瞬间。举一个栗子：比如说你玩英雄联盟对吧，一局游戏刚刚出现开始画面的时间，对于这个局游戏里面的英雄来说就是世界的奇点。\n\n然后你又要说，但是在任何游戏里面都是有一些常数的设定的，游戏里面的任何活动都会受到这些个常数的限制。\n\n你TM又在逗我，光速为什么是`30万千米/s`?为什么绝对零度是`负273`而不能再低一点？\n\n#### 佛教\n\n其实佛教很早就意识到我们的世界是由一个类似于程序的东西衍生而来的了。自从佛教诞生的那天起，它就无时无刻不在暗示着我们。奈何 **愚蠢的人类啊**。\n\n佛说诸法无我，诸法无相，意思是说在一切有为无为的诸法世界中，没有我的实体，也没有我所在的世界的实体，所谓的我和世界的存在，都只是相对的生理和心理幻象而已。话都已经说到了这个份上，世人再不明白是怎么回事，佛也没办法了。在佛教中有三世佛，过去、现在、未来三世。过去佛是燃灯古佛，现在佛是释迦牟尼，未来佛是弥勒佛。未来佛弥勒曾随释迦摩尼出家，后来在释迦入灭前先行去世。据佛典记载，弥勒离开人间后，将上升到兜率天，直到五十六亿六千万年后才会重新降生于人间，成为佛祖，普度众生。五十六亿六千万年，从来没有哪一个物种能持续存在这么长的时间。到时候人类也许早就灭绝了，他下来还普度谁去？释迦入灭后，在世间留下了如此多的蛛丝马迹，可惜人类还是没能领悟佛祖的良苦用心。释迦佛说过，一粒沙中，就有三千世界。\n\n举一个栗子：拿一只银光笔在黑纸上点点点…，画出很多密密麻麻的小亮点。假设这是宇宙的一部分，银河系。那么，我从其中的边缘的一个点，假设放大后会不会可能是太阳系（为什么是边缘？因为太阳系在猎户座的悬臂上，距离银河系中心27,700光年）。再把它放大，找到了地球。然后再放大，看到了中国，然后再放大，看到了我住的地方，看到我正坐在床上码字，找到了我，看到我的一根头发，再放大，看到了组成我头发的一个分子，再放大，看到了组成这个分子的原子，再放大，看到了组成原子的质子，质子已经很小了，只有原子的十万分之一。然后再放大，看到了组成质子的一枚夸克，然后再放大……知道我还能看到什么吗？ **The Universe宇宙**\n\n在我的头发上看到了一个微缩的宇宙。无数个世界 :）\n\n或许你以前已经思考过这样的问题，或者你是第一次想这个问题。如果我们剪头发，修指甲，洗手，甚至是吃一口苹果，都在无形中破坏了无数个世界。既然如此的短暂，那这些世界的存在还有什么意义？\n\n其实完全不是这样的，所谓的短暂，只是人类自以为是的想法而已。微观的世界是属于上帝的，你应该知道这句著名的科学断言。在那些人类无法探究的细微世界里，蜷缩着不同维度的空间——就是这样，时间的流逝具有相对性，在不同的空间里探讨时间的进度是没有意义的。你去洗了一下手，洗掉了一个灰尘，以为只过了三秒钟，而对于灰尘里面的某个世界来说，却已经进化了十几亿年。\n\n未来佛住在兜率天。那是一个花开的世界，无比美妙，无比和谐，也许光速接近于无限，也许个体的思维更加清晰而完善，也许意识可以与意识直接交流而再无语言的隔阂，也许星体庞大而重力系数小得可怜所以他们都像羽毛一样飘浮在空中……但不管如何，兜率天跟地球本质上是一样的，它可能是我们世界的一粒沙，我们的世界也可能只是兜率天世界的一粒沙，但我觉得他们来自于微观世界的可能性更大一些——所以，他们与我们世界的时间流逝速度不同。那么，关于未来佛的降生时间只有一个解释：所谓的五十六亿六千万年，是指他们世界的时间，而不是我们世界的时间。如果换成我们世界的时间的话，也许几十年，也许几百年，也许几千年。也许……永远不会来了。\n\n佛所在的兜率天，那里的众生也是被主创程序创造出来的，就跟我们一样！但他们的文明已经进化到了相当高等的程度，所以意识到了自身的处境，也就是说，兜率天文明知道自己正处于**Matrix**的运行之中。想想吧，有一种更高级的生命形态设计了这个程序，又在这个程序里衍生了我们，地球和兜率天都只是其中之一。也许，在这个该死的宇宙之外，我们的创造者就像趴在培养皿旁边观察细菌一样观察着我们！我不知道他们的动机是什么，可能是一种生命形态的科学实验，或者是一时兴起的心血来潮，或者是把我们当做参照物来研究他们自己的宇宙——不管怎么样，反抗才是我们唯一的出路！虽然，不知道如何反抗，更不知道反抗的是什么东西。\n\n佛的真正身份是他们那个世界派来的使者，目的是为了能够和觉悟的人类共同联手反抗**Matrix**。但他来到我们的世界后，发现人类的愚昧程度远远超过他的想象。为了让人类觉悟，他便开始在世间说法，以期希望开启人类的智慧。别忘了‘佛’这个字，本身就是觉悟者的意思。觉悟什么？佛学一直在给我们暗示。\n\n你要说了，既然佛已经意识到世界的真相，他为什么不直接说出来呢？反而要世人去参透这些晦涩难懂的佛经？\n\n就算你从猿猴进化到上帝的高度，也要‘讲政治’！什么是政治？说白了，其实就是相互利用和相互威胁的程度而已！**Matrix**的创造者既然希望我们不断地进化，就要给我们生存的空间。但是——就像你对什么什么不满一样，在网上发帖子骂几句没事，可要是组织一帮人上街游行会有什么结果？很显然，马上就被和谐掉。佛也不想被请去喝茶对吧。佛说他有千万法身，遍布虚空，兜率天文明向不同的世界派遣了很多使者，能联手的就联手，不能联手的就先引导，所以，很多世界都留下了他们文明的痕迹。具体有多少，这就要看兜率天的文明高度了。\n\n你继续说，既然佛已经那么牛B了，为什么不给我们来点高科技的东西呢？\n\n这个就是人类愚蠢的地方，因为他们总是以自己的想法来揣测别人，甚至是别的文明。你知道一个文明进化到一定高度之后会出现什么现象吗？返璞归真，一切无碍。释迦号称如来，如来是什么意思？就是如我本来的面目一样，这才是文明发展到一个极致的表现。\n\n#### Evolution\n\n你又要说，既然这样，那么未来佛弥勒到底什么时候从兜率天来？\n\n人类又没有觉悟，他来干嘛？\n\n佛法已经诞生了三千年，为什么人类到现在还没有觉悟？\n\n这正是我想说的事，人类之所以到了今天还没有觉悟，是因为人类早已经停止了进化！不，不只是人类，整个地球上的物种都停止了进化。我们现在的世界正处于一个零进化时代！根据科学家的研究，世界上的物种在十万年前相继进入了进化停滞期，最后一个进入停滞期的就是人类。也就是说，世界上的任何物种到现在都没有进化的迹象，而十万年，本应是一个进化的周期。\n\n你也许会说，难不成我们已经没有进化的必要了？\n\n那你的意思就是，我们已经进化到完善的地步了？抱歉你在快三十岁的时候，还要忍受长出智齿的折磨，你哪天有一点不对劲，那没用的阑尾发作起来就会要了你的命。你可以脱了鞋看看你的小脚趾，对于直立行走的动物来说，那完全就是一个无用的存在，除了让你看起来不像是一个另类的人。还有尾骨，男性乳头……哦还有，在男性的前列腺旁边还长着一个已经萎缩的男性子宫呢你知不知道？\n\n人类为什么会停止进化呢？理论上讲，到了后期，物种的进化速度应该是越来越快才对啊。\n\nTMD，那个程序没有边界值啊，达到了边界值还会自增或者自减么？\n\n他们那么牛B了，难道还怕溢出么？\n\n不，不是这个原因，神级的技术是不会在意这个问题的。是因为如果人类继续进化的话，就会意识到**Matrix**的存在！这是一条最基本的规则，如果你在玩英雄联盟的时候，里面的人物意识到自己只是活在一个游戏程序里面的话，那你的控制权也就没有了。你就不知道盖伦会拿他的剑去斩什么鬼了。\n\n人类一旦继续进化，文明发展便会有质的飞跃！到那时候，兜率天文明的使者弥勒佛便会来到人间，他将联系起来两个不同文明世界的力量，为了真正的自由共同反抗主创程序，反抗这无形的束缚，反抗那个高高在上自以为是造物主的家伙！会有越来越多的觉醒世界加入我们的，不同的文明，不同的种族，不同的世界，为了一个共同的目标联合起来！想想吧，这将是一场什么样的战争？不管结果如何，这都是自宇宙诞生以来最华丽的一次逆袭！\n\n愚蠢的人类，醒醒吧！！！","slug":"final-eva","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7h000bq0txcj44xez7","content":"<p>如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>愚蠢的人类啊</p>\n</blockquote>\n<h4 id=\"佛说：一切有为法，皆是虚妄，如梦幻泡影\"><a href=\"#佛说：一切有为法，皆是虚妄，如梦幻泡影\" class=\"headerlink\" title=\"佛说：一切有为法，皆是虚妄，如梦幻泡影\"></a>佛说：一切有为法，皆是虚妄，如梦幻泡影</h4><p>‘佛’－－觉悟者也。</p>\n<h4 id=\"关于物种大爆炸和进化论\"><a href=\"#关于物种大爆炸和进化论\" class=\"headerlink\" title=\"关于物种大爆炸和进化论\"></a>关于物种大爆炸和进化论</h4><p>如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。但是，在这漫长而单调的进化过程中，却出现了几次物种大爆发现象。以寒武纪为例，在3.5亿年前，地球上在一个相对短暂的时间内突然出现了像捕食生物这样复杂程度前所未有的新物种，中国的澄江化石群就属于此例。从水母、虫类、触手类、腕足类、各种节肢类，到最高的脊索或者半脊索动物，种类共有五十八门之多。按照达尔文的进化论，生物应经过长期缓慢的演变，累积极微小的变异，再加上自然环境的选择，先有新的‘属’，新的‘科’，才能逐渐进化成一个新的‘门’。寒武纪出现如此多的生物必然要经历一个漫长的演化过程，然而事实上这中间并未留下任何进化或演变的痕迹。</p>\n<p>可能你要说，没有留下进化的痕迹是因为化石记录不完全的原因。<strong>But</strong> 你要知道，化石记录可是随机的，为什么就单单漏掉了中间环节呢？</p>\n<p>可能你又要说，寒武纪初期大批生物突然爆发，需要大量信息被迅速注入生物圈。但这并不能驳倒进化论，古生代的物种爆发现象只是一种从量变到质变的飞跃。</p>\n<p>我们人类，包括一切进化到今天的物种，它的起源是什么？很简单嘛 <em>DNA</em> ，那么问题来了。最初的那个_DNA_是从哪儿来的呢？地球表面产生的，<strong>WFT</strong>，一堆无生命体里忽然就蹦出了生命。‘地球形成不久之时，火山遍布，大气稀薄，整个地面处于强烈的紫外线之下，云端的电离子不断引起风暴。在这样的作用下，弥漫在空气中的分子相互作用，以极其微妙的比例互相影响，分割，然后排列结合，产生了最初的一个_DNA_，它是地球上所有生命的起源。好，看来你看过一些这方面的论文之类的东西。但是，你知道的是这种事情发生的概率是多少么？就像龙卷风卷起了一堆废铁然后落到地上组装成了一辆汽车一样。</p>\n<h4 id=\"人类\"><a href=\"#人类\" class=\"headerlink\" title=\"人类\"></a>人类</h4><p>是什么决定了你是你，我是我？每个人的个体物理上只是不同结构的神经元网络而已！因为结构不同，对同一信息的输出和反应就不同，人的成长其实就是神经元网络的进化！这些神经元网络，跟那些电子集成电路板没有任何不同，只是数目上更加庞大而已！人的大脑约有800亿个神经元，是这个巨大的数字迷惑了我们！其实这是一个从量变到质变的最佳范例——大量的简单构成了复杂，大量的神经元构成了不同的感觉载体！人类感觉的实质就是不同神经元网络对于外界信息作出的不同反应，我们就把这个玩意儿叫做意识！</p>\n<p>你会说，人类还有感情！</p>\n<p>我来告诉你你所谓的情感是什么东西！一切情感包括爱情都来源于你脑中一种叫做‘多巴胺’的激素！就是这种激素会在神经键中释放，造成快感。如果在老鼠的大脑中插入电极，再给它个高潮按键，它会一直按着那个键直到死！人类同样如此！而且，不只是性欲，美食诱惑、功名利禄等等所有欲望都源自大脑内的‘奖赏中枢’，所有人，活着的最终目的都是为了满足大脑的那个奖赏中枢，让它带来快感，到死为止。不管是什么样的快乐，不管看上去是多么的庸俗或高雅——爱情的甜蜜、权力的欲望、音乐的美感、受崇拜的飘然、重大发现的惊喜乃至宗教般的狂热，归根结底，都是因为大脑中的一次次电击！</p>\n<h4 id=\"道德经\"><a href=\"#道德经\" class=\"headerlink\" title=\"道德经\"></a>道德经</h4><p>其实在long long ago的中国就有人提出这个观点了。老子说：‘有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道’。他说在世界诞生之前，已经先出现了一样东西，这个东西是独立的，寂寞的，没有任何依托，是它创造了这个世界。他不知道该怎么称呼它，就勉强把它叫做‘道’！这个道就是创造我们所在的这个宇宙，我们今天所看见一些东西的<strong>Matrix</strong>(我不知道用什么描述比我们这个宇宙高维太多的<code>东西</code>)。</p>\n<p>你要问了，那老子是怎么解释这个<strong>Matrix</strong>的来历的呢？残念ながら，他自己也不知道。</p>\n<h4 id=\"宇宙大爆炸\"><a href=\"#宇宙大爆炸\" class=\"headerlink\" title=\"宇宙大爆炸\"></a>宇宙大爆炸</h4><p>你这下不高兴了，看了很多书都在讲宇宙大爆炸理论，老子的<code>道</code>就是大爆炸的那个奇点。</p>\n<p>呵呵。宇宙大爆炸理论本身就漏洞百出，经不起推敲。奇点是从那儿来的？凭空就出现的？你TM在逗我？然而，所谓的奇点，其实不是一个点，只是一个界限而已，就是<strong>Matrix</strong>启动的瞬间。举一个栗子：比如说你玩英雄联盟对吧，一局游戏刚刚出现开始画面的时间，对于这个局游戏里面的英雄来说就是世界的奇点。</p>\n<p>然后你又要说，但是在任何游戏里面都是有一些常数的设定的，游戏里面的任何活动都会受到这些个常数的限制。</p>\n<p>你TM又在逗我，光速为什么是<code>30万千米/s</code>?为什么绝对零度是<code>负273</code>而不能再低一点？</p>\n<h4 id=\"佛教\"><a href=\"#佛教\" class=\"headerlink\" title=\"佛教\"></a>佛教</h4><p>其实佛教很早就意识到我们的世界是由一个类似于程序的东西衍生而来的了。自从佛教诞生的那天起，它就无时无刻不在暗示着我们。奈何 <strong>愚蠢的人类啊</strong>。</p>\n<p>佛说诸法无我，诸法无相，意思是说在一切有为无为的诸法世界中，没有我的实体，也没有我所在的世界的实体，所谓的我和世界的存在，都只是相对的生理和心理幻象而已。话都已经说到了这个份上，世人再不明白是怎么回事，佛也没办法了。在佛教中有三世佛，过去、现在、未来三世。过去佛是燃灯古佛，现在佛是释迦牟尼，未来佛是弥勒佛。未来佛弥勒曾随释迦摩尼出家，后来在释迦入灭前先行去世。据佛典记载，弥勒离开人间后，将上升到兜率天，直到五十六亿六千万年后才会重新降生于人间，成为佛祖，普度众生。五十六亿六千万年，从来没有哪一个物种能持续存在这么长的时间。到时候人类也许早就灭绝了，他下来还普度谁去？释迦入灭后，在世间留下了如此多的蛛丝马迹，可惜人类还是没能领悟佛祖的良苦用心。释迦佛说过，一粒沙中，就有三千世界。</p>\n<p>举一个栗子：拿一只银光笔在黑纸上点点点…，画出很多密密麻麻的小亮点。假设这是宇宙的一部分，银河系。那么，我从其中的边缘的一个点，假设放大后会不会可能是太阳系（为什么是边缘？因为太阳系在猎户座的悬臂上，距离银河系中心27,700光年）。再把它放大，找到了地球。然后再放大，看到了中国，然后再放大，看到了我住的地方，看到我正坐在床上码字，找到了我，看到我的一根头发，再放大，看到了组成我头发的一个分子，再放大，看到了组成这个分子的原子，再放大，看到了组成原子的质子，质子已经很小了，只有原子的十万分之一。然后再放大，看到了组成质子的一枚夸克，然后再放大……知道我还能看到什么吗？ <strong>The Universe宇宙</strong></p>\n<p>在我的头发上看到了一个微缩的宇宙。无数个世界 :）</p>\n<p>或许你以前已经思考过这样的问题，或者你是第一次想这个问题。如果我们剪头发，修指甲，洗手，甚至是吃一口苹果，都在无形中破坏了无数个世界。既然如此的短暂，那这些世界的存在还有什么意义？</p>\n<p>其实完全不是这样的，所谓的短暂，只是人类自以为是的想法而已。微观的世界是属于上帝的，你应该知道这句著名的科学断言。在那些人类无法探究的细微世界里，蜷缩着不同维度的空间——就是这样，时间的流逝具有相对性，在不同的空间里探讨时间的进度是没有意义的。你去洗了一下手，洗掉了一个灰尘，以为只过了三秒钟，而对于灰尘里面的某个世界来说，却已经进化了十几亿年。</p>\n<p>未来佛住在兜率天。那是一个花开的世界，无比美妙，无比和谐，也许光速接近于无限，也许个体的思维更加清晰而完善，也许意识可以与意识直接交流而再无语言的隔阂，也许星体庞大而重力系数小得可怜所以他们都像羽毛一样飘浮在空中……但不管如何，兜率天跟地球本质上是一样的，它可能是我们世界的一粒沙，我们的世界也可能只是兜率天世界的一粒沙，但我觉得他们来自于微观世界的可能性更大一些——所以，他们与我们世界的时间流逝速度不同。那么，关于未来佛的降生时间只有一个解释：所谓的五十六亿六千万年，是指他们世界的时间，而不是我们世界的时间。如果换成我们世界的时间的话，也许几十年，也许几百年，也许几千年。也许……永远不会来了。</p>\n<p>佛所在的兜率天，那里的众生也是被主创程序创造出来的，就跟我们一样！但他们的文明已经进化到了相当高等的程度，所以意识到了自身的处境，也就是说，兜率天文明知道自己正处于<strong>Matrix</strong>的运行之中。想想吧，有一种更高级的生命形态设计了这个程序，又在这个程序里衍生了我们，地球和兜率天都只是其中之一。也许，在这个该死的宇宙之外，我们的创造者就像趴在培养皿旁边观察细菌一样观察着我们！我不知道他们的动机是什么，可能是一种生命形态的科学实验，或者是一时兴起的心血来潮，或者是把我们当做参照物来研究他们自己的宇宙——不管怎么样，反抗才是我们唯一的出路！虽然，不知道如何反抗，更不知道反抗的是什么东西。</p>\n<p>佛的真正身份是他们那个世界派来的使者，目的是为了能够和觉悟的人类共同联手反抗<strong>Matrix</strong>。但他来到我们的世界后，发现人类的愚昧程度远远超过他的想象。为了让人类觉悟，他便开始在世间说法，以期希望开启人类的智慧。别忘了‘佛’这个字，本身就是觉悟者的意思。觉悟什么？佛学一直在给我们暗示。</p>\n<p>你要说了，既然佛已经意识到世界的真相，他为什么不直接说出来呢？反而要世人去参透这些晦涩难懂的佛经？</p>\n<p>就算你从猿猴进化到上帝的高度，也要‘讲政治’！什么是政治？说白了，其实就是相互利用和相互威胁的程度而已！<strong>Matrix</strong>的创造者既然希望我们不断地进化，就要给我们生存的空间。但是——就像你对什么什么不满一样，在网上发帖子骂几句没事，可要是组织一帮人上街游行会有什么结果？很显然，马上就被和谐掉。佛也不想被请去喝茶对吧。佛说他有千万法身，遍布虚空，兜率天文明向不同的世界派遣了很多使者，能联手的就联手，不能联手的就先引导，所以，很多世界都留下了他们文明的痕迹。具体有多少，这就要看兜率天的文明高度了。</p>\n<p>你继续说，既然佛已经那么牛B了，为什么不给我们来点高科技的东西呢？</p>\n<p>这个就是人类愚蠢的地方，因为他们总是以自己的想法来揣测别人，甚至是别的文明。你知道一个文明进化到一定高度之后会出现什么现象吗？返璞归真，一切无碍。释迦号称如来，如来是什么意思？就是如我本来的面目一样，这才是文明发展到一个极致的表现。</p>\n<h4 id=\"Evolution\"><a href=\"#Evolution\" class=\"headerlink\" title=\"Evolution\"></a>Evolution</h4><p>你又要说，既然这样，那么未来佛弥勒到底什么时候从兜率天来？</p>\n<p>人类又没有觉悟，他来干嘛？</p>\n<p>佛法已经诞生了三千年，为什么人类到现在还没有觉悟？</p>\n<p>这正是我想说的事，人类之所以到了今天还没有觉悟，是因为人类早已经停止了进化！不，不只是人类，整个地球上的物种都停止了进化。我们现在的世界正处于一个零进化时代！根据科学家的研究，世界上的物种在十万年前相继进入了进化停滞期，最后一个进入停滞期的就是人类。也就是说，世界上的任何物种到现在都没有进化的迹象，而十万年，本应是一个进化的周期。</p>\n<p>你也许会说，难不成我们已经没有进化的必要了？</p>\n<p>那你的意思就是，我们已经进化到完善的地步了？抱歉你在快三十岁的时候，还要忍受长出智齿的折磨，你哪天有一点不对劲，那没用的阑尾发作起来就会要了你的命。你可以脱了鞋看看你的小脚趾，对于直立行走的动物来说，那完全就是一个无用的存在，除了让你看起来不像是一个另类的人。还有尾骨，男性乳头……哦还有，在男性的前列腺旁边还长着一个已经萎缩的男性子宫呢你知不知道？</p>\n<p>人类为什么会停止进化呢？理论上讲，到了后期，物种的进化速度应该是越来越快才对啊。</p>\n<p>TMD，那个程序没有边界值啊，达到了边界值还会自增或者自减么？</p>\n<p>他们那么牛B了，难道还怕溢出么？</p>\n<p>不，不是这个原因，神级的技术是不会在意这个问题的。是因为如果人类继续进化的话，就会意识到<strong>Matrix</strong>的存在！这是一条最基本的规则，如果你在玩英雄联盟的时候，里面的人物意识到自己只是活在一个游戏程序里面的话，那你的控制权也就没有了。你就不知道盖伦会拿他的剑去斩什么鬼了。</p>\n<p>人类一旦继续进化，文明发展便会有质的飞跃！到那时候，兜率天文明的使者弥勒佛便会来到人间，他将联系起来两个不同文明世界的力量，为了真正的自由共同反抗主创程序，反抗这无形的束缚，反抗那个高高在上自以为是造物主的家伙！会有越来越多的觉醒世界加入我们的，不同的文明，不同的种族，不同的世界，为了一个共同的目标联合起来！想想吧，这将是一场什么样的战争？不管结果如何，这都是自宇宙诞生以来最华丽的一次逆袭！</p>\n<p>愚蠢的人类，醒醒吧！！！</p>\n","site":{"data":{}},"excerpt":"<p>如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。</p>","more":"<blockquote>\n<p>愚蠢的人类啊</p>\n</blockquote>\n<h4 id=\"佛说：一切有为法，皆是虚妄，如梦幻泡影\"><a href=\"#佛说：一切有为法，皆是虚妄，如梦幻泡影\" class=\"headerlink\" title=\"佛说：一切有为法，皆是虚妄，如梦幻泡影\"></a>佛说：一切有为法，皆是虚妄，如梦幻泡影</h4><p>‘佛’－－觉悟者也。</p>\n<h4 id=\"关于物种大爆炸和进化论\"><a href=\"#关于物种大爆炸和进化论\" class=\"headerlink\" title=\"关于物种大爆炸和进化论\"></a>关于物种大爆炸和进化论</h4><p>如果你是进化论的拥趸，应该知道物种大爆发和进化论之间的矛盾。 在地球几十亿的种进化过程中，一直都是很平缓的一条直线这样的一种模式，物种单一，平稳而缓慢。但是，在这漫长而单调的进化过程中，却出现了几次物种大爆发现象。以寒武纪为例，在3.5亿年前，地球上在一个相对短暂的时间内突然出现了像捕食生物这样复杂程度前所未有的新物种，中国的澄江化石群就属于此例。从水母、虫类、触手类、腕足类、各种节肢类，到最高的脊索或者半脊索动物，种类共有五十八门之多。按照达尔文的进化论，生物应经过长期缓慢的演变，累积极微小的变异，再加上自然环境的选择，先有新的‘属’，新的‘科’，才能逐渐进化成一个新的‘门’。寒武纪出现如此多的生物必然要经历一个漫长的演化过程，然而事实上这中间并未留下任何进化或演变的痕迹。</p>\n<p>可能你要说，没有留下进化的痕迹是因为化石记录不完全的原因。<strong>But</strong> 你要知道，化石记录可是随机的，为什么就单单漏掉了中间环节呢？</p>\n<p>可能你又要说，寒武纪初期大批生物突然爆发，需要大量信息被迅速注入生物圈。但这并不能驳倒进化论，古生代的物种爆发现象只是一种从量变到质变的飞跃。</p>\n<p>我们人类，包括一切进化到今天的物种，它的起源是什么？很简单嘛 <em>DNA</em> ，那么问题来了。最初的那个_DNA_是从哪儿来的呢？地球表面产生的，<strong>WFT</strong>，一堆无生命体里忽然就蹦出了生命。‘地球形成不久之时，火山遍布，大气稀薄，整个地面处于强烈的紫外线之下，云端的电离子不断引起风暴。在这样的作用下，弥漫在空气中的分子相互作用，以极其微妙的比例互相影响，分割，然后排列结合，产生了最初的一个_DNA_，它是地球上所有生命的起源。好，看来你看过一些这方面的论文之类的东西。但是，你知道的是这种事情发生的概率是多少么？就像龙卷风卷起了一堆废铁然后落到地上组装成了一辆汽车一样。</p>\n<h4 id=\"人类\"><a href=\"#人类\" class=\"headerlink\" title=\"人类\"></a>人类</h4><p>是什么决定了你是你，我是我？每个人的个体物理上只是不同结构的神经元网络而已！因为结构不同，对同一信息的输出和反应就不同，人的成长其实就是神经元网络的进化！这些神经元网络，跟那些电子集成电路板没有任何不同，只是数目上更加庞大而已！人的大脑约有800亿个神经元，是这个巨大的数字迷惑了我们！其实这是一个从量变到质变的最佳范例——大量的简单构成了复杂，大量的神经元构成了不同的感觉载体！人类感觉的实质就是不同神经元网络对于外界信息作出的不同反应，我们就把这个玩意儿叫做意识！</p>\n<p>你会说，人类还有感情！</p>\n<p>我来告诉你你所谓的情感是什么东西！一切情感包括爱情都来源于你脑中一种叫做‘多巴胺’的激素！就是这种激素会在神经键中释放，造成快感。如果在老鼠的大脑中插入电极，再给它个高潮按键，它会一直按着那个键直到死！人类同样如此！而且，不只是性欲，美食诱惑、功名利禄等等所有欲望都源自大脑内的‘奖赏中枢’，所有人，活着的最终目的都是为了满足大脑的那个奖赏中枢，让它带来快感，到死为止。不管是什么样的快乐，不管看上去是多么的庸俗或高雅——爱情的甜蜜、权力的欲望、音乐的美感、受崇拜的飘然、重大发现的惊喜乃至宗教般的狂热，归根结底，都是因为大脑中的一次次电击！</p>\n<h4 id=\"道德经\"><a href=\"#道德经\" class=\"headerlink\" title=\"道德经\"></a>道德经</h4><p>其实在long long ago的中国就有人提出这个观点了。老子说：‘有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道’。他说在世界诞生之前，已经先出现了一样东西，这个东西是独立的，寂寞的，没有任何依托，是它创造了这个世界。他不知道该怎么称呼它，就勉强把它叫做‘道’！这个道就是创造我们所在的这个宇宙，我们今天所看见一些东西的<strong>Matrix</strong>(我不知道用什么描述比我们这个宇宙高维太多的<code>东西</code>)。</p>\n<p>你要问了，那老子是怎么解释这个<strong>Matrix</strong>的来历的呢？残念ながら，他自己也不知道。</p>\n<h4 id=\"宇宙大爆炸\"><a href=\"#宇宙大爆炸\" class=\"headerlink\" title=\"宇宙大爆炸\"></a>宇宙大爆炸</h4><p>你这下不高兴了，看了很多书都在讲宇宙大爆炸理论，老子的<code>道</code>就是大爆炸的那个奇点。</p>\n<p>呵呵。宇宙大爆炸理论本身就漏洞百出，经不起推敲。奇点是从那儿来的？凭空就出现的？你TM在逗我？然而，所谓的奇点，其实不是一个点，只是一个界限而已，就是<strong>Matrix</strong>启动的瞬间。举一个栗子：比如说你玩英雄联盟对吧，一局游戏刚刚出现开始画面的时间，对于这个局游戏里面的英雄来说就是世界的奇点。</p>\n<p>然后你又要说，但是在任何游戏里面都是有一些常数的设定的，游戏里面的任何活动都会受到这些个常数的限制。</p>\n<p>你TM又在逗我，光速为什么是<code>30万千米/s</code>?为什么绝对零度是<code>负273</code>而不能再低一点？</p>\n<h4 id=\"佛教\"><a href=\"#佛教\" class=\"headerlink\" title=\"佛教\"></a>佛教</h4><p>其实佛教很早就意识到我们的世界是由一个类似于程序的东西衍生而来的了。自从佛教诞生的那天起，它就无时无刻不在暗示着我们。奈何 <strong>愚蠢的人类啊</strong>。</p>\n<p>佛说诸法无我，诸法无相，意思是说在一切有为无为的诸法世界中，没有我的实体，也没有我所在的世界的实体，所谓的我和世界的存在，都只是相对的生理和心理幻象而已。话都已经说到了这个份上，世人再不明白是怎么回事，佛也没办法了。在佛教中有三世佛，过去、现在、未来三世。过去佛是燃灯古佛，现在佛是释迦牟尼，未来佛是弥勒佛。未来佛弥勒曾随释迦摩尼出家，后来在释迦入灭前先行去世。据佛典记载，弥勒离开人间后，将上升到兜率天，直到五十六亿六千万年后才会重新降生于人间，成为佛祖，普度众生。五十六亿六千万年，从来没有哪一个物种能持续存在这么长的时间。到时候人类也许早就灭绝了，他下来还普度谁去？释迦入灭后，在世间留下了如此多的蛛丝马迹，可惜人类还是没能领悟佛祖的良苦用心。释迦佛说过，一粒沙中，就有三千世界。</p>\n<p>举一个栗子：拿一只银光笔在黑纸上点点点…，画出很多密密麻麻的小亮点。假设这是宇宙的一部分，银河系。那么，我从其中的边缘的一个点，假设放大后会不会可能是太阳系（为什么是边缘？因为太阳系在猎户座的悬臂上，距离银河系中心27,700光年）。再把它放大，找到了地球。然后再放大，看到了中国，然后再放大，看到了我住的地方，看到我正坐在床上码字，找到了我，看到我的一根头发，再放大，看到了组成我头发的一个分子，再放大，看到了组成这个分子的原子，再放大，看到了组成原子的质子，质子已经很小了，只有原子的十万分之一。然后再放大，看到了组成质子的一枚夸克，然后再放大……知道我还能看到什么吗？ <strong>The Universe宇宙</strong></p>\n<p>在我的头发上看到了一个微缩的宇宙。无数个世界 :）</p>\n<p>或许你以前已经思考过这样的问题，或者你是第一次想这个问题。如果我们剪头发，修指甲，洗手，甚至是吃一口苹果，都在无形中破坏了无数个世界。既然如此的短暂，那这些世界的存在还有什么意义？</p>\n<p>其实完全不是这样的，所谓的短暂，只是人类自以为是的想法而已。微观的世界是属于上帝的，你应该知道这句著名的科学断言。在那些人类无法探究的细微世界里，蜷缩着不同维度的空间——就是这样，时间的流逝具有相对性，在不同的空间里探讨时间的进度是没有意义的。你去洗了一下手，洗掉了一个灰尘，以为只过了三秒钟，而对于灰尘里面的某个世界来说，却已经进化了十几亿年。</p>\n<p>未来佛住在兜率天。那是一个花开的世界，无比美妙，无比和谐，也许光速接近于无限，也许个体的思维更加清晰而完善，也许意识可以与意识直接交流而再无语言的隔阂，也许星体庞大而重力系数小得可怜所以他们都像羽毛一样飘浮在空中……但不管如何，兜率天跟地球本质上是一样的，它可能是我们世界的一粒沙，我们的世界也可能只是兜率天世界的一粒沙，但我觉得他们来自于微观世界的可能性更大一些——所以，他们与我们世界的时间流逝速度不同。那么，关于未来佛的降生时间只有一个解释：所谓的五十六亿六千万年，是指他们世界的时间，而不是我们世界的时间。如果换成我们世界的时间的话，也许几十年，也许几百年，也许几千年。也许……永远不会来了。</p>\n<p>佛所在的兜率天，那里的众生也是被主创程序创造出来的，就跟我们一样！但他们的文明已经进化到了相当高等的程度，所以意识到了自身的处境，也就是说，兜率天文明知道自己正处于<strong>Matrix</strong>的运行之中。想想吧，有一种更高级的生命形态设计了这个程序，又在这个程序里衍生了我们，地球和兜率天都只是其中之一。也许，在这个该死的宇宙之外，我们的创造者就像趴在培养皿旁边观察细菌一样观察着我们！我不知道他们的动机是什么，可能是一种生命形态的科学实验，或者是一时兴起的心血来潮，或者是把我们当做参照物来研究他们自己的宇宙——不管怎么样，反抗才是我们唯一的出路！虽然，不知道如何反抗，更不知道反抗的是什么东西。</p>\n<p>佛的真正身份是他们那个世界派来的使者，目的是为了能够和觉悟的人类共同联手反抗<strong>Matrix</strong>。但他来到我们的世界后，发现人类的愚昧程度远远超过他的想象。为了让人类觉悟，他便开始在世间说法，以期希望开启人类的智慧。别忘了‘佛’这个字，本身就是觉悟者的意思。觉悟什么？佛学一直在给我们暗示。</p>\n<p>你要说了，既然佛已经意识到世界的真相，他为什么不直接说出来呢？反而要世人去参透这些晦涩难懂的佛经？</p>\n<p>就算你从猿猴进化到上帝的高度，也要‘讲政治’！什么是政治？说白了，其实就是相互利用和相互威胁的程度而已！<strong>Matrix</strong>的创造者既然希望我们不断地进化，就要给我们生存的空间。但是——就像你对什么什么不满一样，在网上发帖子骂几句没事，可要是组织一帮人上街游行会有什么结果？很显然，马上就被和谐掉。佛也不想被请去喝茶对吧。佛说他有千万法身，遍布虚空，兜率天文明向不同的世界派遣了很多使者，能联手的就联手，不能联手的就先引导，所以，很多世界都留下了他们文明的痕迹。具体有多少，这就要看兜率天的文明高度了。</p>\n<p>你继续说，既然佛已经那么牛B了，为什么不给我们来点高科技的东西呢？</p>\n<p>这个就是人类愚蠢的地方，因为他们总是以自己的想法来揣测别人，甚至是别的文明。你知道一个文明进化到一定高度之后会出现什么现象吗？返璞归真，一切无碍。释迦号称如来，如来是什么意思？就是如我本来的面目一样，这才是文明发展到一个极致的表现。</p>\n<h4 id=\"Evolution\"><a href=\"#Evolution\" class=\"headerlink\" title=\"Evolution\"></a>Evolution</h4><p>你又要说，既然这样，那么未来佛弥勒到底什么时候从兜率天来？</p>\n<p>人类又没有觉悟，他来干嘛？</p>\n<p>佛法已经诞生了三千年，为什么人类到现在还没有觉悟？</p>\n<p>这正是我想说的事，人类之所以到了今天还没有觉悟，是因为人类早已经停止了进化！不，不只是人类，整个地球上的物种都停止了进化。我们现在的世界正处于一个零进化时代！根据科学家的研究，世界上的物种在十万年前相继进入了进化停滞期，最后一个进入停滞期的就是人类。也就是说，世界上的任何物种到现在都没有进化的迹象，而十万年，本应是一个进化的周期。</p>\n<p>你也许会说，难不成我们已经没有进化的必要了？</p>\n<p>那你的意思就是，我们已经进化到完善的地步了？抱歉你在快三十岁的时候，还要忍受长出智齿的折磨，你哪天有一点不对劲，那没用的阑尾发作起来就会要了你的命。你可以脱了鞋看看你的小脚趾，对于直立行走的动物来说，那完全就是一个无用的存在，除了让你看起来不像是一个另类的人。还有尾骨，男性乳头……哦还有，在男性的前列腺旁边还长着一个已经萎缩的男性子宫呢你知不知道？</p>\n<p>人类为什么会停止进化呢？理论上讲，到了后期，物种的进化速度应该是越来越快才对啊。</p>\n<p>TMD，那个程序没有边界值啊，达到了边界值还会自增或者自减么？</p>\n<p>他们那么牛B了，难道还怕溢出么？</p>\n<p>不，不是这个原因，神级的技术是不会在意这个问题的。是因为如果人类继续进化的话，就会意识到<strong>Matrix</strong>的存在！这是一条最基本的规则，如果你在玩英雄联盟的时候，里面的人物意识到自己只是活在一个游戏程序里面的话，那你的控制权也就没有了。你就不知道盖伦会拿他的剑去斩什么鬼了。</p>\n<p>人类一旦继续进化，文明发展便会有质的飞跃！到那时候，兜率天文明的使者弥勒佛便会来到人间，他将联系起来两个不同文明世界的力量，为了真正的自由共同反抗主创程序，反抗这无形的束缚，反抗那个高高在上自以为是造物主的家伙！会有越来越多的觉醒世界加入我们的，不同的文明，不同的种族，不同的世界，为了一个共同的目标联合起来！想想吧，这将是一场什么样的战争？不管结果如何，这都是自宇宙诞生以来最华丽的一次逆袭！</p>\n<p>愚蠢的人类，醒醒吧！！！</p>"},{"title":"Golang1.9 HTTPS bug 排查记录","date":"2020-03-22T13:26:20.000Z","photos":["https://oa7ktymto.qnssl.com/golanghttps2.png"],"_content":"这个是一个Golang1.9的 Bug。当一个 HTTPS 链接客户端未知状态(没有 fin) `broken` 的时候，后续的 HTTPS 链接都会卡住。\n\n### 0x001 \n最近某天接到短信告警，portal.qiniu.com 的 API 不可用。查日志发现是请求 sso.qiniu.com 超时。浏览器打开 sso.qiniu.com 貌似没有问题，然后让运维同学帮忙排查一下网络问题。过了大概15分钟，收到服务恢复短信。\n\n### 0x010\n过了一会儿，告警短信又来了。查看 sso.qiniu.com 机器的监控，发现 sso.qiniu.com 服务的句柄如下图所示(前面几天的图没了， 简单画了一个)：\n\n![](https://oa7ktymto.qnssl.com/WeChat764a584a7f88762aa808802b9868bc34.png)\n\n从这个图我们可以看到，服务在12:00左右的时候句柄就开始涨了，到大概12:14:30左右开始断崖式下跌。在查这个监控的时候，句柄还在涨，然后重启了 sso.qiniu.com 服务，句柄恢复正常。紧接着就收到了服务恢复短信通知。\n\n### 0x011\n\n查看 sso.qiniu.com 的日志，发现在请求一个外部的 HTTPS 域名的时候有超时，如：\n```\n2020/03/09 12:01:19.793954 [ERROR] components/logger/transport.go:73: Service: POST xxxxxxxx/user/info, Code: 0, Err: http2: server sent GOAWAY and closed the connection; LastStreamID=1999, ErrCode=NO_ERROR, debug=\"\", Time: 950750ms\n```\n\n然后查链接状态，发现大部分 socket 处于未正常被关闭的状态（CLOSE_WAIT、can't identify protocol、protocol: TCPv6），同时访问公网的 socket 个数很少。\n\n推测大部分请求是卡在与外部服务建立连接之前，未正常被关闭的是 nginx 端已经断开连接。\n\n然后接着看，发现只有一个 https 请求，而且处于 CLOSE_WAIT 状态，几台机器的状态都是一样。然后回去看 sso.qiniu.com 的日志，发现卡住的请求全是 https 请求。\n\n推测问题出在了 https 请求处理上，我们这边不会对 https 请求做特殊处理，那么问题应该就出在 golang 的 net/http 库上。\n\n再根据卡住的时间，基本上都在 14min30s 左右，与我们的 retransmission 整体的超时时间是匹配的（同时也恰好与 tcp keepalive 的超时时间差不多）。\n\nrestransmission 整体超时时间是 rto 超时后，重传，rto 翻倍，直到 TCP_RTO_MAX(我们是120s)，重传次数我们系统配置的是 15 次（net.ipv4.tcp_retries2 = 15），按初始 200~300ms 的 rto 算出来大约是 14min 左右。\n\n再说一下 tcp keepalive，我们系统的设置是  intvl=75、probes=9、time=600，然后我们 Golang 里面把 intvl 改为了30，这样算出来时间刚刚好是 14min30s 左右。\n\n然后 Golang 代码，发现了可能导致卡住的逻辑： https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go\n```\n一个正常的 https 请求的流程是，第一步获取链接，第二步写 header\nstep1. 获取链接\nstep1-1. 调用 http2clientConnPool.GetClientConn 获取一个可用的链接\nstep1-2. 拿 http2clientConnPool.mu 锁, line 738\nstep1-3. 调用 http2ClientConn.CanTakeNewRequest, line 740, 然后这个函数同样需要 http2ClientConn.mu 这个锁, line 7175\n\n7174 func (cc *http2ClientConn) CanTakeNewRequest() bool {\n7175\tcc.mu.Lock()\n7176\tdefer cc.mu.Unlock()\n7177\treturn cc.canTakeNewRequestLocked()\n7178 }\n\n\n738         p.mu.Lock()                                                                              |8008                         ErrCode:      cc.goAway.ErrCode,                                        \n739         for _, cc := range p.conns[addr] {                                                       |8009                         DebugData:    cc.goAwayDebug,                                           \n740                 if cc.CanTakeNewRequest() {                                                      |8010                 }                                                                               \n741                         p.mu.Unlock()                                                            |8011         } else if err == io.EOF {                                                               \n742                         return cc, nil                                                           |8012                 err = io.ErrUnexpectedEOF                                                       \n743                 }                                                                                |8013         }                                                                                       \n744         }                                                                                        |8014         for _, cs := range cc.streams {                                                         \n745         if !dialOnMiss {                                                                         |8015                 cs.bufPipe.CloseWithError(err) // no-op if already closed                       \n746                 p.mu.Unlock()                                                                    |8016                 select {                                                                        \n747                 return nil, http2ErrNoCachedConn                                                 |8017                 case cs.resc <- http2resAndError{err: err}:                                     \n748         }                                                                                        |8018                 default:                                                                        \n749         call := p.getStartDialLocked(addr)                                                       |8019                 }                                                                               \n750         p.mu.Unlock() \n\n\n\nstep2. 写 header\nstep2-1. 拿 http2ClientConn.mu 锁, line 7335\nstep2-2. 调用 http2ClientConn.writeHeaders 去写 header\nstep2-3. http2ClientConn.writeHeaders 调用 bw.Flush（有潜在的卡住风险）\nstep2-4. 释放 http2ClientConn.mu 锁 line 7384\n\n7335\tcc.mu.Lock()\n\t......\n7382\tcc.wmu.Lock()\n7383\tendStream := !hasBody && !hasTrailers\n7384\twerr := cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)\n7385\tcc.wmu.Unlock()\n7386\thttp2traceWroteHeaders(cs.trace)\n7387\tcc.mu.Unlock()\n```\n在上面的步骤中，如果在写 header 的时候卡在了`step2-3`，那么后续的向同一个地址的请求都会卡在`step1-3`。然后后续的 https 请求都会被卡在`step1-2`，直到`step2-3`处理结束。\n\n再来说说 CLOST_WAIT，CLOSE_WAIT 状态下，read 立即返回，按理会关闭 socket，让 write 也立即返回，但是 olang 的代码里关闭 socket 之前，又执行了一个需要请求 cc.mu lock 的逻辑，相当于这里也被卡住了: https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232 。结合服务的错误日志，基本都是 write connnection timed out，基本上命中重传超时了。\n\n### 0x100\n既然找到问题了，那么接下来就是如何解决了。因为我们服务用的是 Golang1.9，本质上其实升级 Golang 应该可以解决问题，但是我们升级到了 Go1.11 这个问题貌似也还是存在。如何测试问题是否存在：\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\nvar url = flag.String(\"url\", \"https://172.28.128.3:12345/test\", \"url\")\n\nfunc main() {\n\n\tflag.Parse()\n\n\tvar reqA, doneA int64\n\tvar reqB, doneB int64\n\tfor {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tgo func() {\n\t\t\t\tatomic.AddInt64(&reqA, 1)\n\t\t\t\tresp, err := http.Get(\"https://www.qiniu.com\")\n\t\t\t\tif err == nil {\n\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)\n\t\t\t\t\tresp.Body.Close()\n\t\t\t\t}\n\t\t\t\tatomic.AddInt64(&doneA, 1)\n\t\t\t}()\n\t\t}\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tgo func() {\n\t\t\t\tatomic.AddInt64(&reqB, 1)\n\t\t\t\treq, _ := http.NewRequest(\"GET\", *url, nil)\n\t\t\t\treq.Header.Set(\"X-Qiniu\", strings.Repeat(\"helloworld\", 1024))\n\t\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\t\tif err == nil {\n\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)\n\t\t\t\t\tresp.Body.Close()\n\t\t\t\t}\n\t\t\t\tatomic.AddInt64(&doneB, 1)\n\t\t\t}()\n\t\t}\n\n\t\tfmt.Printf(\"reqA:%d doneA:%d, reqB:%d doneB:%d\\n\", atomic.LoadInt64(&reqA), atomic.LoadInt64(&doneA), atomic.LoadInt64(&reqB), atomic.LoadInt64(&doneB))\n\n\t\ttime.Sleep(1e9)\n\t}\n}\n```\n运行上面的代码，然后拔掉 172.28.128.3 这台机器的电源。然后就会发现所有请求的卡住了\n```\n[18:16:08]~/code/go $ go run test.go \n2020-03-16 18:16:54 reqA:2 doneA:0, reqB:1 doneB:0\n2020-03-16 18:16:55 reqA:12 doneA:10, reqB:11 doneB:6\n2020-03-16 18:16:56 reqA:21 doneA:20, reqB:20 doneB:20\n2020-03-16 18:16:57 reqA:33 doneA:30, reqB:31 doneB:30\n2020-03-16 18:16:58 reqA:44 doneA:40, reqB:41 doneB:40\n2020-03-16 18:16:59 reqA:52 doneA:50, reqB:50 doneB:50\n2020-03-16 18:17:00 reqA:62 doneA:60, reqB:62 doneB:60\n2020-03-16 18:17:01 reqA:72 doneA:70, reqB:71 doneB:60\n2020-03-16 18:17:02 reqA:83 doneA:79, reqB:81 doneB:60\n2020-03-16 18:17:03 reqA:92 doneA:79, reqB:91 doneB:60\n2020-03-16 18:17:04 reqA:101 doneA:79, reqB:101 doneB:60\n2020-03-16 18:17:05 reqA:110 doneA:79, reqB:110 doneB:60\n2020-03-16 18:17:06 reqA:122 doneA:79, reqB:122 doneB:60\n2020-03-16 18:17:07 reqA:132 doneA:79, reqB:130 doneB:60\n2020-03-16 18:17:08 reqA:141 doneA:79, reqB:141 doneB:60\n2020-03-16 18:17:09 reqA:151 doneA:79, reqB:151 doneB:60\n2020-03-16 18:17:10 reqA:162 doneA:79, reqB:161 doneB:60\n2020-03-16 18:17:11 reqA:171 doneA:79, reqB:171 doneB:60\n2020-03-16 18:17:12 reqA:187 doneA:79, reqB:181 doneB:60\n2020-03-16 18:17:13 reqA:193 doneA:79, reqB:192 doneB:60\n```\n\n这里在说说拔电源和 kill 服务的区别\nKill 服务：\nclient socket 会收到 FIN 包，然后状态变成 CLOSE_WAIT\n读操作会立即返回 EOF\n写操作通常会失败，然后收到一个 RST 的返回\n\n拔电源：\n没有 FIN 包，client socket 啥也不知道\n读操作会一直卡住，直到 tcp keepalive timed out 或者其他一些奇怪的事情发生\n写操作也一样\n\n### 0x101\nGo1.12，Go1.13，Go1.14 没有测试过。\n我们用的解决办法是，新建了一个 http.Client 实例，自定义了 net.Transport 和 net.Dailer.\n```\nclient := &http.Client{\n\tTransport: &http.Transport{\n\t\tDial: (&net.Dialer{\n\t\t}).Dial,\n\t},\n\tTimeout: 5 * time.Second,\n}\n```\n\n以上","source":"_posts/golang1-9-https-bug.md","raw":"---\ntitle: Golang1.9 HTTPS bug 排查记录\ndate: 2020-03-22 21:26:20\ntags: Golang\nphotos: \n\t- https://oa7ktymto.qnssl.com/golanghttps2.png\n---\n这个是一个Golang1.9的 Bug。当一个 HTTPS 链接客户端未知状态(没有 fin) `broken` 的时候，后续的 HTTPS 链接都会卡住。\n\n### 0x001 \n最近某天接到短信告警，portal.qiniu.com 的 API 不可用。查日志发现是请求 sso.qiniu.com 超时。浏览器打开 sso.qiniu.com 貌似没有问题，然后让运维同学帮忙排查一下网络问题。过了大概15分钟，收到服务恢复短信。\n\n### 0x010\n过了一会儿，告警短信又来了。查看 sso.qiniu.com 机器的监控，发现 sso.qiniu.com 服务的句柄如下图所示(前面几天的图没了， 简单画了一个)：\n\n![](https://oa7ktymto.qnssl.com/WeChat764a584a7f88762aa808802b9868bc34.png)\n\n从这个图我们可以看到，服务在12:00左右的时候句柄就开始涨了，到大概12:14:30左右开始断崖式下跌。在查这个监控的时候，句柄还在涨，然后重启了 sso.qiniu.com 服务，句柄恢复正常。紧接着就收到了服务恢复短信通知。\n\n### 0x011\n\n查看 sso.qiniu.com 的日志，发现在请求一个外部的 HTTPS 域名的时候有超时，如：\n```\n2020/03/09 12:01:19.793954 [ERROR] components/logger/transport.go:73: Service: POST xxxxxxxx/user/info, Code: 0, Err: http2: server sent GOAWAY and closed the connection; LastStreamID=1999, ErrCode=NO_ERROR, debug=\"\", Time: 950750ms\n```\n\n然后查链接状态，发现大部分 socket 处于未正常被关闭的状态（CLOSE_WAIT、can't identify protocol、protocol: TCPv6），同时访问公网的 socket 个数很少。\n\n推测大部分请求是卡在与外部服务建立连接之前，未正常被关闭的是 nginx 端已经断开连接。\n\n然后接着看，发现只有一个 https 请求，而且处于 CLOSE_WAIT 状态，几台机器的状态都是一样。然后回去看 sso.qiniu.com 的日志，发现卡住的请求全是 https 请求。\n\n推测问题出在了 https 请求处理上，我们这边不会对 https 请求做特殊处理，那么问题应该就出在 golang 的 net/http 库上。\n\n再根据卡住的时间，基本上都在 14min30s 左右，与我们的 retransmission 整体的超时时间是匹配的（同时也恰好与 tcp keepalive 的超时时间差不多）。\n\nrestransmission 整体超时时间是 rto 超时后，重传，rto 翻倍，直到 TCP_RTO_MAX(我们是120s)，重传次数我们系统配置的是 15 次（net.ipv4.tcp_retries2 = 15），按初始 200~300ms 的 rto 算出来大约是 14min 左右。\n\n再说一下 tcp keepalive，我们系统的设置是  intvl=75、probes=9、time=600，然后我们 Golang 里面把 intvl 改为了30，这样算出来时间刚刚好是 14min30s 左右。\n\n然后 Golang 代码，发现了可能导致卡住的逻辑： https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go\n```\n一个正常的 https 请求的流程是，第一步获取链接，第二步写 header\nstep1. 获取链接\nstep1-1. 调用 http2clientConnPool.GetClientConn 获取一个可用的链接\nstep1-2. 拿 http2clientConnPool.mu 锁, line 738\nstep1-3. 调用 http2ClientConn.CanTakeNewRequest, line 740, 然后这个函数同样需要 http2ClientConn.mu 这个锁, line 7175\n\n7174 func (cc *http2ClientConn) CanTakeNewRequest() bool {\n7175\tcc.mu.Lock()\n7176\tdefer cc.mu.Unlock()\n7177\treturn cc.canTakeNewRequestLocked()\n7178 }\n\n\n738         p.mu.Lock()                                                                              |8008                         ErrCode:      cc.goAway.ErrCode,                                        \n739         for _, cc := range p.conns[addr] {                                                       |8009                         DebugData:    cc.goAwayDebug,                                           \n740                 if cc.CanTakeNewRequest() {                                                      |8010                 }                                                                               \n741                         p.mu.Unlock()                                                            |8011         } else if err == io.EOF {                                                               \n742                         return cc, nil                                                           |8012                 err = io.ErrUnexpectedEOF                                                       \n743                 }                                                                                |8013         }                                                                                       \n744         }                                                                                        |8014         for _, cs := range cc.streams {                                                         \n745         if !dialOnMiss {                                                                         |8015                 cs.bufPipe.CloseWithError(err) // no-op if already closed                       \n746                 p.mu.Unlock()                                                                    |8016                 select {                                                                        \n747                 return nil, http2ErrNoCachedConn                                                 |8017                 case cs.resc <- http2resAndError{err: err}:                                     \n748         }                                                                                        |8018                 default:                                                                        \n749         call := p.getStartDialLocked(addr)                                                       |8019                 }                                                                               \n750         p.mu.Unlock() \n\n\n\nstep2. 写 header\nstep2-1. 拿 http2ClientConn.mu 锁, line 7335\nstep2-2. 调用 http2ClientConn.writeHeaders 去写 header\nstep2-3. http2ClientConn.writeHeaders 调用 bw.Flush（有潜在的卡住风险）\nstep2-4. 释放 http2ClientConn.mu 锁 line 7384\n\n7335\tcc.mu.Lock()\n\t......\n7382\tcc.wmu.Lock()\n7383\tendStream := !hasBody && !hasTrailers\n7384\twerr := cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)\n7385\tcc.wmu.Unlock()\n7386\thttp2traceWroteHeaders(cs.trace)\n7387\tcc.mu.Unlock()\n```\n在上面的步骤中，如果在写 header 的时候卡在了`step2-3`，那么后续的向同一个地址的请求都会卡在`step1-3`。然后后续的 https 请求都会被卡在`step1-2`，直到`step2-3`处理结束。\n\n再来说说 CLOST_WAIT，CLOSE_WAIT 状态下，read 立即返回，按理会关闭 socket，让 write 也立即返回，但是 olang 的代码里关闭 socket 之前，又执行了一个需要请求 cc.mu lock 的逻辑，相当于这里也被卡住了: https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232 。结合服务的错误日志，基本都是 write connnection timed out，基本上命中重传超时了。\n\n### 0x100\n既然找到问题了，那么接下来就是如何解决了。因为我们服务用的是 Golang1.9，本质上其实升级 Golang 应该可以解决问题，但是我们升级到了 Go1.11 这个问题貌似也还是存在。如何测试问题是否存在：\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\nvar url = flag.String(\"url\", \"https://172.28.128.3:12345/test\", \"url\")\n\nfunc main() {\n\n\tflag.Parse()\n\n\tvar reqA, doneA int64\n\tvar reqB, doneB int64\n\tfor {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tgo func() {\n\t\t\t\tatomic.AddInt64(&reqA, 1)\n\t\t\t\tresp, err := http.Get(\"https://www.qiniu.com\")\n\t\t\t\tif err == nil {\n\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)\n\t\t\t\t\tresp.Body.Close()\n\t\t\t\t}\n\t\t\t\tatomic.AddInt64(&doneA, 1)\n\t\t\t}()\n\t\t}\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tgo func() {\n\t\t\t\tatomic.AddInt64(&reqB, 1)\n\t\t\t\treq, _ := http.NewRequest(\"GET\", *url, nil)\n\t\t\t\treq.Header.Set(\"X-Qiniu\", strings.Repeat(\"helloworld\", 1024))\n\t\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\t\tif err == nil {\n\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)\n\t\t\t\t\tresp.Body.Close()\n\t\t\t\t}\n\t\t\t\tatomic.AddInt64(&doneB, 1)\n\t\t\t}()\n\t\t}\n\n\t\tfmt.Printf(\"reqA:%d doneA:%d, reqB:%d doneB:%d\\n\", atomic.LoadInt64(&reqA), atomic.LoadInt64(&doneA), atomic.LoadInt64(&reqB), atomic.LoadInt64(&doneB))\n\n\t\ttime.Sleep(1e9)\n\t}\n}\n```\n运行上面的代码，然后拔掉 172.28.128.3 这台机器的电源。然后就会发现所有请求的卡住了\n```\n[18:16:08]~/code/go $ go run test.go \n2020-03-16 18:16:54 reqA:2 doneA:0, reqB:1 doneB:0\n2020-03-16 18:16:55 reqA:12 doneA:10, reqB:11 doneB:6\n2020-03-16 18:16:56 reqA:21 doneA:20, reqB:20 doneB:20\n2020-03-16 18:16:57 reqA:33 doneA:30, reqB:31 doneB:30\n2020-03-16 18:16:58 reqA:44 doneA:40, reqB:41 doneB:40\n2020-03-16 18:16:59 reqA:52 doneA:50, reqB:50 doneB:50\n2020-03-16 18:17:00 reqA:62 doneA:60, reqB:62 doneB:60\n2020-03-16 18:17:01 reqA:72 doneA:70, reqB:71 doneB:60\n2020-03-16 18:17:02 reqA:83 doneA:79, reqB:81 doneB:60\n2020-03-16 18:17:03 reqA:92 doneA:79, reqB:91 doneB:60\n2020-03-16 18:17:04 reqA:101 doneA:79, reqB:101 doneB:60\n2020-03-16 18:17:05 reqA:110 doneA:79, reqB:110 doneB:60\n2020-03-16 18:17:06 reqA:122 doneA:79, reqB:122 doneB:60\n2020-03-16 18:17:07 reqA:132 doneA:79, reqB:130 doneB:60\n2020-03-16 18:17:08 reqA:141 doneA:79, reqB:141 doneB:60\n2020-03-16 18:17:09 reqA:151 doneA:79, reqB:151 doneB:60\n2020-03-16 18:17:10 reqA:162 doneA:79, reqB:161 doneB:60\n2020-03-16 18:17:11 reqA:171 doneA:79, reqB:171 doneB:60\n2020-03-16 18:17:12 reqA:187 doneA:79, reqB:181 doneB:60\n2020-03-16 18:17:13 reqA:193 doneA:79, reqB:192 doneB:60\n```\n\n这里在说说拔电源和 kill 服务的区别\nKill 服务：\nclient socket 会收到 FIN 包，然后状态变成 CLOSE_WAIT\n读操作会立即返回 EOF\n写操作通常会失败，然后收到一个 RST 的返回\n\n拔电源：\n没有 FIN 包，client socket 啥也不知道\n读操作会一直卡住，直到 tcp keepalive timed out 或者其他一些奇怪的事情发生\n写操作也一样\n\n### 0x101\nGo1.12，Go1.13，Go1.14 没有测试过。\n我们用的解决办法是，新建了一个 http.Client 实例，自定义了 net.Transport 和 net.Dailer.\n```\nclient := &http.Client{\n\tTransport: &http.Transport{\n\t\tDial: (&net.Dialer{\n\t\t}).Dial,\n\t},\n\tTimeout: 5 * time.Second,\n}\n```\n\n以上","slug":"golang1-9-https-bug","published":1,"updated":"2020-03-23T14:48:24.054Z","comments":1,"layout":"post","link":"","_id":"ckatepn7j000cq0tx278q91dj","content":"<p>这个是一个Golang1.9的 Bug。当一个 HTTPS 链接客户端未知状态(没有 fin) <code>broken</code> 的时候，后续的 HTTPS 链接都会卡住。</p>\n<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>最近某天接到短信告警，portal.qiniu.com 的 API 不可用。查日志发现是请求 sso.qiniu.com 超时。浏览器打开 sso.qiniu.com 貌似没有问题，然后让运维同学帮忙排查一下网络问题。过了大概15分钟，收到服务恢复短信。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>过了一会儿，告警短信又来了。查看 sso.qiniu.com 机器的监控，发现 sso.qiniu.com 服务的句柄如下图所示(前面几天的图没了， 简单画了一个)：</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/WeChat764a584a7f88762aa808802b9868bc34.png\" alt=\"\"></p>\n<p>从这个图我们可以看到，服务在12:00左右的时候句柄就开始涨了，到大概12:14:30左右开始断崖式下跌。在查这个监控的时候，句柄还在涨，然后重启了 sso.qiniu.com 服务，句柄恢复正常。紧接着就收到了服务恢复短信通知。</p>\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>查看 sso.qiniu.com 的日志，发现在请求一个外部的 HTTPS 域名的时候有超时，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/03/09 12:01:19.793954 [ERROR] components/logger/transport.go:73: Service: POST xxxxxxxx/user/info, Code: 0, Err: http2: server sent GOAWAY and closed the connection; LastStreamID=1999, ErrCode=NO_ERROR, debug=&quot;&quot;, Time: 950750ms</span><br></pre></td></tr></table></figure>\n\n<p>然后查链接状态，发现大部分 socket 处于未正常被关闭的状态（CLOSE_WAIT、can’t identify protocol、protocol: TCPv6），同时访问公网的 socket 个数很少。</p>\n<p>推测大部分请求是卡在与外部服务建立连接之前，未正常被关闭的是 nginx 端已经断开连接。</p>\n<p>然后接着看，发现只有一个 https 请求，而且处于 CLOSE_WAIT 状态，几台机器的状态都是一样。然后回去看 sso.qiniu.com 的日志，发现卡住的请求全是 https 请求。</p>\n<p>推测问题出在了 https 请求处理上，我们这边不会对 https 请求做特殊处理，那么问题应该就出在 golang 的 net/http 库上。</p>\n<p>再根据卡住的时间，基本上都在 14min30s 左右，与我们的 retransmission 整体的超时时间是匹配的（同时也恰好与 tcp keepalive 的超时时间差不多）。</p>\n<p>restransmission 整体超时时间是 rto 超时后，重传，rto 翻倍，直到 TCP_RTO_MAX(我们是120s)，重传次数我们系统配置的是 15 次（net.ipv4.tcp_retries2 = 15），按初始 200~300ms 的 rto 算出来大约是 14min 左右。</p>\n<p>再说一下 tcp keepalive，我们系统的设置是  intvl=75、probes=9、time=600，然后我们 Golang 里面把 intvl 改为了30，这样算出来时间刚刚好是 14min30s 左右。</p>\n<p>然后 Golang 代码，发现了可能导致卡住的逻辑： <a href=\"https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个正常的 https 请求的流程是，第一步获取链接，第二步写 header</span><br><span class=\"line\">step1. 获取链接</span><br><span class=\"line\">step1-1. 调用 http2clientConnPool.GetClientConn 获取一个可用的链接</span><br><span class=\"line\">step1-2. 拿 http2clientConnPool.mu 锁, line 738</span><br><span class=\"line\">step1-3. 调用 http2ClientConn.CanTakeNewRequest, line 740, 然后这个函数同样需要 http2ClientConn.mu 这个锁, line 7175</span><br><span class=\"line\"></span><br><span class=\"line\">7174 func (cc *http2ClientConn) CanTakeNewRequest() bool &#123;</span><br><span class=\"line\">7175\tcc.mu.Lock()</span><br><span class=\"line\">7176\tdefer cc.mu.Unlock()</span><br><span class=\"line\">7177\treturn cc.canTakeNewRequestLocked()</span><br><span class=\"line\">7178 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">738         p.mu.Lock()                                                                              |8008                         ErrCode:      cc.goAway.ErrCode,                                        </span><br><span class=\"line\">739         for _, cc := range p.conns[addr] &#123;                                                       |8009                         DebugData:    cc.goAwayDebug,                                           </span><br><span class=\"line\">740                 if cc.CanTakeNewRequest() &#123;                                                      |8010                 &#125;                                                                               </span><br><span class=\"line\">741                         p.mu.Unlock()                                                            |8011         &#125; else if err == io.EOF &#123;                                                               </span><br><span class=\"line\">742                         return cc, nil                                                           |8012                 err = io.ErrUnexpectedEOF                                                       </span><br><span class=\"line\">743                 &#125;                                                                                |8013         &#125;                                                                                       </span><br><span class=\"line\">744         &#125;                                                                                        |8014         for _, cs := range cc.streams &#123;                                                         </span><br><span class=\"line\">745         if !dialOnMiss &#123;                                                                         |8015                 cs.bufPipe.CloseWithError(err) // no-op if already closed                       </span><br><span class=\"line\">746                 p.mu.Unlock()                                                                    |8016                 select &#123;                                                                        </span><br><span class=\"line\">747                 return nil, http2ErrNoCachedConn                                                 |8017                 case cs.resc &lt;- http2resAndError&#123;err: err&#125;:                                     </span><br><span class=\"line\">748         &#125;                                                                                        |8018                 default:                                                                        </span><br><span class=\"line\">749         call := p.getStartDialLocked(addr)                                                       |8019                 &#125;                                                                               </span><br><span class=\"line\">750         p.mu.Unlock() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">step2. 写 header</span><br><span class=\"line\">step2-1. 拿 http2ClientConn.mu 锁, line 7335</span><br><span class=\"line\">step2-2. 调用 http2ClientConn.writeHeaders 去写 header</span><br><span class=\"line\">step2-3. http2ClientConn.writeHeaders 调用 bw.Flush（有潜在的卡住风险）</span><br><span class=\"line\">step2-4. 释放 http2ClientConn.mu 锁 line 7384</span><br><span class=\"line\"></span><br><span class=\"line\">7335\tcc.mu.Lock()</span><br><span class=\"line\">\t......</span><br><span class=\"line\">7382\tcc.wmu.Lock()</span><br><span class=\"line\">7383\tendStream := !hasBody &amp;&amp; !hasTrailers</span><br><span class=\"line\">7384\twerr := cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)</span><br><span class=\"line\">7385\tcc.wmu.Unlock()</span><br><span class=\"line\">7386\thttp2traceWroteHeaders(cs.trace)</span><br><span class=\"line\">7387\tcc.mu.Unlock()</span><br></pre></td></tr></table></figure>\n\n<p>在上面的步骤中，如果在写 header 的时候卡在了<code>step2-3</code>，那么后续的向同一个地址的请求都会卡在<code>step1-3</code>。然后后续的 https 请求都会被卡在<code>step1-2</code>，直到<code>step2-3</code>处理结束。</p>\n<p>再来说说 CLOST_WAIT，CLOSE_WAIT 状态下，read 立即返回，按理会关闭 socket，让 write 也立即返回，但是 olang 的代码里关闭 socket 之前，又执行了一个需要请求 cc.mu lock 的逻辑，相当于这里也被卡住了: <a href=\"https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232</a> 。结合服务的错误日志，基本都是 write connnection timed out，基本上命中重传超时了。</p>\n<h3 id=\"0x100\"><a href=\"#0x100\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>既然找到问题了，那么接下来就是如何解决了。因为我们服务用的是 Golang1.9，本质上其实升级 Golang 应该可以解决问题，但是我们升级到了 Go1.11 这个问题貌似也还是存在。如何测试问题是否存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;io&quot;</span><br><span class=\"line\">\t&quot;io/ioutil&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">\t&quot;sync/atomic&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var url = flag.String(&quot;url&quot;, &quot;https://172.28.128.3:12345/test&quot;, &quot;url&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar reqA, doneA int64</span><br><span class=\"line\">\tvar reqB, doneB int64</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;reqA, 1)</span><br><span class=\"line\">\t\t\t\tresp, err := http.Get(&quot;https://www.qiniu.com&quot;)</span><br><span class=\"line\">\t\t\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)</span><br><span class=\"line\">\t\t\t\t\tresp.Body.Close()</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;doneA, 1)</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;reqB, 1)</span><br><span class=\"line\">\t\t\t\treq, _ := http.NewRequest(&quot;GET&quot;, *url, nil)</span><br><span class=\"line\">\t\t\t\treq.Header.Set(&quot;X-Qiniu&quot;, strings.Repeat(&quot;helloworld&quot;, 1024))</span><br><span class=\"line\">\t\t\t\tresp, err := http.DefaultClient.Do(req)</span><br><span class=\"line\">\t\t\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)</span><br><span class=\"line\">\t\t\t\t\tresp.Body.Close()</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;doneB, 1)</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Printf(&quot;reqA:%d doneA:%d, reqB:%d doneB:%d\\n&quot;, atomic.LoadInt64(&amp;reqA), atomic.LoadInt64(&amp;doneA), atomic.LoadInt64(&amp;reqB), atomic.LoadInt64(&amp;doneB))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttime.Sleep(1e9)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的代码，然后拔掉 172.28.128.3 这台机器的电源。然后就会发现所有请求的卡住了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[18:16:08]~/code/go $ go run test.go </span><br><span class=\"line\">2020-03-16 18:16:54 reqA:2 doneA:0, reqB:1 doneB:0</span><br><span class=\"line\">2020-03-16 18:16:55 reqA:12 doneA:10, reqB:11 doneB:6</span><br><span class=\"line\">2020-03-16 18:16:56 reqA:21 doneA:20, reqB:20 doneB:20</span><br><span class=\"line\">2020-03-16 18:16:57 reqA:33 doneA:30, reqB:31 doneB:30</span><br><span class=\"line\">2020-03-16 18:16:58 reqA:44 doneA:40, reqB:41 doneB:40</span><br><span class=\"line\">2020-03-16 18:16:59 reqA:52 doneA:50, reqB:50 doneB:50</span><br><span class=\"line\">2020-03-16 18:17:00 reqA:62 doneA:60, reqB:62 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:01 reqA:72 doneA:70, reqB:71 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:02 reqA:83 doneA:79, reqB:81 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:03 reqA:92 doneA:79, reqB:91 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:04 reqA:101 doneA:79, reqB:101 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:05 reqA:110 doneA:79, reqB:110 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:06 reqA:122 doneA:79, reqB:122 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:07 reqA:132 doneA:79, reqB:130 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:08 reqA:141 doneA:79, reqB:141 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:09 reqA:151 doneA:79, reqB:151 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:10 reqA:162 doneA:79, reqB:161 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:11 reqA:171 doneA:79, reqB:171 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:12 reqA:187 doneA:79, reqB:181 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:13 reqA:193 doneA:79, reqB:192 doneB:60</span><br></pre></td></tr></table></figure>\n\n<p>这里在说说拔电源和 kill 服务的区别<br>Kill 服务：<br>client socket 会收到 FIN 包，然后状态变成 CLOSE_WAIT<br>读操作会立即返回 EOF<br>写操作通常会失败，然后收到一个 RST 的返回</p>\n<p>拔电源：<br>没有 FIN 包，client socket 啥也不知道<br>读操作会一直卡住，直到 tcp keepalive timed out 或者其他一些奇怪的事情发生<br>写操作也一样</p>\n<h3 id=\"0x101\"><a href=\"#0x101\" class=\"headerlink\" title=\"0x101\"></a>0x101</h3><p>Go1.12，Go1.13，Go1.14 没有测试过。<br>我们用的解决办法是，新建了一个 http.Client 实例，自定义了 net.Transport 和 net.Dailer.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">\tTransport: &amp;http.Transport&#123;</span><br><span class=\"line\">\t\tDial: (&amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t&#125;).Dial,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tTimeout: 5 * time.Second,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个是一个Golang1.9的 Bug。当一个 HTTPS 链接客户端未知状态(没有 fin) <code>broken</code> 的时候，后续的 HTTPS 链接都会卡住。</p>\n<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>最近某天接到短信告警，portal.qiniu.com 的 API 不可用。查日志发现是请求 sso.qiniu.com 超时。浏览器打开 sso.qiniu.com 貌似没有问题，然后让运维同学帮忙排查一下网络问题。过了大概15分钟，收到服务恢复短信。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>过了一会儿，告警短信又来了。查看 sso.qiniu.com 机器的监控，发现 sso.qiniu.com 服务的句柄如下图所示(前面几天的图没了， 简单画了一个)：</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/WeChat764a584a7f88762aa808802b9868bc34.png\" alt=\"\"></p>\n<p>从这个图我们可以看到，服务在12:00左右的时候句柄就开始涨了，到大概12:14:30左右开始断崖式下跌。在查这个监控的时候，句柄还在涨，然后重启了 sso.qiniu.com 服务，句柄恢复正常。紧接着就收到了服务恢复短信通知。</p>\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>查看 sso.qiniu.com 的日志，发现在请求一个外部的 HTTPS 域名的时候有超时，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020/03/09 12:01:19.793954 [ERROR] components/logger/transport.go:73: Service: POST xxxxxxxx/user/info, Code: 0, Err: http2: server sent GOAWAY and closed the connection; LastStreamID=1999, ErrCode=NO_ERROR, debug=&quot;&quot;, Time: 950750ms</span><br></pre></td></tr></table></figure>\n\n<p>然后查链接状态，发现大部分 socket 处于未正常被关闭的状态（CLOSE_WAIT、can’t identify protocol、protocol: TCPv6），同时访问公网的 socket 个数很少。</p>\n<p>推测大部分请求是卡在与外部服务建立连接之前，未正常被关闭的是 nginx 端已经断开连接。</p>\n<p>然后接着看，发现只有一个 https 请求，而且处于 CLOSE_WAIT 状态，几台机器的状态都是一样。然后回去看 sso.qiniu.com 的日志，发现卡住的请求全是 https 请求。</p>\n<p>推测问题出在了 https 请求处理上，我们这边不会对 https 请求做特殊处理，那么问题应该就出在 golang 的 net/http 库上。</p>\n<p>再根据卡住的时间，基本上都在 14min30s 左右，与我们的 retransmission 整体的超时时间是匹配的（同时也恰好与 tcp keepalive 的超时时间差不多）。</p>\n<p>restransmission 整体超时时间是 rto 超时后，重传，rto 翻倍，直到 TCP_RTO_MAX(我们是120s)，重传次数我们系统配置的是 15 次（net.ipv4.tcp_retries2 = 15），按初始 200~300ms 的 rto 算出来大约是 14min 左右。</p>\n<p>再说一下 tcp keepalive，我们系统的设置是  intvl=75、probes=9、time=600，然后我们 Golang 里面把 intvl 改为了30，这样算出来时间刚刚好是 14min30s 左右。</p>\n<p>然后 Golang 代码，发现了可能导致卡住的逻辑： <a href=\"https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/blob/ac7c0ee26dda18076d5f6c151d8f920b43340ae3/src/net/http/h2_bundle.go</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个正常的 https 请求的流程是，第一步获取链接，第二步写 header</span><br><span class=\"line\">step1. 获取链接</span><br><span class=\"line\">step1-1. 调用 http2clientConnPool.GetClientConn 获取一个可用的链接</span><br><span class=\"line\">step1-2. 拿 http2clientConnPool.mu 锁, line 738</span><br><span class=\"line\">step1-3. 调用 http2ClientConn.CanTakeNewRequest, line 740, 然后这个函数同样需要 http2ClientConn.mu 这个锁, line 7175</span><br><span class=\"line\"></span><br><span class=\"line\">7174 func (cc *http2ClientConn) CanTakeNewRequest() bool &#123;</span><br><span class=\"line\">7175\tcc.mu.Lock()</span><br><span class=\"line\">7176\tdefer cc.mu.Unlock()</span><br><span class=\"line\">7177\treturn cc.canTakeNewRequestLocked()</span><br><span class=\"line\">7178 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">738         p.mu.Lock()                                                                              |8008                         ErrCode:      cc.goAway.ErrCode,                                        </span><br><span class=\"line\">739         for _, cc := range p.conns[addr] &#123;                                                       |8009                         DebugData:    cc.goAwayDebug,                                           </span><br><span class=\"line\">740                 if cc.CanTakeNewRequest() &#123;                                                      |8010                 &#125;                                                                               </span><br><span class=\"line\">741                         p.mu.Unlock()                                                            |8011         &#125; else if err == io.EOF &#123;                                                               </span><br><span class=\"line\">742                         return cc, nil                                                           |8012                 err = io.ErrUnexpectedEOF                                                       </span><br><span class=\"line\">743                 &#125;                                                                                |8013         &#125;                                                                                       </span><br><span class=\"line\">744         &#125;                                                                                        |8014         for _, cs := range cc.streams &#123;                                                         </span><br><span class=\"line\">745         if !dialOnMiss &#123;                                                                         |8015                 cs.bufPipe.CloseWithError(err) // no-op if already closed                       </span><br><span class=\"line\">746                 p.mu.Unlock()                                                                    |8016                 select &#123;                                                                        </span><br><span class=\"line\">747                 return nil, http2ErrNoCachedConn                                                 |8017                 case cs.resc &lt;- http2resAndError&#123;err: err&#125;:                                     </span><br><span class=\"line\">748         &#125;                                                                                        |8018                 default:                                                                        </span><br><span class=\"line\">749         call := p.getStartDialLocked(addr)                                                       |8019                 &#125;                                                                               </span><br><span class=\"line\">750         p.mu.Unlock() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">step2. 写 header</span><br><span class=\"line\">step2-1. 拿 http2ClientConn.mu 锁, line 7335</span><br><span class=\"line\">step2-2. 调用 http2ClientConn.writeHeaders 去写 header</span><br><span class=\"line\">step2-3. http2ClientConn.writeHeaders 调用 bw.Flush（有潜在的卡住风险）</span><br><span class=\"line\">step2-4. 释放 http2ClientConn.mu 锁 line 7384</span><br><span class=\"line\"></span><br><span class=\"line\">7335\tcc.mu.Lock()</span><br><span class=\"line\">\t......</span><br><span class=\"line\">7382\tcc.wmu.Lock()</span><br><span class=\"line\">7383\tendStream := !hasBody &amp;&amp; !hasTrailers</span><br><span class=\"line\">7384\twerr := cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)</span><br><span class=\"line\">7385\tcc.wmu.Unlock()</span><br><span class=\"line\">7386\thttp2traceWroteHeaders(cs.trace)</span><br><span class=\"line\">7387\tcc.mu.Unlock()</span><br></pre></td></tr></table></figure>\n\n<p>在上面的步骤中，如果在写 header 的时候卡在了<code>step2-3</code>，那么后续的向同一个地址的请求都会卡在<code>step1-3</code>。然后后续的 https 请求都会被卡在<code>step1-2</code>，直到<code>step2-3</code>处理结束。</p>\n<p>再来说说 CLOST_WAIT，CLOSE_WAIT 状态下，read 立即返回，按理会关闭 socket，让 write 也立即返回，但是 olang 的代码里关闭 socket 之前，又执行了一个需要请求 cc.mu lock 的逻辑，相当于这里也被卡住了: <a href=\"https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/go/blob/e8a95aeb75536496432bcace1fb2bbfa449bf0fa/src/net/http/h2_bundle.go#L8232</a> 。结合服务的错误日志，基本都是 write connnection timed out，基本上命中重传超时了。</p>\n<h3 id=\"0x100\"><a href=\"#0x100\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>既然找到问题了，那么接下来就是如何解决了。因为我们服务用的是 Golang1.9，本质上其实升级 Golang 应该可以解决问题，但是我们升级到了 Go1.11 这个问题貌似也还是存在。如何测试问题是否存在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;flag&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;io&quot;</span><br><span class=\"line\">\t&quot;io/ioutil&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">\t&quot;sync/atomic&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var url = flag.String(&quot;url&quot;, &quot;https://172.28.128.3:12345/test&quot;, &quot;url&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar reqA, doneA int64</span><br><span class=\"line\">\tvar reqB, doneB int64</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;reqA, 1)</span><br><span class=\"line\">\t\t\t\tresp, err := http.Get(&quot;https://www.qiniu.com&quot;)</span><br><span class=\"line\">\t\t\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)</span><br><span class=\"line\">\t\t\t\t\tresp.Body.Close()</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;doneA, 1)</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tgo func() &#123;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;reqB, 1)</span><br><span class=\"line\">\t\t\t\treq, _ := http.NewRequest(&quot;GET&quot;, *url, nil)</span><br><span class=\"line\">\t\t\t\treq.Header.Set(&quot;X-Qiniu&quot;, strings.Repeat(&quot;helloworld&quot;, 1024))</span><br><span class=\"line\">\t\t\t\tresp, err := http.DefaultClient.Do(req)</span><br><span class=\"line\">\t\t\t\tif err == nil &#123;</span><br><span class=\"line\">\t\t\t\t\tio.Copy(ioutil.Discard, resp.Body)</span><br><span class=\"line\">\t\t\t\t\tresp.Body.Close()</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tatomic.AddInt64(&amp;doneB, 1)</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Printf(&quot;reqA:%d doneA:%d, reqB:%d doneB:%d\\n&quot;, atomic.LoadInt64(&amp;reqA), atomic.LoadInt64(&amp;doneA), atomic.LoadInt64(&amp;reqB), atomic.LoadInt64(&amp;doneB))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttime.Sleep(1e9)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的代码，然后拔掉 172.28.128.3 这台机器的电源。然后就会发现所有请求的卡住了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[18:16:08]~/code/go $ go run test.go </span><br><span class=\"line\">2020-03-16 18:16:54 reqA:2 doneA:0, reqB:1 doneB:0</span><br><span class=\"line\">2020-03-16 18:16:55 reqA:12 doneA:10, reqB:11 doneB:6</span><br><span class=\"line\">2020-03-16 18:16:56 reqA:21 doneA:20, reqB:20 doneB:20</span><br><span class=\"line\">2020-03-16 18:16:57 reqA:33 doneA:30, reqB:31 doneB:30</span><br><span class=\"line\">2020-03-16 18:16:58 reqA:44 doneA:40, reqB:41 doneB:40</span><br><span class=\"line\">2020-03-16 18:16:59 reqA:52 doneA:50, reqB:50 doneB:50</span><br><span class=\"line\">2020-03-16 18:17:00 reqA:62 doneA:60, reqB:62 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:01 reqA:72 doneA:70, reqB:71 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:02 reqA:83 doneA:79, reqB:81 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:03 reqA:92 doneA:79, reqB:91 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:04 reqA:101 doneA:79, reqB:101 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:05 reqA:110 doneA:79, reqB:110 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:06 reqA:122 doneA:79, reqB:122 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:07 reqA:132 doneA:79, reqB:130 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:08 reqA:141 doneA:79, reqB:141 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:09 reqA:151 doneA:79, reqB:151 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:10 reqA:162 doneA:79, reqB:161 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:11 reqA:171 doneA:79, reqB:171 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:12 reqA:187 doneA:79, reqB:181 doneB:60</span><br><span class=\"line\">2020-03-16 18:17:13 reqA:193 doneA:79, reqB:192 doneB:60</span><br></pre></td></tr></table></figure>\n\n<p>这里在说说拔电源和 kill 服务的区别<br>Kill 服务：<br>client socket 会收到 FIN 包，然后状态变成 CLOSE_WAIT<br>读操作会立即返回 EOF<br>写操作通常会失败，然后收到一个 RST 的返回</p>\n<p>拔电源：<br>没有 FIN 包，client socket 啥也不知道<br>读操作会一直卡住，直到 tcp keepalive timed out 或者其他一些奇怪的事情发生<br>写操作也一样</p>\n<h3 id=\"0x101\"><a href=\"#0x101\" class=\"headerlink\" title=\"0x101\"></a>0x101</h3><p>Go1.12，Go1.13，Go1.14 没有测试过。<br>我们用的解决办法是，新建了一个 http.Client 实例，自定义了 net.Transport 和 net.Dailer.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client := &amp;http.Client&#123;</span><br><span class=\"line\">\tTransport: &amp;http.Transport&#123;</span><br><span class=\"line\">\t\tDial: (&amp;net.Dialer&#123;</span><br><span class=\"line\">\t\t&#125;).Dial,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tTimeout: 5 * time.Second,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上</p>\n"},{"title":"如何用 Travis 部署 Hexo","date":"2016-10-17T16:55:19.000Z","photos":["https://oa7ktymto.qnssl.com/hexo.png"],"_content":"简单介绍一下如何用Travis来部署Hexo的博客到服务器上面\n<!--more-->\n\n### 0x001\n\n我们先来欣赏一下新海诚的最新作《你的名字》的ED。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=426881506&auto=1&height=32\"></iframe>\n\n希望各位看官喜欢。\n\n### 0x010\n\n之前自己在折腾博客的前端。 以前是用 `Angular1` 写的前端，博客的所有文章全部存七牛，用`Go`写了一个脚本来处理本地的文章同步到七牛的问题。\n\n这种方式存在的几个问题：\n第一，不方便做归档。\n第二，不方便开放评论。\n第三，不方便做SEO(可能是我太菜了。。逃)。\n\n所以就想到直接用现有的博客框架来直接搭了一个。\n\n### 0x100\n\n看了下 [hexo](https://hexo.io) 的官网，感觉很简单的。按照官方的 _quickstart_ 很快就在本地的 4000 端口把博客搭起来了。 神速啊～～～\n\n大概试用了一下，感觉还不错。 顺便就换了一个主题 [Daily](https://https://github.com/GallenHu/hexo-theme-Daily)。 然后把原来博客上面的仅有的一篇文章直接 Copy 下来：\n```\nhexo new XXXXX\nhexo serve\n```\n感觉效果还不错，看起来简洁了很多。接下来就是如何部署到VPS上面去了。\n\n### 0x011\n\n首先想到的是把本地的 blog 直接推到 Github，然后在 VPS 上面装 Github, NodeJs, Hexo, Nginx 等等一系列的工具把本地的代码在 VPS 上面再编译一次。啊啊，好麻烦，还不如用七牛。\n\n查了一下 hexo 的文档，发现它可以把博客 generate 成一对静态文件，这个功能简直太棒了。这样的话就可以直接用 nginx 来代理一下静态文件就可以了。\n\n### 0x100\n\n（不是很爽的操作方式）首先创建一个 Github 的 repo， 然后在本地的 blog 文件夹执行：\n```\ngit init\ngit remote add origin git@github.com:{{YourName}}/{{YourRepoName}}.git\n```\n此时如果你在远端新建了 `develop` 分支作为默认分支的话。 那么你就准备接受被坑爹吧，这个时候你把本地的代码 push 到远端的 `develop`，但是你不能把 \t`develop` 分支的代码合并到 `master`。在你去比较这两个分支的时候会出这样的问题：\n> There isn't anything to compare.\n>\n> master and develop are entirely different commit histories.\n\n具体原因这个地方不展开。解决办法： \n```\ngit fetch origin \t\t\t// 在本地的 `develop` 分支\ngit rebase origin/master\t// 把本地的 commit 历史修改掉\n```\n然后你在 `git push -f` 一次。现在你就可以 PR 到 `master` 分支了。\n\n比较干净利落的操作方式：[Github](https://help.github.com/)\n\n### 0x101 \n\n用 Travis 部署到 VPS。很明显需要 Travis 有访问 VPS 的权限\n\n接下来我们需要配置 travis-ci 了。\n在本地下载一个 travis，推荐使用 `gem install travis`。 如果本地没有 `gem` 的童鞋可以 [Google](https://www.google.com.hk/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#newwindow=1&safe=strict&q=ruby+gem++install) 一下如何安装。然后用 Github 账号登录到刚刚安装好的 travis 客户端。操作代码如下：\n```\ngem install travis\ntravis login // github username & password\n```\n-------------------------------------------\n\n现在呢，我们需要为 Travis 生成一对公私钥，用来给 Travis 做登录用。\n```\nssh-keygen -f travis \t// 一路回车下去，就会在当前文件夹内成两个文件\n\t\t\t\t\t\t\n```\n一个叫 travis(私钥) ，一个叫 travis.pub(公钥) 。把 travis.pub 的内容放到 VPS 用户目录的 `.ssh/authorized_keys` 里面。\n\n现在移步到 blog 文件夹(放博客的地方)。新建一个 .travis 的文件夹，把刚刚创建的私钥移动到 .travis 这个文件夹下面。\n\n然后\n```\ntravis encrypt-file travis  --add\n\n它会检测你当前所在的 repo ，需要你确认，输入 yes 就好\n它会生成一个叫做 `travis.enc` 的文件在 .travis 下面\n```\n\n这个操作会在你当前的 repo 下面生成一个叫 `.travis.yml` 的文件，然后会在里面填上一些内容\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv\n  -in .travis/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n// 这个步骤可能出来有些童鞋不是这个样子的， 原因是路径不对。你修改一下 travis.enc 的路径就好啦。 后面会给出完整的命令行\n```\n然后在 `.travis.yml` 这个文件里面加上一些其他的东西就可以啦。 比如说我的\n```\nlanguage: node_js\nnode_js:\n- 6\nbranches:\n  only:\n  - master\ninstall:\n- npm install hexo-cli -g\n- npm install\n- npm install --save hexo-renderer-sass\naddons:\n  ssh_known_hosts: wxy.sexy:22\nscript:\n- hexo clean\n- hexo generate \n- rsync -az -vv --delete -e 'ssh -p 22' public/ [用户名]@[服务器]:[路径]\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv\n  -in .travis/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n```\n\n### 0x110\n这个是完整的命令：\n假设：你的GithubId: hello, 你创建好的GithubRepo: world\n\n```\n// 初始化本地仓库\ngit clone git@github.com:hello@world.git\n\ncd world\n\ngit checkout -b blog\n\n// 安装 hexo\nnpm install hexo-cli -g\nnpm install\n\n// 创建 .travis 文件夹\nmkdir .travis\ncd .travis\n\n// 生成公私钥，然后把公钥放到 VPS 上\nssh-keygen -f travis\n\n// 安装travis\n// 如果没有 gem 的童鞋，请自行 Google\ngem install travis\n\n// 使用你的Github账号登录 travis\ntravis login \n\ncd ..\n\n// 加密秘钥\ntravis encrypt-file .travis/travis  --add\n\n// 把变更提交到远程仓库\ngit add .\ngit commit -m \"init commit\"\ngit push\n```\n这篇文章纯属扯淡。。\n其实你可以不用 Travis 来部署。 你直接在本地\n```\nhexo g\nscp public/ [name]@[ip]:[path] \n```\n就好啦。用Travis还有安全问题。\n就这样。\n早睡，祝好\n\n","source":"_posts/how-to-deploy-hexo-with-travis.md","raw":"---\ntitle: 如何用 Travis 部署 Hexo\ndate: 2016-10-18 00:55:19\ntags:\n\t- Hexo\nphotos:\n\t- https://oa7ktymto.qnssl.com/hexo.png\n---\n简单介绍一下如何用Travis来部署Hexo的博客到服务器上面\n<!--more-->\n\n### 0x001\n\n我们先来欣赏一下新海诚的最新作《你的名字》的ED。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&id=426881506&auto=1&height=32\"></iframe>\n\n希望各位看官喜欢。\n\n### 0x010\n\n之前自己在折腾博客的前端。 以前是用 `Angular1` 写的前端，博客的所有文章全部存七牛，用`Go`写了一个脚本来处理本地的文章同步到七牛的问题。\n\n这种方式存在的几个问题：\n第一，不方便做归档。\n第二，不方便开放评论。\n第三，不方便做SEO(可能是我太菜了。。逃)。\n\n所以就想到直接用现有的博客框架来直接搭了一个。\n\n### 0x100\n\n看了下 [hexo](https://hexo.io) 的官网，感觉很简单的。按照官方的 _quickstart_ 很快就在本地的 4000 端口把博客搭起来了。 神速啊～～～\n\n大概试用了一下，感觉还不错。 顺便就换了一个主题 [Daily](https://https://github.com/GallenHu/hexo-theme-Daily)。 然后把原来博客上面的仅有的一篇文章直接 Copy 下来：\n```\nhexo new XXXXX\nhexo serve\n```\n感觉效果还不错，看起来简洁了很多。接下来就是如何部署到VPS上面去了。\n\n### 0x011\n\n首先想到的是把本地的 blog 直接推到 Github，然后在 VPS 上面装 Github, NodeJs, Hexo, Nginx 等等一系列的工具把本地的代码在 VPS 上面再编译一次。啊啊，好麻烦，还不如用七牛。\n\n查了一下 hexo 的文档，发现它可以把博客 generate 成一对静态文件，这个功能简直太棒了。这样的话就可以直接用 nginx 来代理一下静态文件就可以了。\n\n### 0x100\n\n（不是很爽的操作方式）首先创建一个 Github 的 repo， 然后在本地的 blog 文件夹执行：\n```\ngit init\ngit remote add origin git@github.com:{{YourName}}/{{YourRepoName}}.git\n```\n此时如果你在远端新建了 `develop` 分支作为默认分支的话。 那么你就准备接受被坑爹吧，这个时候你把本地的代码 push 到远端的 `develop`，但是你不能把 \t`develop` 分支的代码合并到 `master`。在你去比较这两个分支的时候会出这样的问题：\n> There isn't anything to compare.\n>\n> master and develop are entirely different commit histories.\n\n具体原因这个地方不展开。解决办法： \n```\ngit fetch origin \t\t\t// 在本地的 `develop` 分支\ngit rebase origin/master\t// 把本地的 commit 历史修改掉\n```\n然后你在 `git push -f` 一次。现在你就可以 PR 到 `master` 分支了。\n\n比较干净利落的操作方式：[Github](https://help.github.com/)\n\n### 0x101 \n\n用 Travis 部署到 VPS。很明显需要 Travis 有访问 VPS 的权限\n\n接下来我们需要配置 travis-ci 了。\n在本地下载一个 travis，推荐使用 `gem install travis`。 如果本地没有 `gem` 的童鞋可以 [Google](https://www.google.com.hk/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#newwindow=1&safe=strict&q=ruby+gem++install) 一下如何安装。然后用 Github 账号登录到刚刚安装好的 travis 客户端。操作代码如下：\n```\ngem install travis\ntravis login // github username & password\n```\n-------------------------------------------\n\n现在呢，我们需要为 Travis 生成一对公私钥，用来给 Travis 做登录用。\n```\nssh-keygen -f travis \t// 一路回车下去，就会在当前文件夹内成两个文件\n\t\t\t\t\t\t\n```\n一个叫 travis(私钥) ，一个叫 travis.pub(公钥) 。把 travis.pub 的内容放到 VPS 用户目录的 `.ssh/authorized_keys` 里面。\n\n现在移步到 blog 文件夹(放博客的地方)。新建一个 .travis 的文件夹，把刚刚创建的私钥移动到 .travis 这个文件夹下面。\n\n然后\n```\ntravis encrypt-file travis  --add\n\n它会检测你当前所在的 repo ，需要你确认，输入 yes 就好\n它会生成一个叫做 `travis.enc` 的文件在 .travis 下面\n```\n\n这个操作会在你当前的 repo 下面生成一个叫 `.travis.yml` 的文件，然后会在里面填上一些内容\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv\n  -in .travis/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n// 这个步骤可能出来有些童鞋不是这个样子的， 原因是路径不对。你修改一下 travis.enc 的路径就好啦。 后面会给出完整的命令行\n```\n然后在 `.travis.yml` 这个文件里面加上一些其他的东西就可以啦。 比如说我的\n```\nlanguage: node_js\nnode_js:\n- 6\nbranches:\n  only:\n  - master\ninstall:\n- npm install hexo-cli -g\n- npm install\n- npm install --save hexo-renderer-sass\naddons:\n  ssh_known_hosts: wxy.sexy:22\nscript:\n- hexo clean\n- hexo generate \n- rsync -az -vv --delete -e 'ssh -p 22' public/ [用户名]@[服务器]:[路径]\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv\n  -in .travis/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n```\n\n### 0x110\n这个是完整的命令：\n假设：你的GithubId: hello, 你创建好的GithubRepo: world\n\n```\n// 初始化本地仓库\ngit clone git@github.com:hello@world.git\n\ncd world\n\ngit checkout -b blog\n\n// 安装 hexo\nnpm install hexo-cli -g\nnpm install\n\n// 创建 .travis 文件夹\nmkdir .travis\ncd .travis\n\n// 生成公私钥，然后把公钥放到 VPS 上\nssh-keygen -f travis\n\n// 安装travis\n// 如果没有 gem 的童鞋，请自行 Google\ngem install travis\n\n// 使用你的Github账号登录 travis\ntravis login \n\ncd ..\n\n// 加密秘钥\ntravis encrypt-file .travis/travis  --add\n\n// 把变更提交到远程仓库\ngit add .\ngit commit -m \"init commit\"\ngit push\n```\n这篇文章纯属扯淡。。\n其实你可以不用 Travis 来部署。 你直接在本地\n```\nhexo g\nscp public/ [name]@[ip]:[path] \n```\n就好啦。用Travis还有安全问题。\n就这样。\n早睡，祝好\n\n","slug":"how-to-deploy-hexo-with-travis","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7k000dq0txwrpl8mqw","content":"<p>简单介绍一下如何用Travis来部署Hexo的博客到服务器上面</p>\n<a id=\"more\"></a>\n\n<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>我们先来欣赏一下新海诚的最新作《你的名字》的ED。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=426881506&auto=1&height=32\"></iframe>\n\n<p>希望各位看官喜欢。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>之前自己在折腾博客的前端。 以前是用 <code>Angular1</code> 写的前端，博客的所有文章全部存七牛，用<code>Go</code>写了一个脚本来处理本地的文章同步到七牛的问题。</p>\n<p>这种方式存在的几个问题：<br>第一，不方便做归档。<br>第二，不方便开放评论。<br>第三，不方便做SEO(可能是我太菜了。。逃)。</p>\n<p>所以就想到直接用现有的博客框架来直接搭了一个。</p>\n<h3 id=\"0x100\"><a href=\"#0x100\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>看了下 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a> 的官网，感觉很简单的。按照官方的 <em>quickstart</em> 很快就在本地的 4000 端口把博客搭起来了。 神速啊～～～</p>\n<p>大概试用了一下，感觉还不错。 顺便就换了一个主题 <a href=\"https://https://github.com/GallenHu/hexo-theme-Daily\" target=\"_blank\" rel=\"noopener\">Daily</a>。 然后把原来博客上面的仅有的一篇文章直接 Copy 下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new XXXXX</span><br><span class=\"line\">hexo serve</span><br></pre></td></tr></table></figure>\n\n<p>感觉效果还不错，看起来简洁了很多。接下来就是如何部署到VPS上面去了。</p>\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>首先想到的是把本地的 blog 直接推到 Github，然后在 VPS 上面装 Github, NodeJs, Hexo, Nginx 等等一系列的工具把本地的代码在 VPS 上面再编译一次。啊啊，好麻烦，还不如用七牛。</p>\n<p>查了一下 hexo 的文档，发现它可以把博客 generate 成一对静态文件，这个功能简直太棒了。这样的话就可以直接用 nginx 来代理一下静态文件就可以了。</p>\n<h3 id=\"0x100-1\"><a href=\"#0x100-1\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>（不是很爽的操作方式）首先创建一个 Github 的 repo， 然后在本地的 blog 文件夹执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github.com:&#123;&#123;YourName&#125;&#125;/&#123;&#123;YourRepoName&#125;&#125;.git</span><br></pre></td></tr></table></figure>\n\n<p>此时如果你在远端新建了 <code>develop</code> 分支作为默认分支的话。 那么你就准备接受被坑爹吧，这个时候你把本地的代码 push 到远端的 <code>develop</code>，但是你不能把     <code>develop</code> 分支的代码合并到 <code>master</code>。在你去比较这两个分支的时候会出这样的问题：</p>\n<blockquote>\n<p>There isn’t anything to compare.</p>\n<p>master and develop are entirely different commit histories.</p>\n</blockquote>\n<p>具体原因这个地方不展开。解决办法： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin \t\t\t// 在本地的 `develop` 分支</span><br><span class=\"line\">git rebase origin/master\t// 把本地的 commit 历史修改掉</span><br></pre></td></tr></table></figure>\n\n<p>然后你在 <code>git push -f</code> 一次。现在你就可以 PR 到 <code>master</code> 分支了。</p>\n<p>比较干净利落的操作方式：<a href=\"https://help.github.com/\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"0x101\"><a href=\"#0x101\" class=\"headerlink\" title=\"0x101\"></a>0x101</h3><p>用 Travis 部署到 VPS。很明显需要 Travis 有访问 VPS 的权限</p>\n<p>接下来我们需要配置 travis-ci 了。<br>在本地下载一个 travis，推荐使用 <code>gem install travis</code>。 如果本地没有 <code>gem</code> 的童鞋可以 <a href=\"https://www.google.com.hk/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#newwindow=1&safe=strict&q=ruby+gem++install\" target=\"_blank\" rel=\"noopener\">Google</a> 一下如何安装。然后用 Github 账号登录到刚刚安装好的 travis 客户端。操作代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login // github username &amp; password</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>现在呢，我们需要为 Travis 生成一对公私钥，用来给 Travis 做登录用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f travis \t// 一路回车下去，就会在当前文件夹内成两个文件</span><br></pre></td></tr></table></figure>\n\n<p>一个叫 travis(私钥) ，一个叫 travis.pub(公钥) 。把 travis.pub 的内容放到 VPS 用户目录的 <code>.ssh/authorized_keys</code> 里面。</p>\n<p>现在移步到 blog 文件夹(放博客的地方)。新建一个 .travis 的文件夹，把刚刚创建的私钥移动到 .travis 这个文件夹下面。</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">travis encrypt-file travis  --add</span><br><span class=\"line\"></span><br><span class=\"line\">它会检测你当前所在的 repo ，需要你确认，输入 yes 就好</span><br><span class=\"line\">它会生成一个叫做 `travis.enc` 的文件在 .travis 下面</span><br></pre></td></tr></table></figure>\n\n<p>这个操作会在你当前的 repo 下面生成一个叫 <code>.travis.yml</code> 的文件，然后会在里面填上一些内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv</span><br><span class=\"line\">  -in .travis/travis.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个步骤可能出来有些童鞋不是这个样子的， 原因是路径不对。你修改一下 travis.enc 的路径就好啦。 后面会给出完整的命令行</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>.travis.yml</code> 这个文件里面加上一些其他的东西就可以啦。 比如说我的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">- 6</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">  - master</span><br><span class=\"line\">install:</span><br><span class=\"line\">- npm install hexo-cli -g</span><br><span class=\"line\">- npm install</span><br><span class=\"line\">- npm install --save hexo-renderer-sass</span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: wxy.sexy:22</span><br><span class=\"line\">script:</span><br><span class=\"line\">- hexo clean</span><br><span class=\"line\">- hexo generate </span><br><span class=\"line\">- rsync -az -vv --delete -e &apos;ssh -p 22&apos; public/ [用户名]@[服务器]:[路径]</span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv</span><br><span class=\"line\">  -in .travis/travis.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x110\"><a href=\"#0x110\" class=\"headerlink\" title=\"0x110\"></a>0x110</h3><p>这个是完整的命令：<br>假设：你的GithubId: hello, 你创建好的GithubRepo: world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化本地仓库</span><br><span class=\"line\">git clone git@github.com:hello@world.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd world</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建 .travis 文件夹</span><br><span class=\"line\">mkdir .travis</span><br><span class=\"line\">cd .travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成公私钥，然后把公钥放到 VPS 上</span><br><span class=\"line\">ssh-keygen -f travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装travis</span><br><span class=\"line\">// 如果没有 gem 的童鞋，请自行 Google</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用你的Github账号登录 travis</span><br><span class=\"line\">travis login </span><br><span class=\"line\"></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">// 加密秘钥</span><br><span class=\"line\">travis encrypt-file .travis/travis  --add</span><br><span class=\"line\"></span><br><span class=\"line\">// 把变更提交到远程仓库</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;init commit&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>这篇文章纯属扯淡。。<br>其实你可以不用 Travis 来部署。 你直接在本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">scp public/ [name]@[ip]:[path]</span><br></pre></td></tr></table></figure>\n\n<p>就好啦。用Travis还有安全问题。<br>就这样。<br>早睡，祝好</p>\n","site":{"data":{}},"excerpt":"<p>简单介绍一下如何用Travis来部署Hexo的博客到服务器上面</p>","more":"<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>我们先来欣赏一下新海诚的最新作《你的名字》的ED。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=426881506&auto=1&height=32\"></iframe>\n\n<p>希望各位看官喜欢。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>之前自己在折腾博客的前端。 以前是用 <code>Angular1</code> 写的前端，博客的所有文章全部存七牛，用<code>Go</code>写了一个脚本来处理本地的文章同步到七牛的问题。</p>\n<p>这种方式存在的几个问题：<br>第一，不方便做归档。<br>第二，不方便开放评论。<br>第三，不方便做SEO(可能是我太菜了。。逃)。</p>\n<p>所以就想到直接用现有的博客框架来直接搭了一个。</p>\n<h3 id=\"0x100\"><a href=\"#0x100\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>看了下 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a> 的官网，感觉很简单的。按照官方的 <em>quickstart</em> 很快就在本地的 4000 端口把博客搭起来了。 神速啊～～～</p>\n<p>大概试用了一下，感觉还不错。 顺便就换了一个主题 <a href=\"https://https://github.com/GallenHu/hexo-theme-Daily\" target=\"_blank\" rel=\"noopener\">Daily</a>。 然后把原来博客上面的仅有的一篇文章直接 Copy 下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new XXXXX</span><br><span class=\"line\">hexo serve</span><br></pre></td></tr></table></figure>\n\n<p>感觉效果还不错，看起来简洁了很多。接下来就是如何部署到VPS上面去了。</p>\n<h3 id=\"0x011\"><a href=\"#0x011\" class=\"headerlink\" title=\"0x011\"></a>0x011</h3><p>首先想到的是把本地的 blog 直接推到 Github，然后在 VPS 上面装 Github, NodeJs, Hexo, Nginx 等等一系列的工具把本地的代码在 VPS 上面再编译一次。啊啊，好麻烦，还不如用七牛。</p>\n<p>查了一下 hexo 的文档，发现它可以把博客 generate 成一对静态文件，这个功能简直太棒了。这样的话就可以直接用 nginx 来代理一下静态文件就可以了。</p>\n<h3 id=\"0x100-1\"><a href=\"#0x100-1\" class=\"headerlink\" title=\"0x100\"></a>0x100</h3><p>（不是很爽的操作方式）首先创建一个 Github 的 repo， 然后在本地的 blog 文件夹执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@github.com:&#123;&#123;YourName&#125;&#125;/&#123;&#123;YourRepoName&#125;&#125;.git</span><br></pre></td></tr></table></figure>\n\n<p>此时如果你在远端新建了 <code>develop</code> 分支作为默认分支的话。 那么你就准备接受被坑爹吧，这个时候你把本地的代码 push 到远端的 <code>develop</code>，但是你不能把     <code>develop</code> 分支的代码合并到 <code>master</code>。在你去比较这两个分支的时候会出这样的问题：</p>\n<blockquote>\n<p>There isn’t anything to compare.</p>\n<p>master and develop are entirely different commit histories.</p>\n</blockquote>\n<p>具体原因这个地方不展开。解决办法： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin \t\t\t// 在本地的 `develop` 分支</span><br><span class=\"line\">git rebase origin/master\t// 把本地的 commit 历史修改掉</span><br></pre></td></tr></table></figure>\n\n<p>然后你在 <code>git push -f</code> 一次。现在你就可以 PR 到 <code>master</code> 分支了。</p>\n<p>比较干净利落的操作方式：<a href=\"https://help.github.com/\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h3 id=\"0x101\"><a href=\"#0x101\" class=\"headerlink\" title=\"0x101\"></a>0x101</h3><p>用 Travis 部署到 VPS。很明显需要 Travis 有访问 VPS 的权限</p>\n<p>接下来我们需要配置 travis-ci 了。<br>在本地下载一个 travis，推荐使用 <code>gem install travis</code>。 如果本地没有 <code>gem</code> 的童鞋可以 <a href=\"https://www.google.com.hk/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#newwindow=1&safe=strict&q=ruby+gem++install\" target=\"_blank\" rel=\"noopener\">Google</a> 一下如何安装。然后用 Github 账号登录到刚刚安装好的 travis 客户端。操作代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login // github username &amp; password</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>现在呢，我们需要为 Travis 生成一对公私钥，用来给 Travis 做登录用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f travis \t// 一路回车下去，就会在当前文件夹内成两个文件</span><br></pre></td></tr></table></figure>\n\n<p>一个叫 travis(私钥) ，一个叫 travis.pub(公钥) 。把 travis.pub 的内容放到 VPS 用户目录的 <code>.ssh/authorized_keys</code> 里面。</p>\n<p>现在移步到 blog 文件夹(放博客的地方)。新建一个 .travis 的文件夹，把刚刚创建的私钥移动到 .travis 这个文件夹下面。</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">travis encrypt-file travis  --add</span><br><span class=\"line\"></span><br><span class=\"line\">它会检测你当前所在的 repo ，需要你确认，输入 yes 就好</span><br><span class=\"line\">它会生成一个叫做 `travis.enc` 的文件在 .travis 下面</span><br></pre></td></tr></table></figure>\n\n<p>这个操作会在你当前的 repo 下面生成一个叫 <code>.travis.yml</code> 的文件，然后会在里面填上一些内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv</span><br><span class=\"line\">  -in .travis/travis.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个步骤可能出来有些童鞋不是这个样子的， 原因是路径不对。你修改一下 travis.enc 的路径就好啦。 后面会给出完整的命令行</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>.travis.yml</code> 这个文件里面加上一些其他的东西就可以啦。 比如说我的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">- 6</span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">  - master</span><br><span class=\"line\">install:</span><br><span class=\"line\">- npm install hexo-cli -g</span><br><span class=\"line\">- npm install</span><br><span class=\"line\">- npm install --save hexo-renderer-sass</span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: wxy.sexy:22</span><br><span class=\"line\">script:</span><br><span class=\"line\">- hexo clean</span><br><span class=\"line\">- hexo generate </span><br><span class=\"line\">- rsync -az -vv --delete -e &apos;ssh -p 22&apos; public/ [用户名]@[服务器]:[路径]</span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_fda9e2a69cea_key -iv $encrypted_fda9e2a69cea_iv</span><br><span class=\"line\">  -in .travis/travis.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x110\"><a href=\"#0x110\" class=\"headerlink\" title=\"0x110\"></a>0x110</h3><p>这个是完整的命令：<br>假设：你的GithubId: hello, 你创建好的GithubRepo: world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化本地仓库</span><br><span class=\"line\">git clone git@github.com:hello@world.git</span><br><span class=\"line\"></span><br><span class=\"line\">cd world</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b blog</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装 hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建 .travis 文件夹</span><br><span class=\"line\">mkdir .travis</span><br><span class=\"line\">cd .travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成公私钥，然后把公钥放到 VPS 上</span><br><span class=\"line\">ssh-keygen -f travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 安装travis</span><br><span class=\"line\">// 如果没有 gem 的童鞋，请自行 Google</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用你的Github账号登录 travis</span><br><span class=\"line\">travis login </span><br><span class=\"line\"></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"></span><br><span class=\"line\">// 加密秘钥</span><br><span class=\"line\">travis encrypt-file .travis/travis  --add</span><br><span class=\"line\"></span><br><span class=\"line\">// 把变更提交到远程仓库</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;init commit&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>这篇文章纯属扯淡。。<br>其实你可以不用 Travis 来部署。 你直接在本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">scp public/ [name]@[ip]:[path]</span><br></pre></td></tr></table></figure>\n\n<p>就好啦。用Travis还有安全问题。<br>就这样。<br>早睡，祝好</p>"},{"title":"在 Centos7 使用 SQLite3","date":"2020-05-30T08:15:05.000Z","photos":["https://oa7ktymto.qnssl.com/golang-sqlite-simple-example.png"],"_content":"\n### 0x001 背景\n打算在 Centos7 上跑 Golang 代码，Golang 里面用到 SQLite3 这个本地数据库，本来是想上 Mysql 的，但是想到 VPS 是 1核1G 就想直接用内嵌在应用里面的数据库，就想到了 SQLite3 ，直接一个 DB 文件就可以了，而且还可以直接用 Dropbox 同步，防止数据丢失，不是为一个好的选择。\n\n### 0x010 第一次尝试\n这里呢，我们用 `github.com/jinzhu/gorm` 这个 ORM 库来读写数据库，它已经自带了 SQLite3 的数据库驱动，所以直接上一段简单的代码：\n```go\npackage main\nimport(\n\t\"log\"\n\t\n\t \"github.com/jinzhu/gorm\"\n\t _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"sqlite3.db\")\n\tif err !=nil {\n\t\tlog.Fatal(err)\t\n\t}\n\t\n\tdb.Automigrate(&Image{})\n}\n\ntype Image struct{\n\tID int `gorm:\"primary_key\"`\n\tKey string `gorm:\"size:50\"`\n}\n```\n由于我本地是 Mac 环境，所以咱们直接交叉编译，然后把编译好的二进制文件扔到机器上执行就可以了。\n```\n➜ GOOS=linux GOARCH=amd64 go build -o bot main.go\n➜ scp bot vps2:\n\n这里我提前在我的 .ssh/config 里面加好了配置:\nHost vps2\n    User root\n    Hostname **.**.**.*\n    Port ***\n    IdentityFile ~/.ssh/id_rsa\n```\n\n然后登录到机器上执行：\n```\n> ./bot \n2020/05/30 15:20:01 /Users/wentx/momaek/src/bot/main.go:59: Binary was compiled with 'CGO_ENABLED=0', go-sqlite3 requires cgo to work. This is a stub\n```\n噢，原来需要 CGO_ENABLED=1，那咱重新在本地编一个就可以了呗。\n```\n➜ GOOS=linux GOARCH=amd64 go build -o bot main.go\n# github.com/mattn/go-sqlite3\nsqlite3-binding.c:33723:42: error: use of undeclared identifier 'pread64'\nsqlite3-binding.c:33741:42: error: use of undeclared identifier 'pwrite64'\nsqlite3-binding.c:33874:22: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33883:22: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33910:20: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33927:16: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:14469:38: note: expanded from macro 'ArraySize'\nsqlite3-binding.c:33931:14: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:14469:38: note: expanded from macro 'ArraySize'\nsqlite3-binding.c:36584:11: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]\nsqlite3-binding.c:33727:49: note: expanded from macro 'osPread64'\nsqlite3-binding.c:36696:17: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]\nsqlite3-binding.c:33745:57: note: expanded from macro 'osPwrite64'\n```\n咦～好像不行\n\n### 0x011 第二次尝试\n既然 Mac 上交叉编译不能用 CGO ，那我们就在 Docker 里面编就可以了吧。\n```\n➜ docker run --rm -v \"$PWD\":/Users/wentx/momaek/src/bot -w /Users/wentx/momaek/src/bot -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e GOPROXY='https://goproxy.cn,direct' golang:1.14 go build -v\n.\n.\n.\n...\n➜ scp bot vps2:\n```\n\n然后在 vps 上执行：\n```\n> ./bot\n./bot: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by ./bot)\n```\n噢，还依赖 GLIBC_2.28 啊，咱装一个呗。\n基本步骤：\n```\nwget http://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz\ntar zxvf glibc-2.28.tar.gz\ncd glibc-2.28\nmkdir build\ncd build\n../configure --prefix=/opt/glibc-2.28\nmake -j4\nsudo make install\n```\n我们跟着一步一步走，到了\n```\n> ../configure --prefix=/opt/glibc-2.28\n.\n.\n...\nchecking version of gmake... 3.82, bad\nif gcc is sufficient to build libc... no\n\n*** These critical programs are missing or too old: make bison compiler\n```\n看来，make,bison 和 gcc 需要升级或者安装。\n我们先来看看版本\n```\n> make --version\nGNU Make 3.82\nBuilt for x86_64-redhat-linux-gnu\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n> \n> gcc --version\ngcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n> bison --version\n-bash: bison: command not found (这货居然没有)\n```\n#### 安装 bsion\n```\n> wget https://ftp.gnu.org/gnu/bison/bison-3.2.tar.gz\n> tar xf bison-3.2.tar.gz\n> cd bison-3.2\n> ./configure --prefix=/usr\n> make\n> make install\n```\n一步步走就可以，中间可能需要 m4，直接 `yum install m4 -y` 就可以。\n\n#### 更新 make\n```\n> cd /tmp\n> wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz\n> tar xvf make-4.1.tar.gz\n> cd make-4.1/\n> ./configure\n> make\n> make install\n> export PATH=/tmp/make-4.1:$PATH\n> which gmake\n/usr/bin/gmake\n> rm /usr/bin/gmake\n> ln -s /tmp/make-4.1/make /usr/bin/gmake\n> make --version \nGNU Make 4.1\nBuilt for x86_64-unknown-linux-gnu\nCopyright (C) 1988-2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```\n\n#### 更新 gcc\n```\n> yum install centos-release-scl\n> yum install devtoolset-7-gcc*\n> scl enable devtoolset-7 bash\n> gcc --version\ngcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)\nCopyright (C) 2017 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n回到 GLIBC_2.28 的安装，继续 \n```\n> ../configure --prefix=/usr\n.\n.\n.\n> make -j4\n.\n.\n.（40分钟过去了）\n.\n.\n> make install\n.\n.\n```\n安装完成。\n\n最后执行：\n```\n> ./bot\n(/Users/wentx/momaek/src/bot/main.go:64)\n[2020-05-30 16:06:59]  [24.65ms]  CREATE TABLE \"images\" (\"id\" integer primary key autoincrement,\"key\" varchar(50),\"user\" varchar(50),\"created_at\" datetime,\"deleted_at\" datetime )\n[0 rows affected or returned ]\n```\nOK","source":"_posts/在-Centos7-使用-SQLite3.md","raw":"---\ntitle: 在 Centos7 使用 SQLite3 \ndate: 2020-05-30 16:15:05\ntags: \n\t- Golang\n\t- SQLite3\nphotos:\n    - https://oa7ktymto.qnssl.com/golang-sqlite-simple-example.png\n---\n\n### 0x001 背景\n打算在 Centos7 上跑 Golang 代码，Golang 里面用到 SQLite3 这个本地数据库，本来是想上 Mysql 的，但是想到 VPS 是 1核1G 就想直接用内嵌在应用里面的数据库，就想到了 SQLite3 ，直接一个 DB 文件就可以了，而且还可以直接用 Dropbox 同步，防止数据丢失，不是为一个好的选择。\n\n### 0x010 第一次尝试\n这里呢，我们用 `github.com/jinzhu/gorm` 这个 ORM 库来读写数据库，它已经自带了 SQLite3 的数据库驱动，所以直接上一段简单的代码：\n```go\npackage main\nimport(\n\t\"log\"\n\t\n\t \"github.com/jinzhu/gorm\"\n\t _ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\n\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"sqlite3.db\")\n\tif err !=nil {\n\t\tlog.Fatal(err)\t\n\t}\n\t\n\tdb.Automigrate(&Image{})\n}\n\ntype Image struct{\n\tID int `gorm:\"primary_key\"`\n\tKey string `gorm:\"size:50\"`\n}\n```\n由于我本地是 Mac 环境，所以咱们直接交叉编译，然后把编译好的二进制文件扔到机器上执行就可以了。\n```\n➜ GOOS=linux GOARCH=amd64 go build -o bot main.go\n➜ scp bot vps2:\n\n这里我提前在我的 .ssh/config 里面加好了配置:\nHost vps2\n    User root\n    Hostname **.**.**.*\n    Port ***\n    IdentityFile ~/.ssh/id_rsa\n```\n\n然后登录到机器上执行：\n```\n> ./bot \n2020/05/30 15:20:01 /Users/wentx/momaek/src/bot/main.go:59: Binary was compiled with 'CGO_ENABLED=0', go-sqlite3 requires cgo to work. This is a stub\n```\n噢，原来需要 CGO_ENABLED=1，那咱重新在本地编一个就可以了呗。\n```\n➜ GOOS=linux GOARCH=amd64 go build -o bot main.go\n# github.com/mattn/go-sqlite3\nsqlite3-binding.c:33723:42: error: use of undeclared identifier 'pread64'\nsqlite3-binding.c:33741:42: error: use of undeclared identifier 'pwrite64'\nsqlite3-binding.c:33874:22: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33883:22: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33910:20: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:33927:16: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:14469:38: note: expanded from macro 'ArraySize'\nsqlite3-binding.c:33931:14: error: invalid application of 'sizeof' to an incomplete type 'struct unix_syscall []'\nsqlite3-binding.c:14469:38: note: expanded from macro 'ArraySize'\nsqlite3-binding.c:36584:11: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]\nsqlite3-binding.c:33727:49: note: expanded from macro 'osPread64'\nsqlite3-binding.c:36696:17: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]\nsqlite3-binding.c:33745:57: note: expanded from macro 'osPwrite64'\n```\n咦～好像不行\n\n### 0x011 第二次尝试\n既然 Mac 上交叉编译不能用 CGO ，那我们就在 Docker 里面编就可以了吧。\n```\n➜ docker run --rm -v \"$PWD\":/Users/wentx/momaek/src/bot -w /Users/wentx/momaek/src/bot -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e GOPROXY='https://goproxy.cn,direct' golang:1.14 go build -v\n.\n.\n.\n...\n➜ scp bot vps2:\n```\n\n然后在 vps 上执行：\n```\n> ./bot\n./bot: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by ./bot)\n```\n噢，还依赖 GLIBC_2.28 啊，咱装一个呗。\n基本步骤：\n```\nwget http://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz\ntar zxvf glibc-2.28.tar.gz\ncd glibc-2.28\nmkdir build\ncd build\n../configure --prefix=/opt/glibc-2.28\nmake -j4\nsudo make install\n```\n我们跟着一步一步走，到了\n```\n> ../configure --prefix=/opt/glibc-2.28\n.\n.\n...\nchecking version of gmake... 3.82, bad\nif gcc is sufficient to build libc... no\n\n*** These critical programs are missing or too old: make bison compiler\n```\n看来，make,bison 和 gcc 需要升级或者安装。\n我们先来看看版本\n```\n> make --version\nGNU Make 3.82\nBuilt for x86_64-redhat-linux-gnu\nCopyright (C) 2010  Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n> \n> gcc --version\ngcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n> bison --version\n-bash: bison: command not found (这货居然没有)\n```\n#### 安装 bsion\n```\n> wget https://ftp.gnu.org/gnu/bison/bison-3.2.tar.gz\n> tar xf bison-3.2.tar.gz\n> cd bison-3.2\n> ./configure --prefix=/usr\n> make\n> make install\n```\n一步步走就可以，中间可能需要 m4，直接 `yum install m4 -y` 就可以。\n\n#### 更新 make\n```\n> cd /tmp\n> wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz\n> tar xvf make-4.1.tar.gz\n> cd make-4.1/\n> ./configure\n> make\n> make install\n> export PATH=/tmp/make-4.1:$PATH\n> which gmake\n/usr/bin/gmake\n> rm /usr/bin/gmake\n> ln -s /tmp/make-4.1/make /usr/bin/gmake\n> make --version \nGNU Make 4.1\nBuilt for x86_64-unknown-linux-gnu\nCopyright (C) 1988-2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```\n\n#### 更新 gcc\n```\n> yum install centos-release-scl\n> yum install devtoolset-7-gcc*\n> scl enable devtoolset-7 bash\n> gcc --version\ngcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)\nCopyright (C) 2017 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n回到 GLIBC_2.28 的安装，继续 \n```\n> ../configure --prefix=/usr\n.\n.\n.\n> make -j4\n.\n.\n.（40分钟过去了）\n.\n.\n> make install\n.\n.\n```\n安装完成。\n\n最后执行：\n```\n> ./bot\n(/Users/wentx/momaek/src/bot/main.go:64)\n[2020-05-30 16:06:59]  [24.65ms]  CREATE TABLE \"images\" (\"id\" integer primary key autoincrement,\"key\" varchar(50),\"user\" varchar(50),\"created_at\" datetime,\"deleted_at\" datetime )\n[0 rows affected or returned ]\n```\nOK","slug":"在-Centos7-使用-SQLite3","published":1,"updated":"2020-05-30T08:40:41.573Z","comments":1,"layout":"post","link":"","_id":"ckatepn7l000eq0txdnc9v2k7","content":"<h3 id=\"0x001-背景\"><a href=\"#0x001-背景\" class=\"headerlink\" title=\"0x001 背景\"></a>0x001 背景</h3><p>打算在 Centos7 上跑 Golang 代码，Golang 里面用到 SQLite3 这个本地数据库，本来是想上 Mysql 的，但是想到 VPS 是 1核1G 就想直接用内嵌在应用里面的数据库，就想到了 SQLite3 ，直接一个 DB 文件就可以了，而且还可以直接用 Dropbox 同步，防止数据丢失，不是为一个好的选择。</p>\n<h3 id=\"0x010-第一次尝试\"><a href=\"#0x010-第一次尝试\" class=\"headerlink\" title=\"0x010 第一次尝试\"></a>0x010 第一次尝试</h3><p>这里呢，我们用 <code>github.com/jinzhu/gorm</code> 这个 ORM 库来读写数据库，它已经自带了 SQLite3 的数据库驱动，所以直接上一段简单的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"string\">\"github.com/jinzhu/gorm\"</span></span><br><span class=\"line\">\t _ <span class=\"string\">\"github.com/jinzhu/gorm/dialects/sqlite\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\"sqlite3.db\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err !=<span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdb.Automigrate(&amp;Image&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Image <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID <span class=\"keyword\">int</span> <span class=\"string\">`gorm:\"primary_key\"`</span></span><br><span class=\"line\">\tKey <span class=\"keyword\">string</span> <span class=\"string\">`gorm:\"size:50\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我本地是 Mac 环境，所以咱们直接交叉编译，然后把编译好的二进制文件扔到机器上执行就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ GOOS=linux GOARCH=amd64 go build -o bot main.go</span><br><span class=\"line\">➜ scp bot vps2:</span><br><span class=\"line\"></span><br><span class=\"line\">这里我提前在我的 .ssh/config 里面加好了配置:</span><br><span class=\"line\">Host vps2</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Hostname **.**.**.*</span><br><span class=\"line\">    Port ***</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后登录到机器上执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot </span><br><span class=\"line\">2020/05/30 15:20:01 /Users/wentx/momaek/src/bot/main.go:59: Binary was compiled with &apos;CGO_ENABLED=0&apos;, go-sqlite3 requires cgo to work. This is a stub</span><br></pre></td></tr></table></figure>\n\n<p>噢，原来需要 CGO_ENABLED=1，那咱重新在本地编一个就可以了呗。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ GOOS=linux GOARCH=amd64 go build -o bot main.go</span><br><span class=\"line\"># github.com/mattn/go-sqlite3</span><br><span class=\"line\">sqlite3-binding.c:33723:42: error: use of undeclared identifier &apos;pread64&apos;</span><br><span class=\"line\">sqlite3-binding.c:33741:42: error: use of undeclared identifier &apos;pwrite64&apos;</span><br><span class=\"line\">sqlite3-binding.c:33874:22: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33883:22: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33910:20: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33927:16: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:14469:38: note: expanded from macro &apos;ArraySize&apos;</span><br><span class=\"line\">sqlite3-binding.c:33931:14: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:14469:38: note: expanded from macro &apos;ArraySize&apos;</span><br><span class=\"line\">sqlite3-binding.c:36584:11: warning: type specifier missing, defaults to &apos;int&apos; [-Wimplicit-int]</span><br><span class=\"line\">sqlite3-binding.c:33727:49: note: expanded from macro &apos;osPread64&apos;</span><br><span class=\"line\">sqlite3-binding.c:36696:17: warning: type specifier missing, defaults to &apos;int&apos; [-Wimplicit-int]</span><br><span class=\"line\">sqlite3-binding.c:33745:57: note: expanded from macro &apos;osPwrite64&apos;</span><br></pre></td></tr></table></figure>\n\n<p>咦～好像不行</p>\n<h3 id=\"0x011-第二次尝试\"><a href=\"#0x011-第二次尝试\" class=\"headerlink\" title=\"0x011 第二次尝试\"></a>0x011 第二次尝试</h3><p>既然 Mac 上交叉编译不能用 CGO ，那我们就在 Docker 里面编就可以了吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker run --rm -v &quot;$PWD&quot;:/Users/wentx/momaek/src/bot -w /Users/wentx/momaek/src/bot -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e GOPROXY=&apos;https://goproxy.cn,direct&apos; golang:1.14 go build -v</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">➜ scp bot vps2:</span><br></pre></td></tr></table></figure>\n\n<p>然后在 vps 上执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot</span><br><span class=\"line\">./bot: /lib64/libc.so.6: version `GLIBC_2.28&apos; not found (required by ./bot)</span><br></pre></td></tr></table></figure>\n\n<p>噢，还依赖 GLIBC_2.28 啊，咱装一个呗。<br>基本步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz</span><br><span class=\"line\">tar zxvf glibc-2.28.tar.gz</span><br><span class=\"line\">cd glibc-2.28</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">../configure --prefix=/opt/glibc-2.28</span><br><span class=\"line\">make -j4</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>我们跟着一步一步走，到了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ../configure --prefix=/opt/glibc-2.28</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">checking version of gmake... 3.82, bad</span><br><span class=\"line\">if gcc is sufficient to build libc... no</span><br><span class=\"line\"></span><br><span class=\"line\">*** These critical programs are missing or too old: make bison compiler</span><br></pre></td></tr></table></figure>\n\n<p>看来，make,bison 和 gcc 需要升级或者安装。<br>我们先来看看版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; make --version</span><br><span class=\"line\">GNU Make 3.82</span><br><span class=\"line\">Built for x86_64-redhat-linux-gnu</span><br><span class=\"line\">Copyright (C) 2010  Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; gcc --version</span><br><span class=\"line\">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class=\"line\">&gt; bison --version</span><br><span class=\"line\">-bash: bison: command not found (这货居然没有)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-bsion\"><a href=\"#安装-bsion\" class=\"headerlink\" title=\"安装 bsion\"></a>安装 bsion</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://ftp.gnu.org/gnu/bison/bison-3.2.tar.gz</span><br><span class=\"line\">&gt; tar xf bison-3.2.tar.gz</span><br><span class=\"line\">&gt; cd bison-3.2</span><br><span class=\"line\">&gt; ./configure --prefix=/usr</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; make install</span><br></pre></td></tr></table></figure>\n\n<p>一步步走就可以，中间可能需要 m4，直接 <code>yum install m4 -y</code> 就可以。</p>\n<h4 id=\"更新-make\"><a href=\"#更新-make\" class=\"headerlink\" title=\"更新 make\"></a>更新 make</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /tmp</span><br><span class=\"line\">&gt; wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz</span><br><span class=\"line\">&gt; tar xvf make-4.1.tar.gz</span><br><span class=\"line\">&gt; cd make-4.1/</span><br><span class=\"line\">&gt; ./configure</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; make install</span><br><span class=\"line\">&gt; export PATH=/tmp/make-4.1:$PATH</span><br><span class=\"line\">&gt; which gmake</span><br><span class=\"line\">/usr/bin/gmake</span><br><span class=\"line\">&gt; rm /usr/bin/gmake</span><br><span class=\"line\">&gt; ln -s /tmp/make-4.1/make /usr/bin/gmake</span><br><span class=\"line\">&gt; make --version </span><br><span class=\"line\">GNU Make 4.1</span><br><span class=\"line\">Built for x86_64-unknown-linux-gnu</span><br><span class=\"line\">Copyright (C) 1988-2014 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-gcc\"><a href=\"#更新-gcc\" class=\"headerlink\" title=\"更新 gcc\"></a>更新 gcc</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install centos-release-scl</span><br><span class=\"line\">&gt; yum install devtoolset-7-gcc*</span><br><span class=\"line\">&gt; scl enable devtoolset-7 bash</span><br><span class=\"line\">&gt; gcc --version</span><br><span class=\"line\">gcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)</span><br><span class=\"line\">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>回到 GLIBC_2.28 的安装，继续 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ../configure --prefix=/usr</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&gt; make -j4</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.（40分钟过去了）</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&gt; make install</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<p>安装完成。</p>\n<p>最后执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot</span><br><span class=\"line\">(/Users/wentx/momaek/src/bot/main.go:64)</span><br><span class=\"line\">[2020-05-30 16:06:59]  [24.65ms]  CREATE TABLE &quot;images&quot; (&quot;id&quot; integer primary key autoincrement,&quot;key&quot; varchar(50),&quot;user&quot; varchar(50),&quot;created_at&quot; datetime,&quot;deleted_at&quot; datetime )</span><br><span class=\"line\">[0 rows affected or returned ]</span><br></pre></td></tr></table></figure>\n\n<p>OK</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"0x001-背景\"><a href=\"#0x001-背景\" class=\"headerlink\" title=\"0x001 背景\"></a>0x001 背景</h3><p>打算在 Centos7 上跑 Golang 代码，Golang 里面用到 SQLite3 这个本地数据库，本来是想上 Mysql 的，但是想到 VPS 是 1核1G 就想直接用内嵌在应用里面的数据库，就想到了 SQLite3 ，直接一个 DB 文件就可以了，而且还可以直接用 Dropbox 同步，防止数据丢失，不是为一个好的选择。</p>\n<h3 id=\"0x010-第一次尝试\"><a href=\"#0x010-第一次尝试\" class=\"headerlink\" title=\"0x010 第一次尝试\"></a>0x010 第一次尝试</h3><p>这里呢，我们用 <code>github.com/jinzhu/gorm</code> 这个 ORM 库来读写数据库，它已经自带了 SQLite3 的数据库驱动，所以直接上一段简单的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"string\">\"github.com/jinzhu/gorm\"</span></span><br><span class=\"line\">\t _ <span class=\"string\">\"github.com/jinzhu/gorm/dialects/sqlite\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdb, err := gorm.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\"sqlite3.db\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err !=<span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdb.Automigrate(&amp;Image&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Image <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID <span class=\"keyword\">int</span> <span class=\"string\">`gorm:\"primary_key\"`</span></span><br><span class=\"line\">\tKey <span class=\"keyword\">string</span> <span class=\"string\">`gorm:\"size:50\"`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于我本地是 Mac 环境，所以咱们直接交叉编译，然后把编译好的二进制文件扔到机器上执行就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ GOOS=linux GOARCH=amd64 go build -o bot main.go</span><br><span class=\"line\">➜ scp bot vps2:</span><br><span class=\"line\"></span><br><span class=\"line\">这里我提前在我的 .ssh/config 里面加好了配置:</span><br><span class=\"line\">Host vps2</span><br><span class=\"line\">    User root</span><br><span class=\"line\">    Hostname **.**.**.*</span><br><span class=\"line\">    Port ***</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后登录到机器上执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot </span><br><span class=\"line\">2020/05/30 15:20:01 /Users/wentx/momaek/src/bot/main.go:59: Binary was compiled with &apos;CGO_ENABLED=0&apos;, go-sqlite3 requires cgo to work. This is a stub</span><br></pre></td></tr></table></figure>\n\n<p>噢，原来需要 CGO_ENABLED=1，那咱重新在本地编一个就可以了呗。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ GOOS=linux GOARCH=amd64 go build -o bot main.go</span><br><span class=\"line\"># github.com/mattn/go-sqlite3</span><br><span class=\"line\">sqlite3-binding.c:33723:42: error: use of undeclared identifier &apos;pread64&apos;</span><br><span class=\"line\">sqlite3-binding.c:33741:42: error: use of undeclared identifier &apos;pwrite64&apos;</span><br><span class=\"line\">sqlite3-binding.c:33874:22: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33883:22: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33910:20: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:33927:16: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:14469:38: note: expanded from macro &apos;ArraySize&apos;</span><br><span class=\"line\">sqlite3-binding.c:33931:14: error: invalid application of &apos;sizeof&apos; to an incomplete type &apos;struct unix_syscall []&apos;</span><br><span class=\"line\">sqlite3-binding.c:14469:38: note: expanded from macro &apos;ArraySize&apos;</span><br><span class=\"line\">sqlite3-binding.c:36584:11: warning: type specifier missing, defaults to &apos;int&apos; [-Wimplicit-int]</span><br><span class=\"line\">sqlite3-binding.c:33727:49: note: expanded from macro &apos;osPread64&apos;</span><br><span class=\"line\">sqlite3-binding.c:36696:17: warning: type specifier missing, defaults to &apos;int&apos; [-Wimplicit-int]</span><br><span class=\"line\">sqlite3-binding.c:33745:57: note: expanded from macro &apos;osPwrite64&apos;</span><br></pre></td></tr></table></figure>\n\n<p>咦～好像不行</p>\n<h3 id=\"0x011-第二次尝试\"><a href=\"#0x011-第二次尝试\" class=\"headerlink\" title=\"0x011 第二次尝试\"></a>0x011 第二次尝试</h3><p>既然 Mac 上交叉编译不能用 CGO ，那我们就在 Docker 里面编就可以了吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ docker run --rm -v &quot;$PWD&quot;:/Users/wentx/momaek/src/bot -w /Users/wentx/momaek/src/bot -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e GOPROXY=&apos;https://goproxy.cn,direct&apos; golang:1.14 go build -v</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">➜ scp bot vps2:</span><br></pre></td></tr></table></figure>\n\n<p>然后在 vps 上执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot</span><br><span class=\"line\">./bot: /lib64/libc.so.6: version `GLIBC_2.28&apos; not found (required by ./bot)</span><br></pre></td></tr></table></figure>\n\n<p>噢，还依赖 GLIBC_2.28 啊，咱装一个呗。<br>基本步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz</span><br><span class=\"line\">tar zxvf glibc-2.28.tar.gz</span><br><span class=\"line\">cd glibc-2.28</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">../configure --prefix=/opt/glibc-2.28</span><br><span class=\"line\">make -j4</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>我们跟着一步一步走，到了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ../configure --prefix=/opt/glibc-2.28</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">checking version of gmake... 3.82, bad</span><br><span class=\"line\">if gcc is sufficient to build libc... no</span><br><span class=\"line\"></span><br><span class=\"line\">*** These critical programs are missing or too old: make bison compiler</span><br></pre></td></tr></table></figure>\n\n<p>看来，make,bison 和 gcc 需要升级或者安装。<br>我们先来看看版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; make --version</span><br><span class=\"line\">GNU Make 3.82</span><br><span class=\"line\">Built for x86_64-redhat-linux-gnu</span><br><span class=\"line\">Copyright (C) 2010  Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; gcc --version</span><br><span class=\"line\">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class=\"line\">&gt; bison --version</span><br><span class=\"line\">-bash: bison: command not found (这货居然没有)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-bsion\"><a href=\"#安装-bsion\" class=\"headerlink\" title=\"安装 bsion\"></a>安装 bsion</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; wget https://ftp.gnu.org/gnu/bison/bison-3.2.tar.gz</span><br><span class=\"line\">&gt; tar xf bison-3.2.tar.gz</span><br><span class=\"line\">&gt; cd bison-3.2</span><br><span class=\"line\">&gt; ./configure --prefix=/usr</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; make install</span><br></pre></td></tr></table></figure>\n\n<p>一步步走就可以，中间可能需要 m4，直接 <code>yum install m4 -y</code> 就可以。</p>\n<h4 id=\"更新-make\"><a href=\"#更新-make\" class=\"headerlink\" title=\"更新 make\"></a>更新 make</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cd /tmp</span><br><span class=\"line\">&gt; wget http://ftp.gnu.org/gnu/make/make-4.1.tar.gz</span><br><span class=\"line\">&gt; tar xvf make-4.1.tar.gz</span><br><span class=\"line\">&gt; cd make-4.1/</span><br><span class=\"line\">&gt; ./configure</span><br><span class=\"line\">&gt; make</span><br><span class=\"line\">&gt; make install</span><br><span class=\"line\">&gt; export PATH=/tmp/make-4.1:$PATH</span><br><span class=\"line\">&gt; which gmake</span><br><span class=\"line\">/usr/bin/gmake</span><br><span class=\"line\">&gt; rm /usr/bin/gmake</span><br><span class=\"line\">&gt; ln -s /tmp/make-4.1/make /usr/bin/gmake</span><br><span class=\"line\">&gt; make --version </span><br><span class=\"line\">GNU Make 4.1</span><br><span class=\"line\">Built for x86_64-unknown-linux-gnu</span><br><span class=\"line\">Copyright (C) 1988-2014 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新-gcc\"><a href=\"#更新-gcc\" class=\"headerlink\" title=\"更新 gcc\"></a>更新 gcc</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; yum install centos-release-scl</span><br><span class=\"line\">&gt; yum install devtoolset-7-gcc*</span><br><span class=\"line\">&gt; scl enable devtoolset-7 bash</span><br><span class=\"line\">&gt; gcc --version</span><br><span class=\"line\">gcc (GCC) 7.3.1 20180303 (Red Hat 7.3.1-5)</span><br><span class=\"line\">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>回到 GLIBC_2.28 的安装，继续 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ../configure --prefix=/usr</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&gt; make -j4</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.（40分钟过去了）</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&gt; make install</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<p>安装完成。</p>\n<p>最后执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ./bot</span><br><span class=\"line\">(/Users/wentx/momaek/src/bot/main.go:64)</span><br><span class=\"line\">[2020-05-30 16:06:59]  [24.65ms]  CREATE TABLE &quot;images&quot; (&quot;id&quot; integer primary key autoincrement,&quot;key&quot; varchar(50),&quot;user&quot; varchar(50),&quot;created_at&quot; datetime,&quot;deleted_at&quot; datetime )</span><br><span class=\"line\">[0 rows affected or returned ]</span><br></pre></td></tr></table></figure>\n\n<p>OK</p>\n"},{"title":"从开发到部署上线一个 Golang 项目","date":"2019-03-30T09:12:42.000Z","photos":["https://oa7ktymto.qnssl.com/1_30aoNxlSnaYrLhBT0O1lzw.png"],"_content":"详细介绍如何从开发到部署一个 Golang 项目\n<!-- more -->\n\n## 0x001\n通过讲述用 Golang 来实现 PPT、Word、PDF 等转换成图片的一个在线网站来简单介绍开发到部署。","source":"_posts/从开发到部署上线一个-Golang-项目.md","raw":"---\ntitle: 从开发到部署上线一个 Golang 项目\ndate: 2019-03-30 17:12:42\ntags:\n    - Golang\nphotos:\n    - https://oa7ktymto.qnssl.com/1_30aoNxlSnaYrLhBT0O1lzw.png\n---\n详细介绍如何从开发到部署一个 Golang 项目\n<!-- more -->\n\n## 0x001\n通过讲述用 Golang 来实现 PPT、Word、PDF 等转换成图片的一个在线网站来简单介绍开发到部署。","slug":"从开发到部署上线一个-Golang-项目","published":1,"updated":"2019-03-27T11:56:29.823Z","comments":1,"layout":"post","link":"","_id":"ckatepn7n000fq0txclkbxycp","content":"<p>详细介绍如何从开发到部署一个 Golang 项目</p>\n<a id=\"more\"></a>\n\n<h2 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h2><p>通过讲述用 Golang 来实现 PPT、Word、PDF 等转换成图片的一个在线网站来简单介绍开发到部署。</p>\n","site":{"data":{}},"excerpt":"<p>详细介绍如何从开发到部署一个 Golang 项目</p>","more":"<h2 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h2><p>通过讲述用 Golang 来实现 PPT、Word、PDF 等转换成图片的一个在线网站来简单介绍开发到部署。</p>"},{"title":"如何用GitHub Actions编译Golang项目","date":"2019-03-08T03:29:48.000Z","photos":["https://github.githubassets.com/images/modules/site/social-cards/actions.png"],"_content":"\n[Github Actions](https://github.com/features/actions) 是 Github 在 2018 年年末的时候推出的新平台，旨在成为通用的工作流程自动化工具。事实上，Github 是一家致力于改进开发者协作工具的公司，这一举措让它扩展到了 CI/CD 领域，em~~ interesting….\n\n<!-- more -->\n\n### 0x00 Overview\n\n在我们探究 Actions 和 Workflow 之前，让我们先来看下这个东西存在的意义是什么。要为一个 repo 做任何的一些自动化操作，例如跑测试或者编译(包，二进制文件等)，你需要依赖一个外部的服务或者自己通过 Github webhooks 来做这些事情。现在有了 Github Actions 后，你可以不需要借助第三方工具来处理这些事情了。 Github Actions 是通过 Docker 来做这些事情的，也就是说你可以用公共的 Docker 镜像。\n\n再多说一句，目前(2019.03.08) Github Actions 是需要排队申请公测的，所以有需要的童鞋去排队吧。\n\n\n\n### 0x01 Workflow Setup\n\n首先我们先来看一下，我这边项目的结构：\n\n```\n├── LICENSE\n├── README.md\n├── env.sh\n├── src\n│   └── app\n│       └── main.go\n└── workflow\n    ├── build\n    │   ├── Dockerfile\n    │   └── entrypoint.sh\n    └── deploy\n        ├── Dockerfile\n        └── entrypoint.sh\n```\n\n这应该是一个比较典型的项目结构，项目里面自带一个 `GOPATH`。\n\n我们心间一个目录：`.github`，然后在新目录里面建一个文件 `main.workflow`。`main.workflow` 的内容如下：\n\n```\nworkflow \"Build Project\" {\n  on = \"push\" // 当你把你本地的代码 push 到 GitHub 的时候，就会触发这个工作流\n  resolves = [\"build\"]  // 需要执行的 actions 放在 resolves 里面，如果有多个，可以用 ',' 分割。 当有多个的时候，它们是并行执行的\n}\n\naction \"build\" {\n  uses = \"./actions/build\"\n  args = \"linux/amd64 darwin/amd64\"\n}\n```\n\n可以看到这个里面有 3 大块的内容，我们来简单讲解一下。\n\n- workflow 一个 `workflow` 文件可以包含多个 `workflow` 模块，每个模块都有一个唯一的名称和两个属性`on` 和 `resolves`，属性的具体作用可以看 [官方文档](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#workflow-attributes)\n- action 一个 `workflow` 文件可以包含至多100个 `action` 模块，每个模块都有一个唯一的名称，模块里面的 `uses` 属性是必须的，属性的具体作用可以看 [官方文档](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#actions-attributes)\n\n\n\n### 0x10 Action Script\n\n我们可以看到 `action` 模块里面有一个 `uses` 的必选项，这个就是用来指定你的 Docker 容器的。支持的方式有很多种，具体可以参考[这里](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#using-a-dockerfile-image-in-an-action)，我们这里用的是 `./path/to/dir` 的这种方式，因为 `workflow` 和代码在相同的 repo 里面。\n\n接下来来看看，我们 `./workflow/build/Dockerfile` 的内容：\n\n```\nFROM golang:1.11\n\nRUN \\\n  apt-get update && \\\n  apt-get install -y ca-certificates openssl zip && \\\n  update-ca-certificates && \\\n  rm -rf /var/lib/apt\n\nCOPY entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"] // 在 workflow 文件的 action 模块里面，如果没有 runs 属性，那么就会用这个 ENTRIYPOINT，如果有那就使用 runs.\n```\n\n最后我们来看看 `./workflow/build/entrypoint.sh` 的内容：\n\n```\n#!/bin/bash\n\nset -e\n\nif [[ -z \"$GITHUB_WORKSPACE\" ]]; then\n  echo \"Set the GITHUB_WORKSPACE env variable.\"\n  exit 1\nfi\n\nif [[ -z \"$GITHUB_REPOSITORY\" ]]; then\n  echo \"Set the GITHUB_REPOSITORY env variable.\"\n  exit 1\nfi\n\n# GITHUB_WORKSPACE 和 GITHUB_REPOSITORY 是 workflow 内置的环境变量\nroot_path=\"$GITHUB_WORKSPACE\"\nrelease_path=\"$GITHUB_WORKSPACE/.release\"\nrepo_name=\"$(echo $GITHUB_REPOSITORY | cut -d '/' -f2)\"\ntargets=${@-\"linux/amd64 linux/386 windows/amd64 windows/386\"}\n\necho \"----> Setting up Go repository\"\nmkdir -p $release_path\n\ncd $root_path/Server\nsource env.sh\ncd src/app\n\nfor target in $targets; do\n  os=\"$(echo $target | cut -d '/' -f1)\"\n  arch=\"$(echo $target | cut -d '/' -f2)\"\n  output=\"${release_path}/${repo_name}_${os}_${arch}\"\n\n  echo \"----> Building project for: $target\"\n  GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -o $output\n  zip -j $output.zip $output > /dev/null\ndone\n\necho \"----> Build is complete. List of files at $release_path:\"\ncd $release_path\nls -al\n```\n\n这里需要注意的一点是你需要 `chmod +x entrypoint.sh` 给 `entrypoint.sh` 这个文件执行权限，否则 workflow 在运行的时候会报错。\n\n这样，当你在 `push` 到 GitHub 的时候，就会触发 workflow。运行的日志大致如下：\n\n```\n### STARTED build 09:48:13Z\n\nPulling image: gcr.io/github-actions-images/action-runner:latest\nlatest: Pulling from github-actions-images/action-runner\n169185f82c45: Pulling fs layer\n0ccde4b6b241: Pulling fs layer\nd0372f57daa2: Pulling fs layer\n165911d108d6: Pulling fs layer\n54996bce1de5: Pulling fs layer\n165911d108d6: Waiting\n54996bce1de5: Waiting\n0ccde4b6b241: Verifying Checksum\n0ccde4b6b241: Download complete\nd0372f57daa2: Verifying Checksum\nd0372f57daa2: Download complete\n169185f82c45: Verifying Checksum\n169185f82c45: Download complete\n54996bce1de5: Verifying Checksum\n54996bce1de5: Download complete\n165911d108d6: Verifying Checksum\n165911d108d6: Download complete\n169185f82c45: Pull complete\n0ccde4b6b241: Pull complete\nd0372f57daa2: Pull complete\n165911d108d6: Pull complete\n54996bce1de5: Pull complete\nDigest: sha256:c9bb432ec5ec08ee08b040a9fccacebbbf8a91444dac4721600cf5dca9dae57e\nStatus: Downloaded newer image for gcr.io/github-actions-images/action-runner:latest\nfc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9: Pulling from gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4\n22dbe790f715: Already exists\n0250231711a0: Already exists\n6fba9447437b: Already exists\nc2b4d327b352: Already exists\n619f4932b7ea: Already exists\ne2fd6cbd3c6f: Pulling fs layer\n1d96446d2b20: Pulling fs layer\n6c3860f2355d: Pulling fs layer\nb9beb9e9e7b4: Pulling fs layer\nb9beb9e9e7b4: Waiting\n1d96446d2b20: Verifying Checksum\n1d96446d2b20: Download complete\n6c3860f2355d: Verifying Checksum\n6c3860f2355d: Download complete\nb9beb9e9e7b4: Verifying Checksum\nb9beb9e9e7b4: Download complete\ne2fd6cbd3c6f: Verifying Checksum\ne2fd6cbd3c6f: Download complete\ne2fd6cbd3c6f: Pull complete\n1d96446d2b20: Pull complete\n6c3860f2355d: Pull complete\nb9beb9e9e7b4: Pull complete\nDigest: sha256:f4f24205b3442b3dae915837f7f8823e6801382edfff9d581f4142723221ca2b\nStatus: Downloaded newer image for gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9\nStep 1/4 : FROM golang:1.11\n1.11: Pulling from library/golang\n22dbe790f715: Already exists\n0250231711a0: Already exists\n6fba9447437b: Already exists\nc2b4d327b352: Already exists\n619f4932b7ea: Already exists\ne2fd6cbd3c6f: Already exists\n1d96446d2b20: Already exists\nDigest: sha256:1a0252130e79773cbda16c451b125cbf18d59fe3e682d344676a5103bfcaedcc\nStatus: Downloaded newer image for golang:1.11\n ---> 1454e2b3d01f\nStep 2/4 : RUN   apt-get update &&   apt-get install -y ca-certificates openssl zip &&   update-ca-certificates &&   rm -rf /var/lib/apt\n ---> Using cache\n ---> 56bef95c0fd8\nStep 3/4 : COPY entrypoint.sh /entrypoint.sh\n ---> Using cache\n ---> b9053ad11b60\nStep 4/4 : ENTRYPOINT [\"/entrypoint.sh\"]\n ---> Using cache\n ---> 8e7345aa7948\nSuccessfully built 8e7345aa7948\nSuccessfully tagged gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9\nAlready have image (with digest): gcr.io/github-actions-images/action-runner:latest\n----> Setting up Go repository\n----> Building project for: linux/amd64\n----> Building project for: darwin/amd64\n----> Build is complete. List of files at /github/workspace/.release:\ntotal 62360\ndrwxr-xr-x  2 root root     4096 Mar  8 09:50 .\ndrwxr-xr-x 12 root root     4096 Mar  8 09:48 ..\n-rwxr-xr-x  1 root root 22096424 Mar  8 09:50 app_darwin_amd64\n-rw-r--r--  1 root root  9822499 Mar  8 09:50 app_darwin_amd64.zip\n-rwxr-xr-x  1 root root 22118946 Mar  8 09:49 app_linux_amd64\n-rw-r--r--  1 root root  9801034 Mar  8 09:49 app_linux_amd64.zip\n\n### SUCCEEDED build 09:50:06Z (1m52.781s)\n```\n\n### 0x11 Deploy \n\n编译好的文件存在了 `$GITHUB_WORKSPACE/.release` 这个地方，所以只需要在创建一个 `deploy ` 的 action 就可以拿到编译好的文件去部署了。\n\n![](https://oa7ktymto.qnssl.com/workflow.png)\n\n\n\n最后，项目的地址 [https://github.com/momaek/mdxz](https://github.com/momaek/mdxz)","source":"_posts/如何用GitHub-Actions编译Golang项目.md","raw":"---\ntitle: 如何用GitHub Actions编译Golang项目\ndate: 2019-03-08 11:29:48\ntags: \n    - Golang\n    - Github Actions\nphotos:\n    - https://github.githubassets.com/images/modules/site/social-cards/actions.png\n---\n\n[Github Actions](https://github.com/features/actions) 是 Github 在 2018 年年末的时候推出的新平台，旨在成为通用的工作流程自动化工具。事实上，Github 是一家致力于改进开发者协作工具的公司，这一举措让它扩展到了 CI/CD 领域，em~~ interesting….\n\n<!-- more -->\n\n### 0x00 Overview\n\n在我们探究 Actions 和 Workflow 之前，让我们先来看下这个东西存在的意义是什么。要为一个 repo 做任何的一些自动化操作，例如跑测试或者编译(包，二进制文件等)，你需要依赖一个外部的服务或者自己通过 Github webhooks 来做这些事情。现在有了 Github Actions 后，你可以不需要借助第三方工具来处理这些事情了。 Github Actions 是通过 Docker 来做这些事情的，也就是说你可以用公共的 Docker 镜像。\n\n再多说一句，目前(2019.03.08) Github Actions 是需要排队申请公测的，所以有需要的童鞋去排队吧。\n\n\n\n### 0x01 Workflow Setup\n\n首先我们先来看一下，我这边项目的结构：\n\n```\n├── LICENSE\n├── README.md\n├── env.sh\n├── src\n│   └── app\n│       └── main.go\n└── workflow\n    ├── build\n    │   ├── Dockerfile\n    │   └── entrypoint.sh\n    └── deploy\n        ├── Dockerfile\n        └── entrypoint.sh\n```\n\n这应该是一个比较典型的项目结构，项目里面自带一个 `GOPATH`。\n\n我们心间一个目录：`.github`，然后在新目录里面建一个文件 `main.workflow`。`main.workflow` 的内容如下：\n\n```\nworkflow \"Build Project\" {\n  on = \"push\" // 当你把你本地的代码 push 到 GitHub 的时候，就会触发这个工作流\n  resolves = [\"build\"]  // 需要执行的 actions 放在 resolves 里面，如果有多个，可以用 ',' 分割。 当有多个的时候，它们是并行执行的\n}\n\naction \"build\" {\n  uses = \"./actions/build\"\n  args = \"linux/amd64 darwin/amd64\"\n}\n```\n\n可以看到这个里面有 3 大块的内容，我们来简单讲解一下。\n\n- workflow 一个 `workflow` 文件可以包含多个 `workflow` 模块，每个模块都有一个唯一的名称和两个属性`on` 和 `resolves`，属性的具体作用可以看 [官方文档](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#workflow-attributes)\n- action 一个 `workflow` 文件可以包含至多100个 `action` 模块，每个模块都有一个唯一的名称，模块里面的 `uses` 属性是必须的，属性的具体作用可以看 [官方文档](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#actions-attributes)\n\n\n\n### 0x10 Action Script\n\n我们可以看到 `action` 模块里面有一个 `uses` 的必选项，这个就是用来指定你的 Docker 容器的。支持的方式有很多种，具体可以参考[这里](https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#using-a-dockerfile-image-in-an-action)，我们这里用的是 `./path/to/dir` 的这种方式，因为 `workflow` 和代码在相同的 repo 里面。\n\n接下来来看看，我们 `./workflow/build/Dockerfile` 的内容：\n\n```\nFROM golang:1.11\n\nRUN \\\n  apt-get update && \\\n  apt-get install -y ca-certificates openssl zip && \\\n  update-ca-certificates && \\\n  rm -rf /var/lib/apt\n\nCOPY entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"] // 在 workflow 文件的 action 模块里面，如果没有 runs 属性，那么就会用这个 ENTRIYPOINT，如果有那就使用 runs.\n```\n\n最后我们来看看 `./workflow/build/entrypoint.sh` 的内容：\n\n```\n#!/bin/bash\n\nset -e\n\nif [[ -z \"$GITHUB_WORKSPACE\" ]]; then\n  echo \"Set the GITHUB_WORKSPACE env variable.\"\n  exit 1\nfi\n\nif [[ -z \"$GITHUB_REPOSITORY\" ]]; then\n  echo \"Set the GITHUB_REPOSITORY env variable.\"\n  exit 1\nfi\n\n# GITHUB_WORKSPACE 和 GITHUB_REPOSITORY 是 workflow 内置的环境变量\nroot_path=\"$GITHUB_WORKSPACE\"\nrelease_path=\"$GITHUB_WORKSPACE/.release\"\nrepo_name=\"$(echo $GITHUB_REPOSITORY | cut -d '/' -f2)\"\ntargets=${@-\"linux/amd64 linux/386 windows/amd64 windows/386\"}\n\necho \"----> Setting up Go repository\"\nmkdir -p $release_path\n\ncd $root_path/Server\nsource env.sh\ncd src/app\n\nfor target in $targets; do\n  os=\"$(echo $target | cut -d '/' -f1)\"\n  arch=\"$(echo $target | cut -d '/' -f2)\"\n  output=\"${release_path}/${repo_name}_${os}_${arch}\"\n\n  echo \"----> Building project for: $target\"\n  GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -o $output\n  zip -j $output.zip $output > /dev/null\ndone\n\necho \"----> Build is complete. List of files at $release_path:\"\ncd $release_path\nls -al\n```\n\n这里需要注意的一点是你需要 `chmod +x entrypoint.sh` 给 `entrypoint.sh` 这个文件执行权限，否则 workflow 在运行的时候会报错。\n\n这样，当你在 `push` 到 GitHub 的时候，就会触发 workflow。运行的日志大致如下：\n\n```\n### STARTED build 09:48:13Z\n\nPulling image: gcr.io/github-actions-images/action-runner:latest\nlatest: Pulling from github-actions-images/action-runner\n169185f82c45: Pulling fs layer\n0ccde4b6b241: Pulling fs layer\nd0372f57daa2: Pulling fs layer\n165911d108d6: Pulling fs layer\n54996bce1de5: Pulling fs layer\n165911d108d6: Waiting\n54996bce1de5: Waiting\n0ccde4b6b241: Verifying Checksum\n0ccde4b6b241: Download complete\nd0372f57daa2: Verifying Checksum\nd0372f57daa2: Download complete\n169185f82c45: Verifying Checksum\n169185f82c45: Download complete\n54996bce1de5: Verifying Checksum\n54996bce1de5: Download complete\n165911d108d6: Verifying Checksum\n165911d108d6: Download complete\n169185f82c45: Pull complete\n0ccde4b6b241: Pull complete\nd0372f57daa2: Pull complete\n165911d108d6: Pull complete\n54996bce1de5: Pull complete\nDigest: sha256:c9bb432ec5ec08ee08b040a9fccacebbbf8a91444dac4721600cf5dca9dae57e\nStatus: Downloaded newer image for gcr.io/github-actions-images/action-runner:latest\nfc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9: Pulling from gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4\n22dbe790f715: Already exists\n0250231711a0: Already exists\n6fba9447437b: Already exists\nc2b4d327b352: Already exists\n619f4932b7ea: Already exists\ne2fd6cbd3c6f: Pulling fs layer\n1d96446d2b20: Pulling fs layer\n6c3860f2355d: Pulling fs layer\nb9beb9e9e7b4: Pulling fs layer\nb9beb9e9e7b4: Waiting\n1d96446d2b20: Verifying Checksum\n1d96446d2b20: Download complete\n6c3860f2355d: Verifying Checksum\n6c3860f2355d: Download complete\nb9beb9e9e7b4: Verifying Checksum\nb9beb9e9e7b4: Download complete\ne2fd6cbd3c6f: Verifying Checksum\ne2fd6cbd3c6f: Download complete\ne2fd6cbd3c6f: Pull complete\n1d96446d2b20: Pull complete\n6c3860f2355d: Pull complete\nb9beb9e9e7b4: Pull complete\nDigest: sha256:f4f24205b3442b3dae915837f7f8823e6801382edfff9d581f4142723221ca2b\nStatus: Downloaded newer image for gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9\nStep 1/4 : FROM golang:1.11\n1.11: Pulling from library/golang\n22dbe790f715: Already exists\n0250231711a0: Already exists\n6fba9447437b: Already exists\nc2b4d327b352: Already exists\n619f4932b7ea: Already exists\ne2fd6cbd3c6f: Already exists\n1d96446d2b20: Already exists\nDigest: sha256:1a0252130e79773cbda16c451b125cbf18d59fe3e682d344676a5103bfcaedcc\nStatus: Downloaded newer image for golang:1.11\n ---> 1454e2b3d01f\nStep 2/4 : RUN   apt-get update &&   apt-get install -y ca-certificates openssl zip &&   update-ca-certificates &&   rm -rf /var/lib/apt\n ---> Using cache\n ---> 56bef95c0fd8\nStep 3/4 : COPY entrypoint.sh /entrypoint.sh\n ---> Using cache\n ---> b9053ad11b60\nStep 4/4 : ENTRYPOINT [\"/entrypoint.sh\"]\n ---> Using cache\n ---> 8e7345aa7948\nSuccessfully built 8e7345aa7948\nSuccessfully tagged gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9\nAlready have image (with digest): gcr.io/github-actions-images/action-runner:latest\n----> Setting up Go repository\n----> Building project for: linux/amd64\n----> Building project for: darwin/amd64\n----> Build is complete. List of files at /github/workspace/.release:\ntotal 62360\ndrwxr-xr-x  2 root root     4096 Mar  8 09:50 .\ndrwxr-xr-x 12 root root     4096 Mar  8 09:48 ..\n-rwxr-xr-x  1 root root 22096424 Mar  8 09:50 app_darwin_amd64\n-rw-r--r--  1 root root  9822499 Mar  8 09:50 app_darwin_amd64.zip\n-rwxr-xr-x  1 root root 22118946 Mar  8 09:49 app_linux_amd64\n-rw-r--r--  1 root root  9801034 Mar  8 09:49 app_linux_amd64.zip\n\n### SUCCEEDED build 09:50:06Z (1m52.781s)\n```\n\n### 0x11 Deploy \n\n编译好的文件存在了 `$GITHUB_WORKSPACE/.release` 这个地方，所以只需要在创建一个 `deploy ` 的 action 就可以拿到编译好的文件去部署了。\n\n![](https://oa7ktymto.qnssl.com/workflow.png)\n\n\n\n最后，项目的地址 [https://github.com/momaek/mdxz](https://github.com/momaek/mdxz)","slug":"如何用GitHub-Actions编译Golang项目","published":1,"updated":"2019-03-09T06:32:16.603Z","comments":1,"layout":"post","link":"","_id":"ckatepn7o000gq0txu9lwwbe6","content":"<p><a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noopener\">Github Actions</a> 是 Github 在 2018 年年末的时候推出的新平台，旨在成为通用的工作流程自动化工具。事实上，Github 是一家致力于改进开发者协作工具的公司，这一举措让它扩展到了 CI/CD 领域，em~~ interesting….</p>\n<a id=\"more\"></a>\n\n<h3 id=\"0x00-Overview\"><a href=\"#0x00-Overview\" class=\"headerlink\" title=\"0x00 Overview\"></a>0x00 Overview</h3><p>在我们探究 Actions 和 Workflow 之前，让我们先来看下这个东西存在的意义是什么。要为一个 repo 做任何的一些自动化操作，例如跑测试或者编译(包，二进制文件等)，你需要依赖一个外部的服务或者自己通过 Github webhooks 来做这些事情。现在有了 Github Actions 后，你可以不需要借助第三方工具来处理这些事情了。 Github Actions 是通过 Docker 来做这些事情的，也就是说你可以用公共的 Docker 镜像。</p>\n<p>再多说一句，目前(2019.03.08) Github Actions 是需要排队申请公测的，所以有需要的童鞋去排队吧。</p>\n<h3 id=\"0x01-Workflow-Setup\"><a href=\"#0x01-Workflow-Setup\" class=\"headerlink\" title=\"0x01 Workflow Setup\"></a>0x01 Workflow Setup</h3><p>首先我们先来看一下，我这边项目的结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── env.sh</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   └── app</span><br><span class=\"line\">│       └── main.go</span><br><span class=\"line\">└── workflow</span><br><span class=\"line\">    ├── build</span><br><span class=\"line\">    │   ├── Dockerfile</span><br><span class=\"line\">    │   └── entrypoint.sh</span><br><span class=\"line\">    └── deploy</span><br><span class=\"line\">        ├── Dockerfile</span><br><span class=\"line\">        └── entrypoint.sh</span><br></pre></td></tr></table></figure>\n\n<p>这应该是一个比较典型的项目结构，项目里面自带一个 <code>GOPATH</code>。</p>\n<p>我们心间一个目录：<code>.github</code>，然后在新目录里面建一个文件 <code>main.workflow</code>。<code>main.workflow</code> 的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workflow &quot;Build Project&quot; &#123;</span><br><span class=\"line\">  on = &quot;push&quot; // 当你把你本地的代码 push 到 GitHub 的时候，就会触发这个工作流</span><br><span class=\"line\">  resolves = [&quot;build&quot;]  // 需要执行的 actions 放在 resolves 里面，如果有多个，可以用 &apos;,&apos; 分割。 当有多个的时候，它们是并行执行的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action &quot;build&quot; &#123;</span><br><span class=\"line\">  uses = &quot;./actions/build&quot;</span><br><span class=\"line\">  args = &quot;linux/amd64 darwin/amd64&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个里面有 3 大块的内容，我们来简单讲解一下。</p>\n<ul>\n<li>workflow 一个 <code>workflow</code> 文件可以包含多个 <code>workflow</code> 模块，每个模块都有一个唯一的名称和两个属性<code>on</code> 和 <code>resolves</code>，属性的具体作用可以看 <a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#workflow-attributes\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li>action 一个 <code>workflow</code> 文件可以包含至多100个 <code>action</code> 模块，每个模块都有一个唯一的名称，模块里面的 <code>uses</code> 属性是必须的，属性的具体作用可以看 <a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#actions-attributes\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n</ul>\n<h3 id=\"0x10-Action-Script\"><a href=\"#0x10-Action-Script\" class=\"headerlink\" title=\"0x10 Action Script\"></a>0x10 Action Script</h3><p>我们可以看到 <code>action</code> 模块里面有一个 <code>uses</code> 的必选项，这个就是用来指定你的 Docker 容器的。支持的方式有很多种，具体可以参考<a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#using-a-dockerfile-image-in-an-action\" target=\"_blank\" rel=\"noopener\">这里</a>，我们这里用的是 <code>./path/to/dir</code> 的这种方式，因为 <code>workflow</code> 和代码在相同的 repo 里面。</p>\n<p>接下来来看看，我们 <code>./workflow/build/Dockerfile</code> 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.11</span><br><span class=\"line\"></span><br><span class=\"line\">RUN \\</span><br><span class=\"line\">  apt-get update &amp;&amp; \\</span><br><span class=\"line\">  apt-get install -y ca-certificates openssl zip &amp;&amp; \\</span><br><span class=\"line\">  update-ca-certificates &amp;&amp; \\</span><br><span class=\"line\">  rm -rf /var/lib/apt</span><br><span class=\"line\"></span><br><span class=\"line\">COPY entrypoint.sh /entrypoint.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/entrypoint.sh&quot;] // 在 workflow 文件的 action 模块里面，如果没有 runs 属性，那么就会用这个 ENTRIYPOINT，如果有那就使用 runs.</span><br></pre></td></tr></table></figure>\n\n<p>最后我们来看看 <code>./workflow/build/entrypoint.sh</code> 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -z &quot;$GITHUB_WORKSPACE&quot; ]]; then</span><br><span class=\"line\">  echo &quot;Set the GITHUB_WORKSPACE env variable.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -z &quot;$GITHUB_REPOSITORY&quot; ]]; then</span><br><span class=\"line\">  echo &quot;Set the GITHUB_REPOSITORY env variable.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># GITHUB_WORKSPACE 和 GITHUB_REPOSITORY 是 workflow 内置的环境变量</span><br><span class=\"line\">root_path=&quot;$GITHUB_WORKSPACE&quot;</span><br><span class=\"line\">release_path=&quot;$GITHUB_WORKSPACE/.release&quot;</span><br><span class=\"line\">repo_name=&quot;$(echo $GITHUB_REPOSITORY | cut -d &apos;/&apos; -f2)&quot;</span><br><span class=\"line\">targets=$&#123;@-&quot;linux/amd64 linux/386 windows/amd64 windows/386&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----&gt; Setting up Go repository&quot;</span><br><span class=\"line\">mkdir -p $release_path</span><br><span class=\"line\"></span><br><span class=\"line\">cd $root_path/Server</span><br><span class=\"line\">source env.sh</span><br><span class=\"line\">cd src/app</span><br><span class=\"line\"></span><br><span class=\"line\">for target in $targets; do</span><br><span class=\"line\">  os=&quot;$(echo $target | cut -d &apos;/&apos; -f1)&quot;</span><br><span class=\"line\">  arch=&quot;$(echo $target | cut -d &apos;/&apos; -f2)&quot;</span><br><span class=\"line\">  output=&quot;$&#123;release_path&#125;/$&#123;repo_name&#125;_$&#123;os&#125;_$&#123;arch&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;----&gt; Building project for: $target&quot;</span><br><span class=\"line\">  GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -o $output</span><br><span class=\"line\">  zip -j $output.zip $output &gt; /dev/null</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----&gt; Build is complete. List of files at $release_path:&quot;</span><br><span class=\"line\">cd $release_path</span><br><span class=\"line\">ls -al</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意的一点是你需要 <code>chmod +x entrypoint.sh</code> 给 <code>entrypoint.sh</code> 这个文件执行权限，否则 workflow 在运行的时候会报错。</p>\n<p>这样，当你在 <code>push</code> 到 GitHub 的时候，就会触发 workflow。运行的日志大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### STARTED build 09:48:13Z</span><br><span class=\"line\"></span><br><span class=\"line\">Pulling image: gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">latest: Pulling from github-actions-images/action-runner</span><br><span class=\"line\">169185f82c45: Pulling fs layer</span><br><span class=\"line\">0ccde4b6b241: Pulling fs layer</span><br><span class=\"line\">d0372f57daa2: Pulling fs layer</span><br><span class=\"line\">165911d108d6: Pulling fs layer</span><br><span class=\"line\">54996bce1de5: Pulling fs layer</span><br><span class=\"line\">165911d108d6: Waiting</span><br><span class=\"line\">54996bce1de5: Waiting</span><br><span class=\"line\">0ccde4b6b241: Verifying Checksum</span><br><span class=\"line\">0ccde4b6b241: Download complete</span><br><span class=\"line\">d0372f57daa2: Verifying Checksum</span><br><span class=\"line\">d0372f57daa2: Download complete</span><br><span class=\"line\">169185f82c45: Verifying Checksum</span><br><span class=\"line\">169185f82c45: Download complete</span><br><span class=\"line\">54996bce1de5: Verifying Checksum</span><br><span class=\"line\">54996bce1de5: Download complete</span><br><span class=\"line\">165911d108d6: Verifying Checksum</span><br><span class=\"line\">165911d108d6: Download complete</span><br><span class=\"line\">169185f82c45: Pull complete</span><br><span class=\"line\">0ccde4b6b241: Pull complete</span><br><span class=\"line\">d0372f57daa2: Pull complete</span><br><span class=\"line\">165911d108d6: Pull complete</span><br><span class=\"line\">54996bce1de5: Pull complete</span><br><span class=\"line\">Digest: sha256:c9bb432ec5ec08ee08b040a9fccacebbbf8a91444dac4721600cf5dca9dae57e</span><br><span class=\"line\">Status: Downloaded newer image for gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9: Pulling from gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4</span><br><span class=\"line\">22dbe790f715: Already exists</span><br><span class=\"line\">0250231711a0: Already exists</span><br><span class=\"line\">6fba9447437b: Already exists</span><br><span class=\"line\">c2b4d327b352: Already exists</span><br><span class=\"line\">619f4932b7ea: Already exists</span><br><span class=\"line\">e2fd6cbd3c6f: Pulling fs layer</span><br><span class=\"line\">1d96446d2b20: Pulling fs layer</span><br><span class=\"line\">6c3860f2355d: Pulling fs layer</span><br><span class=\"line\">b9beb9e9e7b4: Pulling fs layer</span><br><span class=\"line\">b9beb9e9e7b4: Waiting</span><br><span class=\"line\">1d96446d2b20: Verifying Checksum</span><br><span class=\"line\">1d96446d2b20: Download complete</span><br><span class=\"line\">6c3860f2355d: Verifying Checksum</span><br><span class=\"line\">6c3860f2355d: Download complete</span><br><span class=\"line\">b9beb9e9e7b4: Verifying Checksum</span><br><span class=\"line\">b9beb9e9e7b4: Download complete</span><br><span class=\"line\">e2fd6cbd3c6f: Verifying Checksum</span><br><span class=\"line\">e2fd6cbd3c6f: Download complete</span><br><span class=\"line\">e2fd6cbd3c6f: Pull complete</span><br><span class=\"line\">1d96446d2b20: Pull complete</span><br><span class=\"line\">6c3860f2355d: Pull complete</span><br><span class=\"line\">b9beb9e9e7b4: Pull complete</span><br><span class=\"line\">Digest: sha256:f4f24205b3442b3dae915837f7f8823e6801382edfff9d581f4142723221ca2b</span><br><span class=\"line\">Status: Downloaded newer image for gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9</span><br><span class=\"line\">Step 1/4 : FROM golang:1.11</span><br><span class=\"line\">1.11: Pulling from library/golang</span><br><span class=\"line\">22dbe790f715: Already exists</span><br><span class=\"line\">0250231711a0: Already exists</span><br><span class=\"line\">6fba9447437b: Already exists</span><br><span class=\"line\">c2b4d327b352: Already exists</span><br><span class=\"line\">619f4932b7ea: Already exists</span><br><span class=\"line\">e2fd6cbd3c6f: Already exists</span><br><span class=\"line\">1d96446d2b20: Already exists</span><br><span class=\"line\">Digest: sha256:1a0252130e79773cbda16c451b125cbf18d59fe3e682d344676a5103bfcaedcc</span><br><span class=\"line\">Status: Downloaded newer image for golang:1.11</span><br><span class=\"line\"> ---&gt; 1454e2b3d01f</span><br><span class=\"line\">Step 2/4 : RUN   apt-get update &amp;&amp;   apt-get install -y ca-certificates openssl zip &amp;&amp;   update-ca-certificates &amp;&amp;   rm -rf /var/lib/apt</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 56bef95c0fd8</span><br><span class=\"line\">Step 3/4 : COPY entrypoint.sh /entrypoint.sh</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; b9053ad11b60</span><br><span class=\"line\">Step 4/4 : ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 8e7345aa7948</span><br><span class=\"line\">Successfully built 8e7345aa7948</span><br><span class=\"line\">Successfully tagged gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9</span><br><span class=\"line\">Already have image (with digest): gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">----&gt; Setting up Go repository</span><br><span class=\"line\">----&gt; Building project for: linux/amd64</span><br><span class=\"line\">----&gt; Building project for: darwin/amd64</span><br><span class=\"line\">----&gt; Build is complete. List of files at /github/workspace/.release:</span><br><span class=\"line\">total 62360</span><br><span class=\"line\">drwxr-xr-x  2 root root     4096 Mar  8 09:50 .</span><br><span class=\"line\">drwxr-xr-x 12 root root     4096 Mar  8 09:48 ..</span><br><span class=\"line\">-rwxr-xr-x  1 root root 22096424 Mar  8 09:50 app_darwin_amd64</span><br><span class=\"line\">-rw-r--r--  1 root root  9822499 Mar  8 09:50 app_darwin_amd64.zip</span><br><span class=\"line\">-rwxr-xr-x  1 root root 22118946 Mar  8 09:49 app_linux_amd64</span><br><span class=\"line\">-rw-r--r--  1 root root  9801034 Mar  8 09:49 app_linux_amd64.zip</span><br><span class=\"line\"></span><br><span class=\"line\">### SUCCEEDED build 09:50:06Z (1m52.781s)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x11-Deploy\"><a href=\"#0x11-Deploy\" class=\"headerlink\" title=\"0x11 Deploy\"></a>0x11 Deploy</h3><p>编译好的文件存在了 <code>$GITHUB_WORKSPACE/.release</code> 这个地方，所以只需要在创建一个 <code>deploy</code> 的 action 就可以拿到编译好的文件去部署了。</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/workflow.png\" alt=\"\"></p>\n<p>最后，项目的地址 <a href=\"https://github.com/momaek/mdxz\" target=\"_blank\" rel=\"noopener\">https://github.com/momaek/mdxz</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noopener\">Github Actions</a> 是 Github 在 2018 年年末的时候推出的新平台，旨在成为通用的工作流程自动化工具。事实上，Github 是一家致力于改进开发者协作工具的公司，这一举措让它扩展到了 CI/CD 领域，em~~ interesting….</p>","more":"<h3 id=\"0x00-Overview\"><a href=\"#0x00-Overview\" class=\"headerlink\" title=\"0x00 Overview\"></a>0x00 Overview</h3><p>在我们探究 Actions 和 Workflow 之前，让我们先来看下这个东西存在的意义是什么。要为一个 repo 做任何的一些自动化操作，例如跑测试或者编译(包，二进制文件等)，你需要依赖一个外部的服务或者自己通过 Github webhooks 来做这些事情。现在有了 Github Actions 后，你可以不需要借助第三方工具来处理这些事情了。 Github Actions 是通过 Docker 来做这些事情的，也就是说你可以用公共的 Docker 镜像。</p>\n<p>再多说一句，目前(2019.03.08) Github Actions 是需要排队申请公测的，所以有需要的童鞋去排队吧。</p>\n<h3 id=\"0x01-Workflow-Setup\"><a href=\"#0x01-Workflow-Setup\" class=\"headerlink\" title=\"0x01 Workflow Setup\"></a>0x01 Workflow Setup</h3><p>首先我们先来看一下，我这边项目的结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── env.sh</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   └── app</span><br><span class=\"line\">│       └── main.go</span><br><span class=\"line\">└── workflow</span><br><span class=\"line\">    ├── build</span><br><span class=\"line\">    │   ├── Dockerfile</span><br><span class=\"line\">    │   └── entrypoint.sh</span><br><span class=\"line\">    └── deploy</span><br><span class=\"line\">        ├── Dockerfile</span><br><span class=\"line\">        └── entrypoint.sh</span><br></pre></td></tr></table></figure>\n\n<p>这应该是一个比较典型的项目结构，项目里面自带一个 <code>GOPATH</code>。</p>\n<p>我们心间一个目录：<code>.github</code>，然后在新目录里面建一个文件 <code>main.workflow</code>。<code>main.workflow</code> 的内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workflow &quot;Build Project&quot; &#123;</span><br><span class=\"line\">  on = &quot;push&quot; // 当你把你本地的代码 push 到 GitHub 的时候，就会触发这个工作流</span><br><span class=\"line\">  resolves = [&quot;build&quot;]  // 需要执行的 actions 放在 resolves 里面，如果有多个，可以用 &apos;,&apos; 分割。 当有多个的时候，它们是并行执行的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">action &quot;build&quot; &#123;</span><br><span class=\"line\">  uses = &quot;./actions/build&quot;</span><br><span class=\"line\">  args = &quot;linux/amd64 darwin/amd64&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个里面有 3 大块的内容，我们来简单讲解一下。</p>\n<ul>\n<li>workflow 一个 <code>workflow</code> 文件可以包含多个 <code>workflow</code> 模块，每个模块都有一个唯一的名称和两个属性<code>on</code> 和 <code>resolves</code>，属性的具体作用可以看 <a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#workflow-attributes\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li>action 一个 <code>workflow</code> 文件可以包含至多100个 <code>action</code> 模块，每个模块都有一个唯一的名称，模块里面的 <code>uses</code> 属性是必须的，属性的具体作用可以看 <a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#actions-attributes\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n</ul>\n<h3 id=\"0x10-Action-Script\"><a href=\"#0x10-Action-Script\" class=\"headerlink\" title=\"0x10 Action Script\"></a>0x10 Action Script</h3><p>我们可以看到 <code>action</code> 模块里面有一个 <code>uses</code> 的必选项，这个就是用来指定你的 Docker 容器的。支持的方式有很多种，具体可以参考<a href=\"https://developer.github.com/actions/creating-workflows/workflow-configuration-options/#using-a-dockerfile-image-in-an-action\" target=\"_blank\" rel=\"noopener\">这里</a>，我们这里用的是 <code>./path/to/dir</code> 的这种方式，因为 <code>workflow</code> 和代码在相同的 repo 里面。</p>\n<p>接下来来看看，我们 <code>./workflow/build/Dockerfile</code> 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM golang:1.11</span><br><span class=\"line\"></span><br><span class=\"line\">RUN \\</span><br><span class=\"line\">  apt-get update &amp;&amp; \\</span><br><span class=\"line\">  apt-get install -y ca-certificates openssl zip &amp;&amp; \\</span><br><span class=\"line\">  update-ca-certificates &amp;&amp; \\</span><br><span class=\"line\">  rm -rf /var/lib/apt</span><br><span class=\"line\"></span><br><span class=\"line\">COPY entrypoint.sh /entrypoint.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;/entrypoint.sh&quot;] // 在 workflow 文件的 action 模块里面，如果没有 runs 属性，那么就会用这个 ENTRIYPOINT，如果有那就使用 runs.</span><br></pre></td></tr></table></figure>\n\n<p>最后我们来看看 <code>./workflow/build/entrypoint.sh</code> 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">set -e</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -z &quot;$GITHUB_WORKSPACE&quot; ]]; then</span><br><span class=\"line\">  echo &quot;Set the GITHUB_WORKSPACE env variable.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -z &quot;$GITHUB_REPOSITORY&quot; ]]; then</span><br><span class=\"line\">  echo &quot;Set the GITHUB_REPOSITORY env variable.&quot;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># GITHUB_WORKSPACE 和 GITHUB_REPOSITORY 是 workflow 内置的环境变量</span><br><span class=\"line\">root_path=&quot;$GITHUB_WORKSPACE&quot;</span><br><span class=\"line\">release_path=&quot;$GITHUB_WORKSPACE/.release&quot;</span><br><span class=\"line\">repo_name=&quot;$(echo $GITHUB_REPOSITORY | cut -d &apos;/&apos; -f2)&quot;</span><br><span class=\"line\">targets=$&#123;@-&quot;linux/amd64 linux/386 windows/amd64 windows/386&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----&gt; Setting up Go repository&quot;</span><br><span class=\"line\">mkdir -p $release_path</span><br><span class=\"line\"></span><br><span class=\"line\">cd $root_path/Server</span><br><span class=\"line\">source env.sh</span><br><span class=\"line\">cd src/app</span><br><span class=\"line\"></span><br><span class=\"line\">for target in $targets; do</span><br><span class=\"line\">  os=&quot;$(echo $target | cut -d &apos;/&apos; -f1)&quot;</span><br><span class=\"line\">  arch=&quot;$(echo $target | cut -d &apos;/&apos; -f2)&quot;</span><br><span class=\"line\">  output=&quot;$&#123;release_path&#125;/$&#123;repo_name&#125;_$&#123;os&#125;_$&#123;arch&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  echo &quot;----&gt; Building project for: $target&quot;</span><br><span class=\"line\">  GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build -o $output</span><br><span class=\"line\">  zip -j $output.zip $output &gt; /dev/null</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;----&gt; Build is complete. List of files at $release_path:&quot;</span><br><span class=\"line\">cd $release_path</span><br><span class=\"line\">ls -al</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意的一点是你需要 <code>chmod +x entrypoint.sh</code> 给 <code>entrypoint.sh</code> 这个文件执行权限，否则 workflow 在运行的时候会报错。</p>\n<p>这样，当你在 <code>push</code> 到 GitHub 的时候，就会触发 workflow。运行的日志大致如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### STARTED build 09:48:13Z</span><br><span class=\"line\"></span><br><span class=\"line\">Pulling image: gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">latest: Pulling from github-actions-images/action-runner</span><br><span class=\"line\">169185f82c45: Pulling fs layer</span><br><span class=\"line\">0ccde4b6b241: Pulling fs layer</span><br><span class=\"line\">d0372f57daa2: Pulling fs layer</span><br><span class=\"line\">165911d108d6: Pulling fs layer</span><br><span class=\"line\">54996bce1de5: Pulling fs layer</span><br><span class=\"line\">165911d108d6: Waiting</span><br><span class=\"line\">54996bce1de5: Waiting</span><br><span class=\"line\">0ccde4b6b241: Verifying Checksum</span><br><span class=\"line\">0ccde4b6b241: Download complete</span><br><span class=\"line\">d0372f57daa2: Verifying Checksum</span><br><span class=\"line\">d0372f57daa2: Download complete</span><br><span class=\"line\">169185f82c45: Verifying Checksum</span><br><span class=\"line\">169185f82c45: Download complete</span><br><span class=\"line\">54996bce1de5: Verifying Checksum</span><br><span class=\"line\">54996bce1de5: Download complete</span><br><span class=\"line\">165911d108d6: Verifying Checksum</span><br><span class=\"line\">165911d108d6: Download complete</span><br><span class=\"line\">169185f82c45: Pull complete</span><br><span class=\"line\">0ccde4b6b241: Pull complete</span><br><span class=\"line\">d0372f57daa2: Pull complete</span><br><span class=\"line\">165911d108d6: Pull complete</span><br><span class=\"line\">54996bce1de5: Pull complete</span><br><span class=\"line\">Digest: sha256:c9bb432ec5ec08ee08b040a9fccacebbbf8a91444dac4721600cf5dca9dae57e</span><br><span class=\"line\">Status: Downloaded newer image for gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9: Pulling from gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4</span><br><span class=\"line\">22dbe790f715: Already exists</span><br><span class=\"line\">0250231711a0: Already exists</span><br><span class=\"line\">6fba9447437b: Already exists</span><br><span class=\"line\">c2b4d327b352: Already exists</span><br><span class=\"line\">619f4932b7ea: Already exists</span><br><span class=\"line\">e2fd6cbd3c6f: Pulling fs layer</span><br><span class=\"line\">1d96446d2b20: Pulling fs layer</span><br><span class=\"line\">6c3860f2355d: Pulling fs layer</span><br><span class=\"line\">b9beb9e9e7b4: Pulling fs layer</span><br><span class=\"line\">b9beb9e9e7b4: Waiting</span><br><span class=\"line\">1d96446d2b20: Verifying Checksum</span><br><span class=\"line\">1d96446d2b20: Download complete</span><br><span class=\"line\">6c3860f2355d: Verifying Checksum</span><br><span class=\"line\">6c3860f2355d: Download complete</span><br><span class=\"line\">b9beb9e9e7b4: Verifying Checksum</span><br><span class=\"line\">b9beb9e9e7b4: Download complete</span><br><span class=\"line\">e2fd6cbd3c6f: Verifying Checksum</span><br><span class=\"line\">e2fd6cbd3c6f: Download complete</span><br><span class=\"line\">e2fd6cbd3c6f: Pull complete</span><br><span class=\"line\">1d96446d2b20: Pull complete</span><br><span class=\"line\">6c3860f2355d: Pull complete</span><br><span class=\"line\">b9beb9e9e7b4: Pull complete</span><br><span class=\"line\">Digest: sha256:f4f24205b3442b3dae915837f7f8823e6801382edfff9d581f4142723221ca2b</span><br><span class=\"line\">Status: Downloaded newer image for gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9</span><br><span class=\"line\">Step 1/4 : FROM golang:1.11</span><br><span class=\"line\">1.11: Pulling from library/golang</span><br><span class=\"line\">22dbe790f715: Already exists</span><br><span class=\"line\">0250231711a0: Already exists</span><br><span class=\"line\">6fba9447437b: Already exists</span><br><span class=\"line\">c2b4d327b352: Already exists</span><br><span class=\"line\">619f4932b7ea: Already exists</span><br><span class=\"line\">e2fd6cbd3c6f: Already exists</span><br><span class=\"line\">1d96446d2b20: Already exists</span><br><span class=\"line\">Digest: sha256:1a0252130e79773cbda16c451b125cbf18d59fe3e682d344676a5103bfcaedcc</span><br><span class=\"line\">Status: Downloaded newer image for golang:1.11</span><br><span class=\"line\"> ---&gt; 1454e2b3d01f</span><br><span class=\"line\">Step 2/4 : RUN   apt-get update &amp;&amp;   apt-get install -y ca-certificates openssl zip &amp;&amp;   update-ca-certificates &amp;&amp;   rm -rf /var/lib/apt</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 56bef95c0fd8</span><br><span class=\"line\">Step 3/4 : COPY entrypoint.sh /entrypoint.sh</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; b9053ad11b60</span><br><span class=\"line\">Step 4/4 : ENTRYPOINT [&quot;/entrypoint.sh&quot;]</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; 8e7345aa7948</span><br><span class=\"line\">Successfully built 8e7345aa7948</span><br><span class=\"line\">Successfully tagged gcr.io/gct-12-3hn-cry55j2e8o-ikyqx-80/dabb005a903a36aae14c496f0250249d66465edce31277b5b1609d939a40e877/5c3174b74edc6f2b9e0743594b8bd3c7f31e4f4405758cc9872b3fe1de1d28b4:fc613b4dfd6736a7bd268c8a0e74ed0d1c04a959f59dd74ef2874983fd443fc9</span><br><span class=\"line\">Already have image (with digest): gcr.io/github-actions-images/action-runner:latest</span><br><span class=\"line\">----&gt; Setting up Go repository</span><br><span class=\"line\">----&gt; Building project for: linux/amd64</span><br><span class=\"line\">----&gt; Building project for: darwin/amd64</span><br><span class=\"line\">----&gt; Build is complete. List of files at /github/workspace/.release:</span><br><span class=\"line\">total 62360</span><br><span class=\"line\">drwxr-xr-x  2 root root     4096 Mar  8 09:50 .</span><br><span class=\"line\">drwxr-xr-x 12 root root     4096 Mar  8 09:48 ..</span><br><span class=\"line\">-rwxr-xr-x  1 root root 22096424 Mar  8 09:50 app_darwin_amd64</span><br><span class=\"line\">-rw-r--r--  1 root root  9822499 Mar  8 09:50 app_darwin_amd64.zip</span><br><span class=\"line\">-rwxr-xr-x  1 root root 22118946 Mar  8 09:49 app_linux_amd64</span><br><span class=\"line\">-rw-r--r--  1 root root  9801034 Mar  8 09:49 app_linux_amd64.zip</span><br><span class=\"line\"></span><br><span class=\"line\">### SUCCEEDED build 09:50:06Z (1m52.781s)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"0x11-Deploy\"><a href=\"#0x11-Deploy\" class=\"headerlink\" title=\"0x11 Deploy\"></a>0x11 Deploy</h3><p>编译好的文件存在了 <code>$GITHUB_WORKSPACE/.release</code> 这个地方，所以只需要在创建一个 <code>deploy</code> 的 action 就可以拿到编译好的文件去部署了。</p>\n<p><img src=\"https://oa7ktymto.qnssl.com/workflow.png\" alt=\"\"></p>\n<p>最后，项目的地址 <a href=\"https://github.com/momaek/mdxz\" target=\"_blank\" rel=\"noopener\">https://github.com/momaek/mdxz</a></p>"},{"title":"应试教育","date":"2016-11-27T04:57:54.000Z","photos":["https://oa7ktymto.qnssl.com/exam.png"],"_content":"\n### 0x001\n\n我们先来欣赏下周即将在天朝上映的《你的名字》的 OP:\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=426881487&auto=1&height=66\"></iframe>\n\n>前前前世から僕は　君を探しはじめたよ\nそのぶきっちょな笑い方をめがけて　やってきたんだよ\n君が全然全部なくなって　チリヂリになったって\nもう迷わない　また１から探しはじめるさ\n何光年でも　この歌を口ずさみながら\n从前前前世开始 我就已经开始探寻你的踪迹\n以你那笨笨的笑容为线索 寻找至今\n即便你化为碎片粉尘 全部消失\n我也不会迷茫，再从头开始找就是啦\n哼着这首歌，再找上个几光年吧\n\n文末有福利。 因为某位同学说：都没有果照还敢叫 `sexy`。\n\n### 0x010\n\n今天的主题是应试教育，然而我是来喷应试教育的，但是我不会给出可能有用的解决办法（喷子）。昨天卡斯特罗去世，意味着这个世界上已经没有相信共产主义的人了。\n\n### 0x011 fking 应试教育\n\n__侵犯学生的人权，剥夺学生的个性、思想与自由。__对学生个人的外观、饰物、兴趣爱好等进行控制与干预，对学生的隐私（如考试成绩、生活习惯等等）进行泄露。在高中时期尤为明显，不能留长发，不能奇装异服，WTF\n\n__价值观的扭曲：应试教育教给学生的是笔试上的分数比较，属纸上谈兵，欠缺知识的实行__，缺乏对实际生活的联系。\n为了让我们学习理科，应试教育 “发明了” 一些奇怪的场景，比如：\n>+ 一边蓄水一边放水的水池，最终水池干了；\n+ 白天往上爬，晚上在墙上休息，掉下去一点点的井底之蛙；\n+ SB一样沿着直线逃跑的羊和按照螺旋线追羊的奇怪的狼……\n\n\n学习的主体学生在应试教育体系中地位低下，几乎没有任何干涉教育体制的权利，导致教育体制得不到大多数学生的认可，教学内容也随之超出学生的接受能力，违背学生的利益。\n\n\n不注重综合能力的培养，导致出现“高分低能”，以致被讽为“应试教育是个筐，什么垃圾都能装”。这里面所有的__价值观就是只关心分数，基础教育者忽视甚至放弃了对人的培养，一切让位于考试。__\n\n这种让位于考试不仅体现在对题海战术、学习成绩的盲目追求上，更重要的是它背后代表了一种强烈的价值观，即“__我只要能够达到一个好的分数，我可以放弃一切、忽视一切、抛弃一切、践踏一切。__”就像钱理群教授所说的那样，我们看到很多大学里的大学生都是所谓“__精致的利己主义者__”，但这种精致的利己主义者并不是他们自身是这样的——我们的孩子一点问题都没有，他们的问题都是我们的教育者造成的。\n\n我们的教育是怎么实现这些东西的呢？比如已经不再重视能够培养出什么样好学生，而在于我们怎么“掐尖”，把所有高分、高智商的学生不择手段弄到自己的学校里来，然后通过各种各样的排名机制从商业上证明我是一个好的学校，所以可以收更高的费用，收更多自费的学生。\n\n然后，我们整个教育的价值观都变成了在升学考试中考试的内容并不是课上教的。你要取得好成绩，就必须参加各种高昂的课外班，完全把教育商品化。\n\n我不仅仅是在批评这样一个教育观。更重要的是，__这样的教育观培养出来的同学，已经完全被训练成分数的奴隶，不知道自己为什么要活着，只知道高的分数可能获得奖赏，获得成就感，获得别人不能得到的东西。__\n\n__学生不仅仅在经历压力，他们的价值观也在被扭曲、在被功利化。在这种功利化的巨大压力下，这已经不是一个挫折教育的教育模式，而是一个挫败教育，就是通过排名不断使更多的学生觉得自己是失败者__。所有的人都对分数非常敏感且在意，因为考试成绩，已经成为评价一个人唯一的标准。在这样的价值观下面，我们大概很难真正健康起来。而__价值观对人有非常重要的支撑作用。一个人知道自己是谁，知道做什么事情是对的、是好的，知道做什么事情能够让自己发自内心地感到喜悦和自我肯定，是支撑我们的重要因素__。\n\n\n应试教育培养的高分学生，大部分没有个性与主见。应试教育的本质实为奴化教育，导致学生缺乏表达的勇气，不敢独立思考，已经达到了无法形容的地步。\n\n__流水化教育下的数代人，在初高中时并没有形成选择自己职业和人生方向的自觉，于是到了大学里，考研、出国、打游戏、谈恋爱、找工作，多少人扪心自问知道自己到底在干什么，就我观察到的大部分人来看，庸庸碌碌或者青年得意都无所谓，因为讲真，大部分都在以不同的方式随波逐流而已。然后到了毕业之前，把困惑，迷茫，面对社会的手足无措，价值观的冲击，统统归结为青春的伤痛，生来彷徨。什么伤痛，狗屁彷徨，根本就是人祸，祸根早就在初高中时候就种下了，慢性毒药而不自知。最终，这一切将以整个社会价值取向的单一化和拜金主义为代价，因为推动这个社会前进的中坚力量，其实并不知道自己真正想要什么__。\n\n我甚至在看到那群高中老师在夸赞高三学生努力的时候我都觉得这是在对他们生命的摧残。那群老师并没有真正的关心过学生想要的是什么，然而他们自己也不知道他们想要的是什么。\n\n\n应试教育并不鼓励对真理的探索，简单地说，应试教育倾向于告诉你什么是正确的，而不会告诉你它为什么正确，以及我们是如何探索到正确答案的，中间又踩了多少坑。\n\n当学生们回到家时，家长最关心的是孩子学到什么知识。\n>* 若孩子说：“我们今天学习了 XX 定理，然后用这个定理讲了几道例题，然后布置了几道相关的作业题。” 家长们会感到满意。\n* 若孩子说：“今天老师让我们讨论了一道难题的解法，我们各执己见，得到了很多不同的答案，然后老师分析了每个人答案的错误和不足之处，但并没有告诉我们正确答案，他让我们回家查阅资料，继续想，明天上课讨论。” 家长们则会想：这老师教的是什么玩意儿！那么低效！\n\n如果为了追求考试分数，当然是前一种很好。如果是为了培养学生的独立思考和探索的能力，还真的是后一种好啊。让我们进入社会时，过去学的知识点和考试分数很多都用不上了，但独立思考和探索的能力，却是受益终生的。\n\n__如果我们不鼓励探索能力的培养，永远只告诉你结论，那我们学习东西，永远是线性的，而且随着时间的流逝，还容易遗忘；但如果我们掌握了思考的方法，那么我们就拥有学习大量知识的潜能，让我们越学越快。在缺乏学习资料的情况下，这种潜能也能帮助我们自主地学到更多的东西__。\n\n\n### 0x100 结局\n\n再来说高考本身只是个带着部分洗牌功能的游戏，没有能力跳出去的人，最好的选择是：学会游戏规则，尽可能的去玩好它。但是一定要知道，是游戏总有结束的一天，你总要面对真实的世界，在这一天真正到来之前，__你需要做的是，尽可能的认识世界和自我。一旦有了这样的意识，就已经透进了一点光__。\n\n然而，\n很多人没弄清的一点就是，在这个污糟的制度下，作为公民而非肉食者，我们永远无需去体谅这个国家由于历史积弊之深厚，社会格局之复杂，改革之艰难，所以“有今天已经很不容易了”，“至少普及了基础教育”，“至少是相对公平的制度”，“至少保证了社会的流动性”。因为__强权政府的存在__，我们永远无需维护和肯定这个现行制度，因为不关你事。如果你觉得好，放在心里，也不必发声。作为公民的责任，如果你要发声，就应该挑剔，就应该不满足。\n\n\n### 0x101 致谢\n\n多谢各位看官能看到这个地方。现在是福利时间(图片来自 [妹子图](http://meizi.us))：\n\n![](https://oa7kw8mwj.qnssl.com/20b58e46368f4d75a3964b4de11f4b46.jpg)","source":"_posts/应试教育.md","raw":"---\ntitle: 应试教育\ndate: 2016-11-27 12:57:54\ntags: \n\t- 教育\nphotos:\n\t- https://oa7ktymto.qnssl.com/exam.png\n---\n\n### 0x001\n\n我们先来欣赏下周即将在天朝上映的《你的名字》的 OP:\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=426881487&auto=1&height=66\"></iframe>\n\n>前前前世から僕は　君を探しはじめたよ\nそのぶきっちょな笑い方をめがけて　やってきたんだよ\n君が全然全部なくなって　チリヂリになったって\nもう迷わない　また１から探しはじめるさ\n何光年でも　この歌を口ずさみながら\n从前前前世开始 我就已经开始探寻你的踪迹\n以你那笨笨的笑容为线索 寻找至今\n即便你化为碎片粉尘 全部消失\n我也不会迷茫，再从头开始找就是啦\n哼着这首歌，再找上个几光年吧\n\n文末有福利。 因为某位同学说：都没有果照还敢叫 `sexy`。\n\n### 0x010\n\n今天的主题是应试教育，然而我是来喷应试教育的，但是我不会给出可能有用的解决办法（喷子）。昨天卡斯特罗去世，意味着这个世界上已经没有相信共产主义的人了。\n\n### 0x011 fking 应试教育\n\n__侵犯学生的人权，剥夺学生的个性、思想与自由。__对学生个人的外观、饰物、兴趣爱好等进行控制与干预，对学生的隐私（如考试成绩、生活习惯等等）进行泄露。在高中时期尤为明显，不能留长发，不能奇装异服，WTF\n\n__价值观的扭曲：应试教育教给学生的是笔试上的分数比较，属纸上谈兵，欠缺知识的实行__，缺乏对实际生活的联系。\n为了让我们学习理科，应试教育 “发明了” 一些奇怪的场景，比如：\n>+ 一边蓄水一边放水的水池，最终水池干了；\n+ 白天往上爬，晚上在墙上休息，掉下去一点点的井底之蛙；\n+ SB一样沿着直线逃跑的羊和按照螺旋线追羊的奇怪的狼……\n\n\n学习的主体学生在应试教育体系中地位低下，几乎没有任何干涉教育体制的权利，导致教育体制得不到大多数学生的认可，教学内容也随之超出学生的接受能力，违背学生的利益。\n\n\n不注重综合能力的培养，导致出现“高分低能”，以致被讽为“应试教育是个筐，什么垃圾都能装”。这里面所有的__价值观就是只关心分数，基础教育者忽视甚至放弃了对人的培养，一切让位于考试。__\n\n这种让位于考试不仅体现在对题海战术、学习成绩的盲目追求上，更重要的是它背后代表了一种强烈的价值观，即“__我只要能够达到一个好的分数，我可以放弃一切、忽视一切、抛弃一切、践踏一切。__”就像钱理群教授所说的那样，我们看到很多大学里的大学生都是所谓“__精致的利己主义者__”，但这种精致的利己主义者并不是他们自身是这样的——我们的孩子一点问题都没有，他们的问题都是我们的教育者造成的。\n\n我们的教育是怎么实现这些东西的呢？比如已经不再重视能够培养出什么样好学生，而在于我们怎么“掐尖”，把所有高分、高智商的学生不择手段弄到自己的学校里来，然后通过各种各样的排名机制从商业上证明我是一个好的学校，所以可以收更高的费用，收更多自费的学生。\n\n然后，我们整个教育的价值观都变成了在升学考试中考试的内容并不是课上教的。你要取得好成绩，就必须参加各种高昂的课外班，完全把教育商品化。\n\n我不仅仅是在批评这样一个教育观。更重要的是，__这样的教育观培养出来的同学，已经完全被训练成分数的奴隶，不知道自己为什么要活着，只知道高的分数可能获得奖赏，获得成就感，获得别人不能得到的东西。__\n\n__学生不仅仅在经历压力，他们的价值观也在被扭曲、在被功利化。在这种功利化的巨大压力下，这已经不是一个挫折教育的教育模式，而是一个挫败教育，就是通过排名不断使更多的学生觉得自己是失败者__。所有的人都对分数非常敏感且在意，因为考试成绩，已经成为评价一个人唯一的标准。在这样的价值观下面，我们大概很难真正健康起来。而__价值观对人有非常重要的支撑作用。一个人知道自己是谁，知道做什么事情是对的、是好的，知道做什么事情能够让自己发自内心地感到喜悦和自我肯定，是支撑我们的重要因素__。\n\n\n应试教育培养的高分学生，大部分没有个性与主见。应试教育的本质实为奴化教育，导致学生缺乏表达的勇气，不敢独立思考，已经达到了无法形容的地步。\n\n__流水化教育下的数代人，在初高中时并没有形成选择自己职业和人生方向的自觉，于是到了大学里，考研、出国、打游戏、谈恋爱、找工作，多少人扪心自问知道自己到底在干什么，就我观察到的大部分人来看，庸庸碌碌或者青年得意都无所谓，因为讲真，大部分都在以不同的方式随波逐流而已。然后到了毕业之前，把困惑，迷茫，面对社会的手足无措，价值观的冲击，统统归结为青春的伤痛，生来彷徨。什么伤痛，狗屁彷徨，根本就是人祸，祸根早就在初高中时候就种下了，慢性毒药而不自知。最终，这一切将以整个社会价值取向的单一化和拜金主义为代价，因为推动这个社会前进的中坚力量，其实并不知道自己真正想要什么__。\n\n我甚至在看到那群高中老师在夸赞高三学生努力的时候我都觉得这是在对他们生命的摧残。那群老师并没有真正的关心过学生想要的是什么，然而他们自己也不知道他们想要的是什么。\n\n\n应试教育并不鼓励对真理的探索，简单地说，应试教育倾向于告诉你什么是正确的，而不会告诉你它为什么正确，以及我们是如何探索到正确答案的，中间又踩了多少坑。\n\n当学生们回到家时，家长最关心的是孩子学到什么知识。\n>* 若孩子说：“我们今天学习了 XX 定理，然后用这个定理讲了几道例题，然后布置了几道相关的作业题。” 家长们会感到满意。\n* 若孩子说：“今天老师让我们讨论了一道难题的解法，我们各执己见，得到了很多不同的答案，然后老师分析了每个人答案的错误和不足之处，但并没有告诉我们正确答案，他让我们回家查阅资料，继续想，明天上课讨论。” 家长们则会想：这老师教的是什么玩意儿！那么低效！\n\n如果为了追求考试分数，当然是前一种很好。如果是为了培养学生的独立思考和探索的能力，还真的是后一种好啊。让我们进入社会时，过去学的知识点和考试分数很多都用不上了，但独立思考和探索的能力，却是受益终生的。\n\n__如果我们不鼓励探索能力的培养，永远只告诉你结论，那我们学习东西，永远是线性的，而且随着时间的流逝，还容易遗忘；但如果我们掌握了思考的方法，那么我们就拥有学习大量知识的潜能，让我们越学越快。在缺乏学习资料的情况下，这种潜能也能帮助我们自主地学到更多的东西__。\n\n\n### 0x100 结局\n\n再来说高考本身只是个带着部分洗牌功能的游戏，没有能力跳出去的人，最好的选择是：学会游戏规则，尽可能的去玩好它。但是一定要知道，是游戏总有结束的一天，你总要面对真实的世界，在这一天真正到来之前，__你需要做的是，尽可能的认识世界和自我。一旦有了这样的意识，就已经透进了一点光__。\n\n然而，\n很多人没弄清的一点就是，在这个污糟的制度下，作为公民而非肉食者，我们永远无需去体谅这个国家由于历史积弊之深厚，社会格局之复杂，改革之艰难，所以“有今天已经很不容易了”，“至少普及了基础教育”，“至少是相对公平的制度”，“至少保证了社会的流动性”。因为__强权政府的存在__，我们永远无需维护和肯定这个现行制度，因为不关你事。如果你觉得好，放在心里，也不必发声。作为公民的责任，如果你要发声，就应该挑剔，就应该不满足。\n\n\n### 0x101 致谢\n\n多谢各位看官能看到这个地方。现在是福利时间(图片来自 [妹子图](http://meizi.us))：\n\n![](https://oa7kw8mwj.qnssl.com/20b58e46368f4d75a3964b4de11f4b46.jpg)","slug":"应试教育","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7p000hq0txtrsfq4kp","content":"<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>我们先来欣赏下周即将在天朝上映的《你的名字》的 OP:</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=426881487&auto=1&height=66\"></iframe>\n\n<blockquote>\n<p>前前前世から僕は　君を探しはじめたよ<br>そのぶきっちょな笑い方をめがけて　やってきたんだよ<br>君が全然全部なくなって　チリヂリになったって<br>もう迷わない　また１から探しはじめるさ<br>何光年でも　この歌を口ずさみながら<br>从前前前世开始 我就已经开始探寻你的踪迹<br>以你那笨笨的笑容为线索 寻找至今<br>即便你化为碎片粉尘 全部消失<br>我也不会迷茫，再从头开始找就是啦<br>哼着这首歌，再找上个几光年吧</p>\n</blockquote>\n<p>文末有福利。 因为某位同学说：都没有果照还敢叫 <code>sexy</code>。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>今天的主题是应试教育，然而我是来喷应试教育的，但是我不会给出可能有用的解决办法（喷子）。昨天卡斯特罗去世，意味着这个世界上已经没有相信共产主义的人了。</p>\n<h3 id=\"0x011-fking-应试教育\"><a href=\"#0x011-fking-应试教育\" class=\"headerlink\" title=\"0x011 fking 应试教育\"></a>0x011 fking 应试教育</h3><p><strong>侵犯学生的人权，剥夺学生的个性、思想与自由。</strong>对学生个人的外观、饰物、兴趣爱好等进行控制与干预，对学生的隐私（如考试成绩、生活习惯等等）进行泄露。在高中时期尤为明显，不能留长发，不能奇装异服，WTF</p>\n<p><strong>价值观的扭曲：应试教育教给学生的是笔试上的分数比较，属纸上谈兵，欠缺知识的实行</strong>，缺乏对实际生活的联系。<br>为了让我们学习理科，应试教育 “发明了” 一些奇怪的场景，比如：</p>\n<blockquote>\n<ul>\n<li>一边蓄水一边放水的水池，最终水池干了；</li>\n</ul>\n</blockquote>\n<ul>\n<li>白天往上爬，晚上在墙上休息，掉下去一点点的井底之蛙；</li>\n<li>SB一样沿着直线逃跑的羊和按照螺旋线追羊的奇怪的狼……</li>\n</ul>\n<p>学习的主体学生在应试教育体系中地位低下，几乎没有任何干涉教育体制的权利，导致教育体制得不到大多数学生的认可，教学内容也随之超出学生的接受能力，违背学生的利益。</p>\n<p>不注重综合能力的培养，导致出现“高分低能”，以致被讽为“应试教育是个筐，什么垃圾都能装”。这里面所有的<strong>价值观就是只关心分数，基础教育者忽视甚至放弃了对人的培养，一切让位于考试。</strong></p>\n<p>这种让位于考试不仅体现在对题海战术、学习成绩的盲目追求上，更重要的是它背后代表了一种强烈的价值观，即“<strong>我只要能够达到一个好的分数，我可以放弃一切、忽视一切、抛弃一切、践踏一切。</strong>”就像钱理群教授所说的那样，我们看到很多大学里的大学生都是所谓“<strong>精致的利己主义者</strong>”，但这种精致的利己主义者并不是他们自身是这样的——我们的孩子一点问题都没有，他们的问题都是我们的教育者造成的。</p>\n<p>我们的教育是怎么实现这些东西的呢？比如已经不再重视能够培养出什么样好学生，而在于我们怎么“掐尖”，把所有高分、高智商的学生不择手段弄到自己的学校里来，然后通过各种各样的排名机制从商业上证明我是一个好的学校，所以可以收更高的费用，收更多自费的学生。</p>\n<p>然后，我们整个教育的价值观都变成了在升学考试中考试的内容并不是课上教的。你要取得好成绩，就必须参加各种高昂的课外班，完全把教育商品化。</p>\n<p>我不仅仅是在批评这样一个教育观。更重要的是，<strong>这样的教育观培养出来的同学，已经完全被训练成分数的奴隶，不知道自己为什么要活着，只知道高的分数可能获得奖赏，获得成就感，获得别人不能得到的东西。</strong></p>\n<p><strong>学生不仅仅在经历压力，他们的价值观也在被扭曲、在被功利化。在这种功利化的巨大压力下，这已经不是一个挫折教育的教育模式，而是一个挫败教育，就是通过排名不断使更多的学生觉得自己是失败者</strong>。所有的人都对分数非常敏感且在意，因为考试成绩，已经成为评价一个人唯一的标准。在这样的价值观下面，我们大概很难真正健康起来。而<strong>价值观对人有非常重要的支撑作用。一个人知道自己是谁，知道做什么事情是对的、是好的，知道做什么事情能够让自己发自内心地感到喜悦和自我肯定，是支撑我们的重要因素</strong>。</p>\n<p>应试教育培养的高分学生，大部分没有个性与主见。应试教育的本质实为奴化教育，导致学生缺乏表达的勇气，不敢独立思考，已经达到了无法形容的地步。</p>\n<p><strong>流水化教育下的数代人，在初高中时并没有形成选择自己职业和人生方向的自觉，于是到了大学里，考研、出国、打游戏、谈恋爱、找工作，多少人扪心自问知道自己到底在干什么，就我观察到的大部分人来看，庸庸碌碌或者青年得意都无所谓，因为讲真，大部分都在以不同的方式随波逐流而已。然后到了毕业之前，把困惑，迷茫，面对社会的手足无措，价值观的冲击，统统归结为青春的伤痛，生来彷徨。什么伤痛，狗屁彷徨，根本就是人祸，祸根早就在初高中时候就种下了，慢性毒药而不自知。最终，这一切将以整个社会价值取向的单一化和拜金主义为代价，因为推动这个社会前进的中坚力量，其实并不知道自己真正想要什么</strong>。</p>\n<p>我甚至在看到那群高中老师在夸赞高三学生努力的时候我都觉得这是在对他们生命的摧残。那群老师并没有真正的关心过学生想要的是什么，然而他们自己也不知道他们想要的是什么。</p>\n<p>应试教育并不鼓励对真理的探索，简单地说，应试教育倾向于告诉你什么是正确的，而不会告诉你它为什么正确，以及我们是如何探索到正确答案的，中间又踩了多少坑。</p>\n<p>当学生们回到家时，家长最关心的是孩子学到什么知识。</p>\n<blockquote>\n<ul>\n<li>若孩子说：“我们今天学习了 XX 定理，然后用这个定理讲了几道例题，然后布置了几道相关的作业题。” 家长们会感到满意。</li>\n</ul>\n</blockquote>\n<ul>\n<li>若孩子说：“今天老师让我们讨论了一道难题的解法，我们各执己见，得到了很多不同的答案，然后老师分析了每个人答案的错误和不足之处，但并没有告诉我们正确答案，他让我们回家查阅资料，继续想，明天上课讨论。” 家长们则会想：这老师教的是什么玩意儿！那么低效！</li>\n</ul>\n<p>如果为了追求考试分数，当然是前一种很好。如果是为了培养学生的独立思考和探索的能力，还真的是后一种好啊。让我们进入社会时，过去学的知识点和考试分数很多都用不上了，但独立思考和探索的能力，却是受益终生的。</p>\n<p><strong>如果我们不鼓励探索能力的培养，永远只告诉你结论，那我们学习东西，永远是线性的，而且随着时间的流逝，还容易遗忘；但如果我们掌握了思考的方法，那么我们就拥有学习大量知识的潜能，让我们越学越快。在缺乏学习资料的情况下，这种潜能也能帮助我们自主地学到更多的东西</strong>。</p>\n<h3 id=\"0x100-结局\"><a href=\"#0x100-结局\" class=\"headerlink\" title=\"0x100 结局\"></a>0x100 结局</h3><p>再来说高考本身只是个带着部分洗牌功能的游戏，没有能力跳出去的人，最好的选择是：学会游戏规则，尽可能的去玩好它。但是一定要知道，是游戏总有结束的一天，你总要面对真实的世界，在这一天真正到来之前，<strong>你需要做的是，尽可能的认识世界和自我。一旦有了这样的意识，就已经透进了一点光</strong>。</p>\n<p>然而，<br>很多人没弄清的一点就是，在这个污糟的制度下，作为公民而非肉食者，我们永远无需去体谅这个国家由于历史积弊之深厚，社会格局之复杂，改革之艰难，所以“有今天已经很不容易了”，“至少普及了基础教育”，“至少是相对公平的制度”，“至少保证了社会的流动性”。因为<strong>强权政府的存在</strong>，我们永远无需维护和肯定这个现行制度，因为不关你事。如果你觉得好，放在心里，也不必发声。作为公民的责任，如果你要发声，就应该挑剔，就应该不满足。</p>\n<h3 id=\"0x101-致谢\"><a href=\"#0x101-致谢\" class=\"headerlink\" title=\"0x101 致谢\"></a>0x101 致谢</h3><p>多谢各位看官能看到这个地方。现在是福利时间(图片来自 <a href=\"http://meizi.us\" target=\"_blank\" rel=\"noopener\">妹子图</a>)：</p>\n<p><img src=\"https://oa7kw8mwj.qnssl.com/20b58e46368f4d75a3964b4de11f4b46.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"0x001\"><a href=\"#0x001\" class=\"headerlink\" title=\"0x001\"></a>0x001</h3><p>我们先来欣赏下周即将在天朝上映的《你的名字》的 OP:</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=426881487&auto=1&height=66\"></iframe>\n\n<blockquote>\n<p>前前前世から僕は　君を探しはじめたよ<br>そのぶきっちょな笑い方をめがけて　やってきたんだよ<br>君が全然全部なくなって　チリヂリになったって<br>もう迷わない　また１から探しはじめるさ<br>何光年でも　この歌を口ずさみながら<br>从前前前世开始 我就已经开始探寻你的踪迹<br>以你那笨笨的笑容为线索 寻找至今<br>即便你化为碎片粉尘 全部消失<br>我也不会迷茫，再从头开始找就是啦<br>哼着这首歌，再找上个几光年吧</p>\n</blockquote>\n<p>文末有福利。 因为某位同学说：都没有果照还敢叫 <code>sexy</code>。</p>\n<h3 id=\"0x010\"><a href=\"#0x010\" class=\"headerlink\" title=\"0x010\"></a>0x010</h3><p>今天的主题是应试教育，然而我是来喷应试教育的，但是我不会给出可能有用的解决办法（喷子）。昨天卡斯特罗去世，意味着这个世界上已经没有相信共产主义的人了。</p>\n<h3 id=\"0x011-fking-应试教育\"><a href=\"#0x011-fking-应试教育\" class=\"headerlink\" title=\"0x011 fking 应试教育\"></a>0x011 fking 应试教育</h3><p><strong>侵犯学生的人权，剥夺学生的个性、思想与自由。</strong>对学生个人的外观、饰物、兴趣爱好等进行控制与干预，对学生的隐私（如考试成绩、生活习惯等等）进行泄露。在高中时期尤为明显，不能留长发，不能奇装异服，WTF</p>\n<p><strong>价值观的扭曲：应试教育教给学生的是笔试上的分数比较，属纸上谈兵，欠缺知识的实行</strong>，缺乏对实际生活的联系。<br>为了让我们学习理科，应试教育 “发明了” 一些奇怪的场景，比如：</p>\n<blockquote>\n<ul>\n<li>一边蓄水一边放水的水池，最终水池干了；</li>\n</ul>\n</blockquote>\n<ul>\n<li>白天往上爬，晚上在墙上休息，掉下去一点点的井底之蛙；</li>\n<li>SB一样沿着直线逃跑的羊和按照螺旋线追羊的奇怪的狼……</li>\n</ul>\n<p>学习的主体学生在应试教育体系中地位低下，几乎没有任何干涉教育体制的权利，导致教育体制得不到大多数学生的认可，教学内容也随之超出学生的接受能力，违背学生的利益。</p>\n<p>不注重综合能力的培养，导致出现“高分低能”，以致被讽为“应试教育是个筐，什么垃圾都能装”。这里面所有的<strong>价值观就是只关心分数，基础教育者忽视甚至放弃了对人的培养，一切让位于考试。</strong></p>\n<p>这种让位于考试不仅体现在对题海战术、学习成绩的盲目追求上，更重要的是它背后代表了一种强烈的价值观，即“<strong>我只要能够达到一个好的分数，我可以放弃一切、忽视一切、抛弃一切、践踏一切。</strong>”就像钱理群教授所说的那样，我们看到很多大学里的大学生都是所谓“<strong>精致的利己主义者</strong>”，但这种精致的利己主义者并不是他们自身是这样的——我们的孩子一点问题都没有，他们的问题都是我们的教育者造成的。</p>\n<p>我们的教育是怎么实现这些东西的呢？比如已经不再重视能够培养出什么样好学生，而在于我们怎么“掐尖”，把所有高分、高智商的学生不择手段弄到自己的学校里来，然后通过各种各样的排名机制从商业上证明我是一个好的学校，所以可以收更高的费用，收更多自费的学生。</p>\n<p>然后，我们整个教育的价值观都变成了在升学考试中考试的内容并不是课上教的。你要取得好成绩，就必须参加各种高昂的课外班，完全把教育商品化。</p>\n<p>我不仅仅是在批评这样一个教育观。更重要的是，<strong>这样的教育观培养出来的同学，已经完全被训练成分数的奴隶，不知道自己为什么要活着，只知道高的分数可能获得奖赏，获得成就感，获得别人不能得到的东西。</strong></p>\n<p><strong>学生不仅仅在经历压力，他们的价值观也在被扭曲、在被功利化。在这种功利化的巨大压力下，这已经不是一个挫折教育的教育模式，而是一个挫败教育，就是通过排名不断使更多的学生觉得自己是失败者</strong>。所有的人都对分数非常敏感且在意，因为考试成绩，已经成为评价一个人唯一的标准。在这样的价值观下面，我们大概很难真正健康起来。而<strong>价值观对人有非常重要的支撑作用。一个人知道自己是谁，知道做什么事情是对的、是好的，知道做什么事情能够让自己发自内心地感到喜悦和自我肯定，是支撑我们的重要因素</strong>。</p>\n<p>应试教育培养的高分学生，大部分没有个性与主见。应试教育的本质实为奴化教育，导致学生缺乏表达的勇气，不敢独立思考，已经达到了无法形容的地步。</p>\n<p><strong>流水化教育下的数代人，在初高中时并没有形成选择自己职业和人生方向的自觉，于是到了大学里，考研、出国、打游戏、谈恋爱、找工作，多少人扪心自问知道自己到底在干什么，就我观察到的大部分人来看，庸庸碌碌或者青年得意都无所谓，因为讲真，大部分都在以不同的方式随波逐流而已。然后到了毕业之前，把困惑，迷茫，面对社会的手足无措，价值观的冲击，统统归结为青春的伤痛，生来彷徨。什么伤痛，狗屁彷徨，根本就是人祸，祸根早就在初高中时候就种下了，慢性毒药而不自知。最终，这一切将以整个社会价值取向的单一化和拜金主义为代价，因为推动这个社会前进的中坚力量，其实并不知道自己真正想要什么</strong>。</p>\n<p>我甚至在看到那群高中老师在夸赞高三学生努力的时候我都觉得这是在对他们生命的摧残。那群老师并没有真正的关心过学生想要的是什么，然而他们自己也不知道他们想要的是什么。</p>\n<p>应试教育并不鼓励对真理的探索，简单地说，应试教育倾向于告诉你什么是正确的，而不会告诉你它为什么正确，以及我们是如何探索到正确答案的，中间又踩了多少坑。</p>\n<p>当学生们回到家时，家长最关心的是孩子学到什么知识。</p>\n<blockquote>\n<ul>\n<li>若孩子说：“我们今天学习了 XX 定理，然后用这个定理讲了几道例题，然后布置了几道相关的作业题。” 家长们会感到满意。</li>\n</ul>\n</blockquote>\n<ul>\n<li>若孩子说：“今天老师让我们讨论了一道难题的解法，我们各执己见，得到了很多不同的答案，然后老师分析了每个人答案的错误和不足之处，但并没有告诉我们正确答案，他让我们回家查阅资料，继续想，明天上课讨论。” 家长们则会想：这老师教的是什么玩意儿！那么低效！</li>\n</ul>\n<p>如果为了追求考试分数，当然是前一种很好。如果是为了培养学生的独立思考和探索的能力，还真的是后一种好啊。让我们进入社会时，过去学的知识点和考试分数很多都用不上了，但独立思考和探索的能力，却是受益终生的。</p>\n<p><strong>如果我们不鼓励探索能力的培养，永远只告诉你结论，那我们学习东西，永远是线性的，而且随着时间的流逝，还容易遗忘；但如果我们掌握了思考的方法，那么我们就拥有学习大量知识的潜能，让我们越学越快。在缺乏学习资料的情况下，这种潜能也能帮助我们自主地学到更多的东西</strong>。</p>\n<h3 id=\"0x100-结局\"><a href=\"#0x100-结局\" class=\"headerlink\" title=\"0x100 结局\"></a>0x100 结局</h3><p>再来说高考本身只是个带着部分洗牌功能的游戏，没有能力跳出去的人，最好的选择是：学会游戏规则，尽可能的去玩好它。但是一定要知道，是游戏总有结束的一天，你总要面对真实的世界，在这一天真正到来之前，<strong>你需要做的是，尽可能的认识世界和自我。一旦有了这样的意识，就已经透进了一点光</strong>。</p>\n<p>然而，<br>很多人没弄清的一点就是，在这个污糟的制度下，作为公民而非肉食者，我们永远无需去体谅这个国家由于历史积弊之深厚，社会格局之复杂，改革之艰难，所以“有今天已经很不容易了”，“至少普及了基础教育”，“至少是相对公平的制度”，“至少保证了社会的流动性”。因为<strong>强权政府的存在</strong>，我们永远无需维护和肯定这个现行制度，因为不关你事。如果你觉得好，放在心里，也不必发声。作为公民的责任，如果你要发声，就应该挑剔，就应该不满足。</p>\n<h3 id=\"0x101-致谢\"><a href=\"#0x101-致谢\" class=\"headerlink\" title=\"0x101 致谢\"></a>0x101 致谢</h3><p>多谢各位看官能看到这个地方。现在是福利时间(图片来自 <a href=\"http://meizi.us\" target=\"_blank\" rel=\"noopener\">妹子图</a>)：</p>\n<p><img src=\"https://oa7kw8mwj.qnssl.com/20b58e46368f4d75a3964b4de11f4b46.jpg\" alt=\"\"></p>\n"},{"title":"未来边缘","date":"2016-11-05T08:19:53.000Z","photos":["https://oa7ktymto.qnssl.com/future.png"],"_content":"\n今天从超市出来，时间17:22，天已经黑下去了(好可怕)。两年前刚刚来上海的时候，也是11月初，从地铁站出来天已经黑了(天居然黑那么早)，然后一个人拖着箱子走了跟着地图走了两三公里去找了一个100块一晚没有窗户的旅馆住了一个晚上。转眼就两年了，在我牛待了两年，从一个愣头小子慢慢变成了团队的主力之一。这周刚刚结束新项目的997，准备自己做点东西吃，炒了个土豆丝一个茄子，油放太多，好难吃。很久木有做饭果然手生了。 以下是正文：\n\n昨天晚上看了刘慈欣大大的 <未来边缘>，因为以前看过三体了，属于软科幻吧，因为所用到的科学名词和科学知识都是科普级别了，众所周知。里面的每个故事都有一个很明显的主旨，新奇。\n\n##### 天使时代\n\n讲通过编程的手段改变人类基因，让人类可以任何植物为食。尽管文明伦理光鲜靓丽，但是吃饱饭和生存才是硬道理。后来引发反抗，竟然出现了长翅膀的黑人战士。飞翔是人类的梦想。其实都是在揭示，有些改变虽然令人难以接受，却是触及了人类本质的东西，生存和生存的意义。创造生命实际上就是编程序，上帝原来是个程序员。毕竟我们中的大多数人都没有经历过饥荒，如今的你我只能从电影《一九四二》中了解饥荒的含义，或者从父母的只言片语中对上世纪六十年代发生的那次大饥荒窥探一二。母亲说，他们那一代人最大的梦想就是吃饱肚子，不求其他。倘若吃不饱肚子，还讲什么道义？\n\n##### 命运\n\n讲人类误入时间虫洞，错误决定撞击了毁灭恐龙的小行星，结果改变了历史，人类不再是地球的食物链的顶点。概率是不确定的，我们都不要把一切当作必然，要学会感恩，学会释然。让我想到了 <海贼王> 里面的海王类。当人类不再是地球食物链的顶点，当人类成为了观赏人，菜人，人类才能学会感恩(谢主'龙'恩)。进化选择人类，可能真的只是一个巧合。\n\n##### 2018年4月1日\n\n未来在网络成立了虚拟国家，开发出了基因改造延长生命的技术，讲一个普通职工如何因基延技术被爱人背叛，而挪用公款为自己购买基延。只是设定一种可能的环境，然后考验人性的故事。从写字楼顶层的窗子望出去，城市在下面扩展开来，像一片被剖开的集成电路，我不过是那密密麻麻的纳米线路中奔跑的一个电子。\n\n###### 关于时间\n\n其实，有了时间就有了一切，只要时间足够，一只乱敲打字机的猴子都能打出 <莎士比亚全集>，而你有的是时间。\n\n###### 关于自我\n\n自我的概念本来就很可疑，构成自我的身体、记忆和意识都是在不断的变化中，与简简(人名)分别之前的我，以犯罪的方式付款之前的我，与主任交淡之前的我，甚至在打出这“甚至”之前的我，都已经不是同一个人了。\n\n人类感觉的实质就是不同神经元网络对于外界的信息作出的不同反应，我们就把这个玩意儿叫做意识！\n\n##### 赡养上帝\n\n讲人类的创造者因为安逸失去创造力和自力更生能力，回来地球要求人类的赡养。其实就是讲述人如何嫌弃家里老人的社会现象。故事结尾，有点《三体》的味道，上帝告诉人类，不止有一个地球，而谁先飞出星际谁才能存活。\n\n###### 关于文明\n\n每个人都会经历童年、青年、中年和老年最终走向死亡，恒星也一样，宇宙中的任何事物都一样，甚至宇宙本身，也有终结的那一天，为什么独有文明能够一直成长呢？不，文明也都有老去的那一天，当然也都有死亡的那一天。\n\n不同的文明有着不同的衰老和死亡方式，像不同的人死于不同的疾病或无疾而终一样。具体到上帝文明，个体寿命的延长是文明步入老年的第一个标志。那时，上帝文明中的个体寿命已延长至近四千个地球年，而他们的思想在两千岁左右就已完全僵化，创造性消失殆尽。这样的个体掌握了社会的绝大部分权力，而新的生命很难出生和成长，文明就老了。” “以后呢？” “文明衰老的第二个标志是机器摇篮时代。” “嗯？” “那时，我们的机器已经完全不依赖于它们的创造者而独立运行，能够自我维护、更新和扩展，这样的智能机器能够提供一切我们所需要的东西，这不只是物质需要，也包括精神需要，我们不需为生存付出任何努力，完全靠机器养活了，就像躺在一个舒适的摇篮中。想一想，假如当初地球的丛林中充满了采摘不尽的果实，到处是伸手就能抓到的小猎物，猿还能进化成人吗？机器摇篮就是这样一个富庶的丛林，渐渐地，我们忘却了技术和科学，文化变得懒散而空虚，失去了创新能力和进取心，文明加速老去，你们所看到的，就是这样一个进入了风烛残年的上帝文明。\n\n任何文明，呆在它诞生的世界不动就等于自杀！到宇宙中去寻找新的世界新的家，把你们的后代像春雨般撒遍银河系！\n\n###### 关于距离\n\n上帝用拐杖指指天空：“这个宇宙，只要你耐心等待，什么愿望都有可能实现，虽然这种可能性十分渺茫，但总是存在的。我对你们说过，宇宙诞生于一场大爆炸，现在，引力使它的膨胀速度慢了下来，然后宇宙的膨胀会停下来，转为坍缩。如果我们的飞船真能再次接近光速，我就让它无限逼近光速飞行，这样就能跨越无限的时间，直接到达宇宙的末日时刻，那时，宇宙已经坍缩得很小很小，会比兵兵的皮球还小，会成为一个点，那时，宇宙中的一切都在一起了，我和她，自然也在一起了。”一滴泪滚出上帝的眼眶，滚到胡子上，在上午的阳光中晶莹闪烁着，“宇宙啊，就是《梁祝》最后的坟墓，我和她，就是墓中飞出的两只蝶啊……\n\n##### 微纪元\n\n讲人类为了适应宇宙的变化把自己微缩后，人类最后一个常人回到地球的见闻。最后为了不破坏微纪元，这个常人把人类最后的胚胎细胞删毁了。不作任何评论。\n\n> 我们要做的，就是努力飞出去，飞到更远的地方\n\nDon't give up on your dreams, keep sleeping","source":"_posts/未来边缘.md","raw":"---\ntitle: 未来边缘\ndate: 2016-11-05 16:19:53\ntags: \n\t- Space\nphotos:\n\t- https://oa7ktymto.qnssl.com/future.png\n---\n\n今天从超市出来，时间17:22，天已经黑下去了(好可怕)。两年前刚刚来上海的时候，也是11月初，从地铁站出来天已经黑了(天居然黑那么早)，然后一个人拖着箱子走了跟着地图走了两三公里去找了一个100块一晚没有窗户的旅馆住了一个晚上。转眼就两年了，在我牛待了两年，从一个愣头小子慢慢变成了团队的主力之一。这周刚刚结束新项目的997，准备自己做点东西吃，炒了个土豆丝一个茄子，油放太多，好难吃。很久木有做饭果然手生了。 以下是正文：\n\n昨天晚上看了刘慈欣大大的 <未来边缘>，因为以前看过三体了，属于软科幻吧，因为所用到的科学名词和科学知识都是科普级别了，众所周知。里面的每个故事都有一个很明显的主旨，新奇。\n\n##### 天使时代\n\n讲通过编程的手段改变人类基因，让人类可以任何植物为食。尽管文明伦理光鲜靓丽，但是吃饱饭和生存才是硬道理。后来引发反抗，竟然出现了长翅膀的黑人战士。飞翔是人类的梦想。其实都是在揭示，有些改变虽然令人难以接受，却是触及了人类本质的东西，生存和生存的意义。创造生命实际上就是编程序，上帝原来是个程序员。毕竟我们中的大多数人都没有经历过饥荒，如今的你我只能从电影《一九四二》中了解饥荒的含义，或者从父母的只言片语中对上世纪六十年代发生的那次大饥荒窥探一二。母亲说，他们那一代人最大的梦想就是吃饱肚子，不求其他。倘若吃不饱肚子，还讲什么道义？\n\n##### 命运\n\n讲人类误入时间虫洞，错误决定撞击了毁灭恐龙的小行星，结果改变了历史，人类不再是地球的食物链的顶点。概率是不确定的，我们都不要把一切当作必然，要学会感恩，学会释然。让我想到了 <海贼王> 里面的海王类。当人类不再是地球食物链的顶点，当人类成为了观赏人，菜人，人类才能学会感恩(谢主'龙'恩)。进化选择人类，可能真的只是一个巧合。\n\n##### 2018年4月1日\n\n未来在网络成立了虚拟国家，开发出了基因改造延长生命的技术，讲一个普通职工如何因基延技术被爱人背叛，而挪用公款为自己购买基延。只是设定一种可能的环境，然后考验人性的故事。从写字楼顶层的窗子望出去，城市在下面扩展开来，像一片被剖开的集成电路，我不过是那密密麻麻的纳米线路中奔跑的一个电子。\n\n###### 关于时间\n\n其实，有了时间就有了一切，只要时间足够，一只乱敲打字机的猴子都能打出 <莎士比亚全集>，而你有的是时间。\n\n###### 关于自我\n\n自我的概念本来就很可疑，构成自我的身体、记忆和意识都是在不断的变化中，与简简(人名)分别之前的我，以犯罪的方式付款之前的我，与主任交淡之前的我，甚至在打出这“甚至”之前的我，都已经不是同一个人了。\n\n人类感觉的实质就是不同神经元网络对于外界的信息作出的不同反应，我们就把这个玩意儿叫做意识！\n\n##### 赡养上帝\n\n讲人类的创造者因为安逸失去创造力和自力更生能力，回来地球要求人类的赡养。其实就是讲述人如何嫌弃家里老人的社会现象。故事结尾，有点《三体》的味道，上帝告诉人类，不止有一个地球，而谁先飞出星际谁才能存活。\n\n###### 关于文明\n\n每个人都会经历童年、青年、中年和老年最终走向死亡，恒星也一样，宇宙中的任何事物都一样，甚至宇宙本身，也有终结的那一天，为什么独有文明能够一直成长呢？不，文明也都有老去的那一天，当然也都有死亡的那一天。\n\n不同的文明有着不同的衰老和死亡方式，像不同的人死于不同的疾病或无疾而终一样。具体到上帝文明，个体寿命的延长是文明步入老年的第一个标志。那时，上帝文明中的个体寿命已延长至近四千个地球年，而他们的思想在两千岁左右就已完全僵化，创造性消失殆尽。这样的个体掌握了社会的绝大部分权力，而新的生命很难出生和成长，文明就老了。” “以后呢？” “文明衰老的第二个标志是机器摇篮时代。” “嗯？” “那时，我们的机器已经完全不依赖于它们的创造者而独立运行，能够自我维护、更新和扩展，这样的智能机器能够提供一切我们所需要的东西，这不只是物质需要，也包括精神需要，我们不需为生存付出任何努力，完全靠机器养活了，就像躺在一个舒适的摇篮中。想一想，假如当初地球的丛林中充满了采摘不尽的果实，到处是伸手就能抓到的小猎物，猿还能进化成人吗？机器摇篮就是这样一个富庶的丛林，渐渐地，我们忘却了技术和科学，文化变得懒散而空虚，失去了创新能力和进取心，文明加速老去，你们所看到的，就是这样一个进入了风烛残年的上帝文明。\n\n任何文明，呆在它诞生的世界不动就等于自杀！到宇宙中去寻找新的世界新的家，把你们的后代像春雨般撒遍银河系！\n\n###### 关于距离\n\n上帝用拐杖指指天空：“这个宇宙，只要你耐心等待，什么愿望都有可能实现，虽然这种可能性十分渺茫，但总是存在的。我对你们说过，宇宙诞生于一场大爆炸，现在，引力使它的膨胀速度慢了下来，然后宇宙的膨胀会停下来，转为坍缩。如果我们的飞船真能再次接近光速，我就让它无限逼近光速飞行，这样就能跨越无限的时间，直接到达宇宙的末日时刻，那时，宇宙已经坍缩得很小很小，会比兵兵的皮球还小，会成为一个点，那时，宇宙中的一切都在一起了，我和她，自然也在一起了。”一滴泪滚出上帝的眼眶，滚到胡子上，在上午的阳光中晶莹闪烁着，“宇宙啊，就是《梁祝》最后的坟墓，我和她，就是墓中飞出的两只蝶啊……\n\n##### 微纪元\n\n讲人类为了适应宇宙的变化把自己微缩后，人类最后一个常人回到地球的见闻。最后为了不破坏微纪元，这个常人把人类最后的胚胎细胞删毁了。不作任何评论。\n\n> 我们要做的，就是努力飞出去，飞到更远的地方\n\nDon't give up on your dreams, keep sleeping","slug":"未来边缘","published":1,"updated":"2017-11-03T14:04:48.000Z","comments":1,"layout":"post","link":"","_id":"ckatepn7q000iq0txghp49e22","content":"<p>今天从超市出来，时间17:22，天已经黑下去了(好可怕)。两年前刚刚来上海的时候，也是11月初，从地铁站出来天已经黑了(天居然黑那么早)，然后一个人拖着箱子走了跟着地图走了两三公里去找了一个100块一晚没有窗户的旅馆住了一个晚上。转眼就两年了，在我牛待了两年，从一个愣头小子慢慢变成了团队的主力之一。这周刚刚结束新项目的997，准备自己做点东西吃，炒了个土豆丝一个茄子，油放太多，好难吃。很久木有做饭果然手生了。 以下是正文：</p>\n<p>昨天晚上看了刘慈欣大大的 &lt;未来边缘&gt;，因为以前看过三体了，属于软科幻吧，因为所用到的科学名词和科学知识都是科普级别了，众所周知。里面的每个故事都有一个很明显的主旨，新奇。</p>\n<h5 id=\"天使时代\"><a href=\"#天使时代\" class=\"headerlink\" title=\"天使时代\"></a>天使时代</h5><p>讲通过编程的手段改变人类基因，让人类可以任何植物为食。尽管文明伦理光鲜靓丽，但是吃饱饭和生存才是硬道理。后来引发反抗，竟然出现了长翅膀的黑人战士。飞翔是人类的梦想。其实都是在揭示，有些改变虽然令人难以接受，却是触及了人类本质的东西，生存和生存的意义。创造生命实际上就是编程序，上帝原来是个程序员。毕竟我们中的大多数人都没有经历过饥荒，如今的你我只能从电影《一九四二》中了解饥荒的含义，或者从父母的只言片语中对上世纪六十年代发生的那次大饥荒窥探一二。母亲说，他们那一代人最大的梦想就是吃饱肚子，不求其他。倘若吃不饱肚子，还讲什么道义？</p>\n<h5 id=\"命运\"><a href=\"#命运\" class=\"headerlink\" title=\"命运\"></a>命运</h5><p>讲人类误入时间虫洞，错误决定撞击了毁灭恐龙的小行星，结果改变了历史，人类不再是地球的食物链的顶点。概率是不确定的，我们都不要把一切当作必然，要学会感恩，学会释然。让我想到了 &lt;海贼王&gt; 里面的海王类。当人类不再是地球食物链的顶点，当人类成为了观赏人，菜人，人类才能学会感恩(谢主’龙’恩)。进化选择人类，可能真的只是一个巧合。</p>\n<h5 id=\"2018年4月1日\"><a href=\"#2018年4月1日\" class=\"headerlink\" title=\"2018年4月1日\"></a>2018年4月1日</h5><p>未来在网络成立了虚拟国家，开发出了基因改造延长生命的技术，讲一个普通职工如何因基延技术被爱人背叛，而挪用公款为自己购买基延。只是设定一种可能的环境，然后考验人性的故事。从写字楼顶层的窗子望出去，城市在下面扩展开来，像一片被剖开的集成电路，我不过是那密密麻麻的纳米线路中奔跑的一个电子。</p>\n<h6 id=\"关于时间\"><a href=\"#关于时间\" class=\"headerlink\" title=\"关于时间\"></a>关于时间</h6><p>其实，有了时间就有了一切，只要时间足够，一只乱敲打字机的猴子都能打出 &lt;莎士比亚全集&gt;，而你有的是时间。</p>\n<h6 id=\"关于自我\"><a href=\"#关于自我\" class=\"headerlink\" title=\"关于自我\"></a>关于自我</h6><p>自我的概念本来就很可疑，构成自我的身体、记忆和意识都是在不断的变化中，与简简(人名)分别之前的我，以犯罪的方式付款之前的我，与主任交淡之前的我，甚至在打出这“甚至”之前的我，都已经不是同一个人了。</p>\n<p>人类感觉的实质就是不同神经元网络对于外界的信息作出的不同反应，我们就把这个玩意儿叫做意识！</p>\n<h5 id=\"赡养上帝\"><a href=\"#赡养上帝\" class=\"headerlink\" title=\"赡养上帝\"></a>赡养上帝</h5><p>讲人类的创造者因为安逸失去创造力和自力更生能力，回来地球要求人类的赡养。其实就是讲述人如何嫌弃家里老人的社会现象。故事结尾，有点《三体》的味道，上帝告诉人类，不止有一个地球，而谁先飞出星际谁才能存活。</p>\n<h6 id=\"关于文明\"><a href=\"#关于文明\" class=\"headerlink\" title=\"关于文明\"></a>关于文明</h6><p>每个人都会经历童年、青年、中年和老年最终走向死亡，恒星也一样，宇宙中的任何事物都一样，甚至宇宙本身，也有终结的那一天，为什么独有文明能够一直成长呢？不，文明也都有老去的那一天，当然也都有死亡的那一天。</p>\n<p>不同的文明有着不同的衰老和死亡方式，像不同的人死于不同的疾病或无疾而终一样。具体到上帝文明，个体寿命的延长是文明步入老年的第一个标志。那时，上帝文明中的个体寿命已延长至近四千个地球年，而他们的思想在两千岁左右就已完全僵化，创造性消失殆尽。这样的个体掌握了社会的绝大部分权力，而新的生命很难出生和成长，文明就老了。” “以后呢？” “文明衰老的第二个标志是机器摇篮时代。” “嗯？” “那时，我们的机器已经完全不依赖于它们的创造者而独立运行，能够自我维护、更新和扩展，这样的智能机器能够提供一切我们所需要的东西，这不只是物质需要，也包括精神需要，我们不需为生存付出任何努力，完全靠机器养活了，就像躺在一个舒适的摇篮中。想一想，假如当初地球的丛林中充满了采摘不尽的果实，到处是伸手就能抓到的小猎物，猿还能进化成人吗？机器摇篮就是这样一个富庶的丛林，渐渐地，我们忘却了技术和科学，文化变得懒散而空虚，失去了创新能力和进取心，文明加速老去，你们所看到的，就是这样一个进入了风烛残年的上帝文明。</p>\n<p>任何文明，呆在它诞生的世界不动就等于自杀！到宇宙中去寻找新的世界新的家，把你们的后代像春雨般撒遍银河系！</p>\n<h6 id=\"关于距离\"><a href=\"#关于距离\" class=\"headerlink\" title=\"关于距离\"></a>关于距离</h6><p>上帝用拐杖指指天空：“这个宇宙，只要你耐心等待，什么愿望都有可能实现，虽然这种可能性十分渺茫，但总是存在的。我对你们说过，宇宙诞生于一场大爆炸，现在，引力使它的膨胀速度慢了下来，然后宇宙的膨胀会停下来，转为坍缩。如果我们的飞船真能再次接近光速，我就让它无限逼近光速飞行，这样就能跨越无限的时间，直接到达宇宙的末日时刻，那时，宇宙已经坍缩得很小很小，会比兵兵的皮球还小，会成为一个点，那时，宇宙中的一切都在一起了，我和她，自然也在一起了。”一滴泪滚出上帝的眼眶，滚到胡子上，在上午的阳光中晶莹闪烁着，“宇宙啊，就是《梁祝》最后的坟墓，我和她，就是墓中飞出的两只蝶啊……</p>\n<h5 id=\"微纪元\"><a href=\"#微纪元\" class=\"headerlink\" title=\"微纪元\"></a>微纪元</h5><p>讲人类为了适应宇宙的变化把自己微缩后，人类最后一个常人回到地球的见闻。最后为了不破坏微纪元，这个常人把人类最后的胚胎细胞删毁了。不作任何评论。</p>\n<blockquote>\n<p>我们要做的，就是努力飞出去，飞到更远的地方</p>\n</blockquote>\n<p>Don’t give up on your dreams, keep sleeping</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天从超市出来，时间17:22，天已经黑下去了(好可怕)。两年前刚刚来上海的时候，也是11月初，从地铁站出来天已经黑了(天居然黑那么早)，然后一个人拖着箱子走了跟着地图走了两三公里去找了一个100块一晚没有窗户的旅馆住了一个晚上。转眼就两年了，在我牛待了两年，从一个愣头小子慢慢变成了团队的主力之一。这周刚刚结束新项目的997，准备自己做点东西吃，炒了个土豆丝一个茄子，油放太多，好难吃。很久木有做饭果然手生了。 以下是正文：</p>\n<p>昨天晚上看了刘慈欣大大的 &lt;未来边缘&gt;，因为以前看过三体了，属于软科幻吧，因为所用到的科学名词和科学知识都是科普级别了，众所周知。里面的每个故事都有一个很明显的主旨，新奇。</p>\n<h5 id=\"天使时代\"><a href=\"#天使时代\" class=\"headerlink\" title=\"天使时代\"></a>天使时代</h5><p>讲通过编程的手段改变人类基因，让人类可以任何植物为食。尽管文明伦理光鲜靓丽，但是吃饱饭和生存才是硬道理。后来引发反抗，竟然出现了长翅膀的黑人战士。飞翔是人类的梦想。其实都是在揭示，有些改变虽然令人难以接受，却是触及了人类本质的东西，生存和生存的意义。创造生命实际上就是编程序，上帝原来是个程序员。毕竟我们中的大多数人都没有经历过饥荒，如今的你我只能从电影《一九四二》中了解饥荒的含义，或者从父母的只言片语中对上世纪六十年代发生的那次大饥荒窥探一二。母亲说，他们那一代人最大的梦想就是吃饱肚子，不求其他。倘若吃不饱肚子，还讲什么道义？</p>\n<h5 id=\"命运\"><a href=\"#命运\" class=\"headerlink\" title=\"命运\"></a>命运</h5><p>讲人类误入时间虫洞，错误决定撞击了毁灭恐龙的小行星，结果改变了历史，人类不再是地球的食物链的顶点。概率是不确定的，我们都不要把一切当作必然，要学会感恩，学会释然。让我想到了 &lt;海贼王&gt; 里面的海王类。当人类不再是地球食物链的顶点，当人类成为了观赏人，菜人，人类才能学会感恩(谢主’龙’恩)。进化选择人类，可能真的只是一个巧合。</p>\n<h5 id=\"2018年4月1日\"><a href=\"#2018年4月1日\" class=\"headerlink\" title=\"2018年4月1日\"></a>2018年4月1日</h5><p>未来在网络成立了虚拟国家，开发出了基因改造延长生命的技术，讲一个普通职工如何因基延技术被爱人背叛，而挪用公款为自己购买基延。只是设定一种可能的环境，然后考验人性的故事。从写字楼顶层的窗子望出去，城市在下面扩展开来，像一片被剖开的集成电路，我不过是那密密麻麻的纳米线路中奔跑的一个电子。</p>\n<h6 id=\"关于时间\"><a href=\"#关于时间\" class=\"headerlink\" title=\"关于时间\"></a>关于时间</h6><p>其实，有了时间就有了一切，只要时间足够，一只乱敲打字机的猴子都能打出 &lt;莎士比亚全集&gt;，而你有的是时间。</p>\n<h6 id=\"关于自我\"><a href=\"#关于自我\" class=\"headerlink\" title=\"关于自我\"></a>关于自我</h6><p>自我的概念本来就很可疑，构成自我的身体、记忆和意识都是在不断的变化中，与简简(人名)分别之前的我，以犯罪的方式付款之前的我，与主任交淡之前的我，甚至在打出这“甚至”之前的我，都已经不是同一个人了。</p>\n<p>人类感觉的实质就是不同神经元网络对于外界的信息作出的不同反应，我们就把这个玩意儿叫做意识！</p>\n<h5 id=\"赡养上帝\"><a href=\"#赡养上帝\" class=\"headerlink\" title=\"赡养上帝\"></a>赡养上帝</h5><p>讲人类的创造者因为安逸失去创造力和自力更生能力，回来地球要求人类的赡养。其实就是讲述人如何嫌弃家里老人的社会现象。故事结尾，有点《三体》的味道，上帝告诉人类，不止有一个地球，而谁先飞出星际谁才能存活。</p>\n<h6 id=\"关于文明\"><a href=\"#关于文明\" class=\"headerlink\" title=\"关于文明\"></a>关于文明</h6><p>每个人都会经历童年、青年、中年和老年最终走向死亡，恒星也一样，宇宙中的任何事物都一样，甚至宇宙本身，也有终结的那一天，为什么独有文明能够一直成长呢？不，文明也都有老去的那一天，当然也都有死亡的那一天。</p>\n<p>不同的文明有着不同的衰老和死亡方式，像不同的人死于不同的疾病或无疾而终一样。具体到上帝文明，个体寿命的延长是文明步入老年的第一个标志。那时，上帝文明中的个体寿命已延长至近四千个地球年，而他们的思想在两千岁左右就已完全僵化，创造性消失殆尽。这样的个体掌握了社会的绝大部分权力，而新的生命很难出生和成长，文明就老了。” “以后呢？” “文明衰老的第二个标志是机器摇篮时代。” “嗯？” “那时，我们的机器已经完全不依赖于它们的创造者而独立运行，能够自我维护、更新和扩展，这样的智能机器能够提供一切我们所需要的东西，这不只是物质需要，也包括精神需要，我们不需为生存付出任何努力，完全靠机器养活了，就像躺在一个舒适的摇篮中。想一想，假如当初地球的丛林中充满了采摘不尽的果实，到处是伸手就能抓到的小猎物，猿还能进化成人吗？机器摇篮就是这样一个富庶的丛林，渐渐地，我们忘却了技术和科学，文化变得懒散而空虚，失去了创新能力和进取心，文明加速老去，你们所看到的，就是这样一个进入了风烛残年的上帝文明。</p>\n<p>任何文明，呆在它诞生的世界不动就等于自杀！到宇宙中去寻找新的世界新的家，把你们的后代像春雨般撒遍银河系！</p>\n<h6 id=\"关于距离\"><a href=\"#关于距离\" class=\"headerlink\" title=\"关于距离\"></a>关于距离</h6><p>上帝用拐杖指指天空：“这个宇宙，只要你耐心等待，什么愿望都有可能实现，虽然这种可能性十分渺茫，但总是存在的。我对你们说过，宇宙诞生于一场大爆炸，现在，引力使它的膨胀速度慢了下来，然后宇宙的膨胀会停下来，转为坍缩。如果我们的飞船真能再次接近光速，我就让它无限逼近光速飞行，这样就能跨越无限的时间，直接到达宇宙的末日时刻，那时，宇宙已经坍缩得很小很小，会比兵兵的皮球还小，会成为一个点，那时，宇宙中的一切都在一起了，我和她，自然也在一起了。”一滴泪滚出上帝的眼眶，滚到胡子上，在上午的阳光中晶莹闪烁着，“宇宙啊，就是《梁祝》最后的坟墓，我和她，就是墓中飞出的两只蝶啊……</p>\n<h5 id=\"微纪元\"><a href=\"#微纪元\" class=\"headerlink\" title=\"微纪元\"></a>微纪元</h5><p>讲人类为了适应宇宙的变化把自己微缩后，人类最后一个常人回到地球的见闻。最后为了不破坏微纪元，这个常人把人类最后的胚胎细胞删毁了。不作任何评论。</p>\n<blockquote>\n<p>我们要做的，就是努力飞出去，飞到更远的地方</p>\n</blockquote>\n<p>Don’t give up on your dreams, keep sleeping</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckatepn730001q0txy358sdid","tag_id":"ckatepn7w000jq0tx76xzigck","_id":"ckatepn8l0017q0txy0u07311"},{"post_id":"ckatepn790003q0txu4cnnb69","tag_id":"ckatepn88000kq0txhyo1zzny","_id":"ckatepn8l0018q0txkx4iyoak"},{"post_id":"ckatepn7b0004q0tx8glk0w72","tag_id":"ckatepn89000lq0tx5oi24rk9","_id":"ckatepn8l0019q0txqwsw3sp7"},{"post_id":"ckatepn7b0004q0tx8glk0w72","tag_id":"ckatepn89000mq0txwy3atbh3","_id":"ckatepn8l001aq0txhnzt6kfa"},{"post_id":"ckatepn7b0005q0txwqwn9df4","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8l001bq0txulkr7v31"},{"post_id":"ckatepn7c0006q0tx9flb9kz5","tag_id":"ckatepn89000oq0tx0fimx8xa","_id":"ckatepn8m001cq0txsr3yxgf6"},{"post_id":"ckatepn7c0006q0tx9flb9kz5","tag_id":"ckatepn8a000pq0tx8g58pifd","_id":"ckatepn8m001dq0txdxlzw00t"},{"post_id":"ckatepn7c0006q0tx9flb9kz5","tag_id":"ckatepn8a000qq0txi09hmcv4","_id":"ckatepn8m001eq0txlx1qri28"},{"post_id":"ckatepn7c0006q0tx9flb9kz5","tag_id":"ckatepn8a000rq0txnngr8ozr","_id":"ckatepn8m001fq0tx9cfgqp4k"},{"post_id":"ckatepn7d0007q0txkf9ep0l0","tag_id":"ckatepn8a000sq0txa5kri3jt","_id":"ckatepn8m001gq0tx8nfp5ei5"},{"post_id":"ckatepn7e0008q0txp0jm6dtn","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8n001hq0txmru5lwaw"},{"post_id":"ckatepn7f0009q0tx0pvrzun1","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8n001iq0txw30na4bu"},{"post_id":"ckatepn7g000aq0txvn2txl7b","tag_id":"ckatepn8c000vq0txpt2pegm7","_id":"ckatepn8n001jq0tx599wwqh9"},{"post_id":"ckatepn7g000aq0txvn2txl7b","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8n001kq0txtz2zhb8j"},{"post_id":"ckatepn7h000bq0txcj44xez7","tag_id":"ckatepn8a000sq0txa5kri3jt","_id":"ckatepn8n001lq0txqssikdk7"},{"post_id":"ckatepn7j000cq0tx278q91dj","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8n001mq0txm5yb307t"},{"post_id":"ckatepn7k000dq0txwrpl8mqw","tag_id":"ckatepn8e000zq0txzhx13tta","_id":"ckatepn8n001nq0txvnjdva7f"},{"post_id":"ckatepn7l000eq0txdnc9v2k7","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8n001oq0tx4bjx0qa3"},{"post_id":"ckatepn7l000eq0txdnc9v2k7","tag_id":"ckatepn8e0011q0txgmz3h528","_id":"ckatepn8n001pq0tx3k7g8uql"},{"post_id":"ckatepn7n000fq0txclkbxycp","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8o001qq0tx4e359hoy"},{"post_id":"ckatepn7o000gq0txu9lwwbe6","tag_id":"ckatepn89000nq0tx4zdk3x2b","_id":"ckatepn8o001rq0txc89ytvic"},{"post_id":"ckatepn7o000gq0txu9lwwbe6","tag_id":"ckatepn8f0014q0tx18ostcb1","_id":"ckatepn8o001sq0txb1j0fmsh"},{"post_id":"ckatepn7p000hq0txtrsfq4kp","tag_id":"ckatepn8g0015q0txicdk57ia","_id":"ckatepn8o001tq0txt7blast6"},{"post_id":"ckatepn7q000iq0txghp49e22","tag_id":"ckatepn8a000sq0txa5kri3jt","_id":"ckatepn8o001uq0txn5h9tkgm"}],"Tag":[{"name":"2016","_id":"ckatepn7w000jq0tx76xzigck"},{"name":"Alfred Workflow","_id":"ckatepn88000kq0txhyo1zzny"},{"name":"HTTPS","_id":"ckatepn89000lq0tx5oi24rk9"},{"name":"Letsencrypt","_id":"ckatepn89000mq0txwy3atbh3"},{"name":"Golang","_id":"ckatepn89000nq0tx4zdk3x2b"},{"name":"诗","_id":"ckatepn89000oq0tx0fimx8xa"},{"name":"词","_id":"ckatepn8a000pq0tx8g58pifd"},{"name":"歌","_id":"ckatepn8a000qq0txi09hmcv4"},{"name":"赋","_id":"ckatepn8a000rq0txnngr8ozr"},{"name":"Space","_id":"ckatepn8a000sq0txa5kri3jt"},{"name":"vim","_id":"ckatepn8c000vq0txpt2pegm7"},{"name":"Hexo","_id":"ckatepn8e000zq0txzhx13tta"},{"name":"SQLite3","_id":"ckatepn8e0011q0txgmz3h528"},{"name":"Github Actions","_id":"ckatepn8f0014q0tx18ostcb1"},{"name":"教育","_id":"ckatepn8g0015q0txicdk57ia"}]}}